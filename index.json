[{"content":" If I have seen further, it is by standing on the shoulders of giants. \u0026mdash;- Sir Isaac Newton\n  https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs  ","permalink":"https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/","summary":" If I have seen further, it is by standing on the shoulders of giants. \u0026mdash;- Sir Isaac Newton\n  https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs  ","title":"Emacs 配置参考集"},{"content":"今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。\nGithub 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。\n  https://github.com/Jousimies/Jousimies.github.io\n对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。\n  https://github.com/Jousimies/hugo-source\n这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。\n  以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。\n管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。\n关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。\nclone 仓库 将上面创建的 hugo-source 项目仓库 clone 到本地，主页仓库不需要 clone 地本地。\ncd ~ git clone git@github.com:Jousimies/hugo-source.git #替换成自己的地址 HUGO hugo 安装 Macos 上通过以下命令安装。其他的操作系统参考：Install Hugo | Hugo\nbrew install hugo 通过 hugo version 查看版本，后面会用到。\nHugo quick start 这部分可以参考 Quick Start — ox-hugo - Org to Hugo exporter 中的说明。\n设及到的操作有以下三个：\ncd hugo-source hugo new site hugo-source --force # 这里必需要使用 --force git submodule add https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 echo \u0026#39;theme = \u0026#34;PaperMod\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml 以上的命令中必需要 force ，因为我是先创建的仓库 hugo-source 。 至于先创建 site 的方式，自己查资料吧，这边不说。\n需要注意的是 Quick Start — ox-hugo - Org to Hugo exporter 中第4步关于主题的设置，它推荐的是使用 hugo modules ，但是我这边会出现 hugo moduel download 然后就没有反应，所以 我推荐使用 git submodele 的方式管理主题 。\n有些教程中是使用 git clone 的方式管理主题，但是强烈建议不要直接使用 git clone 的方式管理主题，否则后面 git 配置的时候会报仓库嵌套的问题。虽然可以解决，但是我觉得麻烦，不如这里直接使用 submodule 的方式管理。\n上面的使用的是 GitHub - adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme. 这个主题。\n写文章 我使用 emacs 中的 org-mode 写，如果你要使用 markdown 写的请参考其他的教程。\n我选择把所有的文章放到一个 org 文档中，如果要分开放，自己查资料。\ncd ~/hugo-source #这里的地址取决你的仓库名 mkdir content-org cd content-org touch all-posts.org 我把 org 原始文件 all-posts.org 放到了 content-org 文件夹中，这两个你都可以用其他的名称。\n在 emacs 中打开 all-posts.org 这个文件，编辑这个文件。\n格式可以参考以下这张图： 其中 export_file_name 你可以自己定。如果一个 title 加了 TODO ，导出时在 hugo 中会显示 draft ，改成 DONE 就会去掉。\n导出 org 文档为 markdown Hugo 使用 markdown 渲染，所以要将 org 文档转换成 markdown 格式。这个在 emacs 中是使用 ox-hugo 这个包实现。\nox-hugo 的配置很简单：\n(with-eval-after-load \u0026#39;ox  (require \u0026#39;ox-hugo)) 使用 C-c C-e H H 将 org 文档转换成 markdown 文档。这个命令会将 org 中的 subtree 转换成多个 markdown 文件。如果使用 C-c C-e H h 的话，会将 all-posts.org 转换成 all-posts.md 这一个文档。\n我使用的是 C-c C-e H H 这个命令。\nhugo 预览 本地使用 hugo server 预览自己的文件。执行下面两个命令后，就可以用浏览器打开 localhost:1313 预览自己的 blog 了。\ncd hugo-source hugo server 生成静态文件 cd hugo-sourch hugo 这部分必需要做 。\nGithub Actions 配置文件 cd hugo-source mkdir -p .github/workflows touch hugo.yml #这个文件名没有影响，只要是 XXX.yml 文件就行 编辑 hugo.yml 这个文件，其中的内容可以参考：GitHub Pages action · Actions · GitHub Marketplace · GitHub\n需要注意的地方我给出了说明，其中特别要注意 deploy_key 这一项。 我这里使用 deploy_key 进行身份验证。\n name: GitHub Pages  on:  push:  branches:  - main  #默认使用 main  pull_request:  jobs:  deploy:  runs-on: ubuntu-20.04  concurrency:  group: ${{ github.workflow }}-${{ github.ref }} #不用改  steps:  - uses: actions/checkout@v3 \twith: \tsubmodules: true # Fetch Hugo themes (true OR recursive) \tfetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo \tuses: peaceiris/actions-hugo@v2 \twith: \thugo-version: \u0026#39;0.97.3\u0026#39; #改成自己所用的 hugo 版本 \textended: true   - name: Build \trun: hugo --minify   - name: Deploy \tuses: peaceiris/actions-gh-pages@v3 \twith: \tdeploy_key: ${{ secrets.DEPLOY_TOKEN }} #注意这个 DEPLOY_TOKEN \texternal_repository: Jousimies/Jousimies.github.io # 改成自己的仓库地址 \tpublish_branch: main #默认使用 main \tpublish_dir: ./public #不用改 github actions deploy key 上面编辑好了 hugo.yml 这个文件，下面要设置 github-actions 这一项。\n首先要生成 ssh key 。\ncd ~ ssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; 以上命令会在 ~ 目录下生成 gh-pages （私钥）和 gh-pages.pub （公钥）两个文件。这两个文件要分别用到上面建的两个 github 仓库中。\n  打开 https://github.com/Jousimies/hugo-source/settings/secrets/actions/new （改成自己的项目仓库地址）贴入 gh-pages 中的内容。\n注意 Name 那一项里必需填 DEPOLY_TOKEN 。其实是上面 hugo.yml 中 ${{ secrets.DEPLOY_TOKEN }} 设置和这里要对应上，否则 github 运行 action 时会报没有 depoly token 的错误。\n  打开 https://github.com/Jousimies/Jousimies.github.io/settings/keys/new （改成自己的主页仓库地址）贴入 gh-pages.pub 中的内容。\n这里的 title 随便填。\n  PUSH 仓库 cd hugo-source git add -A git commit -m \u0026#34;Init push\u0026#34; 当成功 push 仓库后， github 会自动运行 actions ，在 https://github.com/Jousimies/hugo-source/actions （切换成自己的项目仓库地址）中可以查看 workflow 的状况。\n如果显示是个绿色的勾，那么恭喜你成功了。稍后打开 https://jousimies.github.io 就能看到自己的博客内容了。\n","permalink":"https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/","summary":"今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。\nGithub 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。\n  https://github.com/Jousimies/Jousimies.github.io\n对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。\n  https://github.com/Jousimies/hugo-source\n这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。\n  以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。\n管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。\n关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。","title":"使用 Emacs(ox-hugo) + Hugo + Github-pages + Github-actions 管理 blog"},{"content":"这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。\n知识的管理涉及到知识的获取、组织、分享和应用四个方面。\n文献管理与阅读流程   通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。\n  通过阅读文献的参考文献进行文献的挖掘。\n  现在文献一般都有网页版，可以方便的进行相关的探索。\n  通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。\n  zotero需要安装插件，better bibtex for zotero。\n  export libray，需要勾选自动更新题录选项。\n  文献的最终管理通过jabref软件进行。\n  将第2步中导出的题录，import到jabref中的当前库中。\n  alt + f8 整理下entry。\n  这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。\n  打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。\n  决定是否深入进行阅读。\n  文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：\n   分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么    这部分是阅读一篇文献需要解决的问题。\n  架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。\n  以上的内容会被jabref自动识别。\n  文献的记录通过vscode进行，通过编辑latex进行记录，并生成pdf文件。\n  笔记和个人事务的管理   obsidian软件可以方便的进行md文件的写作和管理，取代tiddlywiki进行笔记的管理。\n  tiddlywiki编辑界面不友好。\n  md文件可以通过pandoc方便的导出为pdf文件或docx类型的文档，并且可以指定样式。\n  个人事务通过微软的To Do软件进行。\n  emacs中的org很好很强大，但是对于手机端的使用不够友善。\n  大多数情况下，很难像柳比歇夫一样全部面面俱到的记录。\n  可以通过手机端的tasker进行日程的简单记录，替代emacs中的强大记录功能。\n  ","permalink":"https://jousimies.github.io/posts/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/","summary":"这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。\n知识的管理涉及到知识的获取、组织、分享和应用四个方面。\n文献管理与阅读流程   通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。\n  通过阅读文献的参考文献进行文献的挖掘。\n  现在文献一般都有网页版，可以方便的进行相关的探索。\n  通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。\n  zotero需要安装插件，better bibtex for zotero。\n  export libray，需要勾选自动更新题录选项。\n  文献的最终管理通过jabref软件进行。\n  将第2步中导出的题录，import到jabref中的当前库中。\n  alt + f8 整理下entry。\n  这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。\n  打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。\n  决定是否深入进行阅读。\n  文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：\n   分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么    这部分是阅读一篇文献需要解决的问题。\n  架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。","title":"知识管理"}]