[{"categories":null,"content":"之前在知乎上看到一个问题是：有没有一个All in One的笔记系统?。我在下面的回答中提供了一个方案就是使用 Emacs。 那么现在说说怎么使用 Emacs 进行笔记的管理，如何做到 all-in-one。 在上面的提问中，提问者列出了自己关于all-in-one笔记的系统的几点要求。笔记记的是什么内容呢，初步列举如下： ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:0:0","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#"},{"categories":null,"content":"笔记内容","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:0","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#笔记内容"},{"categories":null,"content":"文本+格式笔记肯定第一位的就是需要记录大量的文本内容。那么文本只能是汉字、英文、字母吗？当然不是，文本也有格式，如对文本进行加粗、斜体、引用、列表等等。文本+格式只要是个笔记软件应该都能提供（window 上的 txt 记事本不行，过于简陋）。 但是文本与格式分离，这不是哪个软件都能做好的。如 word 就很难做到样式和内容的分离，以我的经验，它可以做到但是很难，你需要对word 有充分的了解。Latex 就很容易做到文本与样式的分离，但是它难在非所见即所得。（有什么软件你需要深度使用，但是可以对其不需要了解的吗？没有什么是纯傻瓜式的。） ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:1","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#文本-plus-格式"},{"categories":null,"content":"图表我认为表格只是文本内容呈现的另一种方式，笔记系统中不需要使用过于复杂的表格。 这里要提到 onenote 笔记软件，这个软件我很多次都想利用起来，但是最终都没能。现在想来，它就像一个画板，做笔记像画画，内容超出屏幕范围时，很难对内容有个全局的了解。相对应的是幕布类的大纲式的软件（有了解没用过，不评价）。Onenote软件作的笔记如果想要内容很规整，一个方法就是嵌套使用表格（可以很漂亮，但是不推荐）。 图是笔记系统中一个很重要的组成部分。笔记系统中插入图我想有两种方式，一种是如word ，印象笔记的方式。一种是类似org-mode, markdown这种方式，以链接的方式插入到笔记当中。我选择第二种。 图直接插入到笔记当中的方式，往往是专有格式的软件。这类笔记系统对于软件本体依赖过高，不利于笔记在不同系统中的转移。图直接插入到笔记当中，会导致单个笔记的体积很大，而且很难在不同的笔记中进行复用。相应的使用图片链接的方式就没有上述的问题。 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:2","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#图表"},{"categories":null,"content":"公式公式我只推荐使用 latex ，以文本的方式进行管理。如 Word 上使用 mathtype 进行公式的输入非常差，难以编排，交叉引用。 如果你认为latex 输入公式很慢，不直观，是大概率你没有使用合适的方法。你需要的是快速输入的方法以及公式预览。Latex公式的效果看看这个demo。 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:3","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#公式"},{"categories":null,"content":"文献管理文献管理软件有很多，如zotero，endnote，mendeley，jabref等等。笔记系统中我推荐使用zotero，其他都不做推荐。我更喜欢的方式是直接管理bibtex文件，zotero只是我用来收集bib的工具。 此外，还应关注的是文献文件的格式，大部份应该都是pdf 文件。 如果是caj等格式，那么推荐你使用tampermonkey在知网上下载pdf 格式的，而不是caj格式的（我讨厌caj）。 如果你看的是出版物，网上有很多提供的epub格式。 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:4","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#文献管理"},{"categories":null,"content":"音频和视频这里不过多写，我没这个需求。对此没什么实践。 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:5","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#音频和视频"},{"categories":null,"content":"Emacs 如何实现上述的笔记管理Emacs 中进行笔记写作依赖的是 org-mode，关于 org-mode 的介绍可以见其官方网站，网上也有很人写了介绍。 Figure 1: 笔记界面 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:2:0","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#emacs-如何实现上述的笔记管理"},{"categories":null,"content":"笔记界面Emacs 上想要实现笔记还需要依赖其他的包，好在这些都是开源的，你不需要担心其突然就不能用的问题。 文本记录需要用到 org-mode + org-roam ，org-roam 是链式笔记，对此可以知乎上搜zettelkasten。有人对此有不同的意见。我的意见是，你可以用也可以不用。好处是可以保持笔记的原子化，便于复用。 org-mode 自带表格功能，简单的矩阵式表格使用自带的即可。如果是要实现复杂的表格，那么在org-mode 中插入 Latex 表格即可。 图表的功能，以文件链接的方式插入。好处是org-mode 中可以直接切换是否在当前文档中显示图片。 公式那么直接使用 latex 语法就可以啦，预览可以使用自带的功能，我推荐使用 math-preveiw这个包，输入的话开启cdlatex的功能，那么输入各种公式符号都很方便。 ","date":"2022-07-05","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:2:1","series":null,"tags":["High","effective","system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#笔记界面"},{"categories":null,"content":"今天看到一篇好的介绍算法的文章。此文总结了六种算法思想。此处做些记录，留待以后慢慢补充。 递归算法 递归算法是一种直接或者间接调用自身函数或者方法的算法。 递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。 分治算法 分治，顾名思义就是将一个复杂的问题分成两个或多个相似的子问题，再把子问题分成更小的子问题，直到更小的子问题可以简单求解，原问题的解则为子问题解的合集。 贪心算法 贪心算法总是做出当前的最优选择，即期望通过局部的最优选择获得整体的最优选择。它做出的选择仅是某种意义上的局部最优，但是贪心算法在很多问题上还是可以获得最优解或较优解。 回溯算法 回溯算法是一种搜索法，试探法，它会在每一步做出选择，一旦发现这个选择无法得到期望结果，就回溯回去，重新做出选择。 深度优先搜索利用的就是回溯算法思想。 动态规划 动态规划也是将复杂问题分解成小问题求解的策略，与分治算法不同，动态规划各子问题是相互关联的。动态规划适用于子问题重叠的情况，即不同的子问题具有公共的子子问题。 枚举算法 将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适。 ","date":"2022-07-05","objectID":"/posts/%E7%AE%97%E6%B3%95/:0:0","series":null,"tags":null,"title":"算法","uri":"/posts/%E7%AE%97%E6%B3%95/#"},{"categories":null,"content":"Introduction","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#introduction"},{"categories":null,"content":"Interface Showmagick convert -size 2880x1800 xc:black -fill white -draw \"path 'M 0,100 C 1000,200 800,1600 2880,1700 V 1800 H 2880 V 0 H 0'\" mask.png magick composite dark.png light.png mask.png -alpha Off shot.png rm mask.png ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#interface-show"},{"categories":null,"content":"Why Emacs我是怎么知道 Emacs 的？还不是来自编辑器之战，神之编辑器（Emacs）和编辑器之神（VIM）。最先知道的是 VI，因为这个在 Linux 系统中是标配，装上 Linux 系统后怎么都得用到 VI 进行文件配置。寻着一丝丝的线索，VI -\u003e VIM -\u003e sublime -\u003e Atom -\u003e Emacs -\u003e Code . 在这个长长的编辑器上，最终留在了 Emacs 上。至于为什么停留在 Emacs 上，那是因为 Emacs 的强大啊，对于文本的操作强出其他的软件很大一截。 本人前前后后尝试过多种的软件来参与到自己的个人事务管理当中。在遇到 Emacs 之前，在各系统中最喜欢尝鲜，每当遇到一个新的应用，总是会主动去试用。每当试用一个新的软件时，总是认为它会很有用。但是这么长时间以来，高效的软件在多年的使用中留下来的很少，直到我遇到了 Emacs 。现在是个电子的时代，试用的软件多了，对于软件的隐私性保护持保留的态度。虽然现在是网上无个人隐私可言，但是我还是不想把自己的信息随便给别人。Emacs 是一个本地的软件，所有的数据只在本地，数据永远在自己的手中。此外，Emacs 具有强大的生态，可以进行文件管理，财务管理，事务管理，邮件管理，还可以用来听音乐，看视频。 Figure 1: What Emacs can do Emacs 和 Vim 是大浪淘沙留下来的，也是这个时代最强大的编辑器之一。所以为什么不用 Vim 呢？VIM 是一种文本移动方式，它在 Emacs 中也可以实现， Evil。作为模式编辑，还有其他的方式，目前我使用的是 Meow ，它能最大化的保留 Emacs 己有的按键绑定，而不是完全的改变，相对 Evil ，更轻量一些。 Emacs 的学习曲线很特别。现在看这个图，Emacs 会在那转圈圈的原因是因为Emacs 的功能实在是太多了，你总能在不经意的时间发现新的有用的功能。目前使用 M-x 触发后有 8815 条命令，使用 C-h f 触发后的可执行命令有 32058 条，这其中我使用的命令只有一点点。在那转圈圈那不是很正常吗？哈哈哈。这张图应该改改，改成螺旋式上升就更好了。 Figure 2: Emacs learning curve ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#why-emacs"},{"categories":null,"content":"How I manage my packages我尝试过的 Emacs 配置方式有多种，尝试过的 Emacs 包管理方法有 package.el straight.el git submodule borg.el 。 最开始使的 Emacs 时，将所有的配置文件放到 init.el 文件中。后来学习了别人的配置方法，将配置分解到以 init- 为前缀的多个子文件中。现在我使用 org-mode （见文学编程）组织 Emacs 配置文件。 使用 org-mode 管理自己的配置文件也经历了多个阶段。最开始是直接写在 org 文档中，加载 Emacs 的时候，自动检测该文件的状态，自动解析 org 文档到 el 文件中，这种方式导致 Emacs 启动较慢。后来使用函数在关闭 Emacs 时将 org 文档 tangle 到 el 文件中。现在我使用 org-auto-tangle 这个包，当配置文件发生变动时就自动的 tangle 配置文档。 原来我将 org 文档 tangle 到多个以 init- 为前缀的子文件中，这样的好处是，可以使用 git 对配置进行更精细化的版本管理。但是在尝试了用了几次后，发现，Emacs 的启动速度慢了很多。 关于包的管理，我使用 git submodule 进行。使用 git submodule 进行包的管理，个人具有最大的可控制性。Borg 是对 git submodule 的一个包裹，相对完全使用 git submodule 的方式更方便一些。关于此包的详细的使用方法见 Borg官方手册。 是否需要使用 use-package 类的包？我的回答是不需要。使用 Borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。在配置中不需要使用 require 调用某个包，Borg 的方式不会增超 Emacs 的启动时间，我目前有一百六十多个包，启动时间在 1.6s 0.7s 左右（MacOS M1, Emacs 28.1）。 How to use my configuration我不建议直接使用我的这个配置文件，此文件是我自己用的，不能保证你 clone 后能成功跑起来没有问题。我的建议是看看我的配置内容，择你需要的部份，使用你自己的管理方式进行配置。 若你要尝试使用我的配置，进行下面的操作： git clone --depth=1 git@github.com:Jousimies/.emacs.d.git cd .emacs.d make bootstrap-borg make bootstrap 执行完上面的操作后，要使用 Emacs 打开 README.org 文件，执行一次 org-babel-tangle 生成 init.el 。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#how-i-manage-my-packages"},{"categories":null,"content":"How I manage my packages我尝试过的 Emacs 配置方式有多种，尝试过的 Emacs 包管理方法有 package.el straight.el git submodule borg.el 。 最开始使的 Emacs 时，将所有的配置文件放到 init.el 文件中。后来学习了别人的配置方法，将配置分解到以 init- 为前缀的多个子文件中。现在我使用 org-mode （见文学编程）组织 Emacs 配置文件。 使用 org-mode 管理自己的配置文件也经历了多个阶段。最开始是直接写在 org 文档中，加载 Emacs 的时候，自动检测该文件的状态，自动解析 org 文档到 el 文件中，这种方式导致 Emacs 启动较慢。后来使用函数在关闭 Emacs 时将 org 文档 tangle 到 el 文件中。现在我使用 org-auto-tangle 这个包，当配置文件发生变动时就自动的 tangle 配置文档。 原来我将 org 文档 tangle 到多个以 init- 为前缀的子文件中，这样的好处是，可以使用 git 对配置进行更精细化的版本管理。但是在尝试了用了几次后，发现，Emacs 的启动速度慢了很多。 关于包的管理，我使用 git submodule 进行。使用 git submodule 进行包的管理，个人具有最大的可控制性。Borg 是对 git submodule 的一个包裹，相对完全使用 git submodule 的方式更方便一些。关于此包的详细的使用方法见 Borg官方手册。 是否需要使用 use-package 类的包？我的回答是不需要。使用 Borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。在配置中不需要使用 require 调用某个包，Borg 的方式不会增超 Emacs 的启动时间，我目前有一百六十多个包，启动时间在 1.6s 0.7s 左右（MacOS M1, Emacs 28.1）。 How to use my configuration我不建议直接使用我的这个配置文件，此文件是我自己用的，不能保证你 clone 后能成功跑起来没有问题。我的建议是看看我的配置内容，择你需要的部份，使用你自己的管理方式进行配置。 若你要尝试使用我的配置，进行下面的操作： git clone --depth=1 git@github.com:Jousimies/.emacs.d.git cd .emacs.d make bootstrap-borg make bootstrap 执行完上面的操作后，要使用 Emacs 打开 README.org 文件，执行一次 org-babel-tangle 生成 init.el 。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#how-to-use-my-configuration"},{"categories":null,"content":"About note taking作为一名非程序员，使用 Emacs 就是奔着 org-mode 来的。Emacs 中能进行任务管理，财务管理，笔记管理都是建立在 org-mode 之上的。Org-mode 在这方面的确很强大。 笔记的作用 ：存储信息、帮助思考和理解信息、创造知识之间的链接。大脑的优势在于思考，而不是信息的存储。当下最火的笔记管理方式非 Zettelkasten 默属。关于 Zettelkasten 的概念可以看 How to take smart notes 这本书。 我使用过的笔记软件有很多，在遇到 Emacs 前，尝试过的有 PKM 软件， Mediawiki ， Tiddly wiki ， Onenote ，印象笔记，蚂蚁笔记， Simplenote ， Joplin 等等。Onenote 是私有格式，意味着当我需要夸平台时，其专有格式会给我带来麻烦。印象笔记也是如此，而且印象笔记的付费一言难尽。在这些软件中来回尝试了多次之后，发现没有一个能长久使用的，或多或少的存在痛点。 在了解过 markdown ， org-mode 等概念后，结合以上软件的使用体验，我确立了对于笔记管理的要求：​本地储存，格式可控 。这个要求 markdown 和 org-mode 都可以满足，这两种语言之上都有着相对应的软件实现， obsidian 和 org-roam 。当然除了 org-roam 之外，还有其他的实现，但是我只使用 org-roam 。 Org-mode 相比 markdown ，特性还是要丰富很多， markdown 相对比较简陋。 org-mode 写完之后可以根据需要将其转化为其他的格式，我需要的如 html，docx，latex 。 Org-mode 是 Emacs 上最强大的笔记应用，如果不是为了进行笔记管理，我很大概率是不使用 Emacs 的（难调较，需要大量的时间，众多的特性中迷失自我）。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#about-note-taking"},{"categories":null,"content":"Acknowledgements If I have seen further, it is by standing on the shoulders of giants. —- Sir Isaac Newton 谢谢以下配置的作者，从他们那学到了很多关于 Emacs 的知识。排名不分先后。 https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:1:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#acknowledgements"},{"categories":null,"content":"The Early Init File;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6) ;; In Emacs 27+, package initialization occurs before `user-init-file' is ;; loaded, but after `early-init-file'. Doom handles package initialization, so ;; we must prevent Emacs from doing it early! (setq package-enable-at-startup nil) ;; Do not allow loading from the package cache (same reason). (setq package-quickstart nil) ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (setq inhibit-startup-message t) (setq inhibit-splash-screen t) (push '(menu-bar-lines . 0) default-frame-alist) (push '(tool-bar-lines . 0) default-frame-alist) (push '(vertical-scroll-bars) default-frame-alist) ;; Resizing the Emacs frame can be a terribly expensive part of changing the ;; font. By inhibiting this, we easily halve startup times with fonts that are ;; larger than the system default. (setq frame-inhibit-implied-resize t) (setq inhibit-compacting-font-caches t) (setq use-file-dialog nil) (setq use-dialog-box nil) ;; Make the initial buffer load faster by setting its mode to fundamental-mode ;; (setq initial-major-mode 'fundamental-mode) ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are ;; compiled ahead-of-time when they are installed and site files are compiled ;; when gccemacs is installed. (setq comp-deferred-compilation nil) ;; Disable mode-line, It's uglily after theme changed (setq-default mode-line-format nil) ;;; early-init.el ends here ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:2:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#the-early-init-file"},{"categories":null,"content":"Emacs Foundation Configuration 其安易持，其未兆易谋；其脆易泮，其微易散。为之于未有，治之于未乱。合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。 – 老子 这部分是 Emacs 的最基础配置，包含了文件的管理方式，Emacs 的快速启动，自定义的变量，以及 custom 文件。这些配置是其他配置的基石。 关于 lexical-binding 的作用见 Make Emacs run (slightly) faster with lexical binding . 或者 Lisp 已死，Lisp 万岁！ ;; init.el --- My personal emacs configuration -*- lexical-binding: t; -*- (defvar my/init-start-time (current-time) \"Time when init.el was started\") (defvar my/section-start-time (current-time) \"Time when section was started\") (global-set-key (kbd \"C-c f o I\") (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-foundation-configuration"},{"categories":null,"content":"DEBUG当需要对 Emacs 的配置进行错误检测时打开，但是基本不需要在配置中写这部分。没启动的时候可以使用 --debug-init ，启动后可以手动开启 debug 。正常使用 Emacs 时也会触发一些错误，这时候弹出 error 窗口就很烦。 (toggle-debug-on-error) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#debug"},{"categories":null,"content":"Profile(profiler-start 'cpu) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#profile"},{"categories":null,"content":"Borg - Package manage The Borg assimilate Emacs packages as Git submodules. 一般的流程是使用 epkg-describe-package 查看包的依赖，然后直接使用 borg-assimilate 命令安装包。或者先使用 borg-clone 命令克隆包到本地，然后使用 borg-build 对包进行编译安装。 但是我一般直接使用 borg assimilate 命令安装某个包，之后跟据 *Borg Build* buffer 的提示安装相应依赖包。重复上述的步骤，即可。 如果一个包并不在 melpa 上，就需要到 github 上获取链接。 重新 build 一个包之前可以对 .gitmodules 进行编辑，下面给出示例： [submodule \"magit\"] path = packages/magit url = git@github.com:magit/magit.git no-byte-compile = lisp/magit-libgit.el recursive-byte-compile = true [submodule \"auctex\"] path = packages/auctex url = git@github.com:emacsmirror/auctex.git build-step = ./autogen.sh build-step = ./configure --with-texmf-dir=$HOME/texmf build-step = make build-step = sudo make install [submodule \"corfu\"] path = packages/corfu url = git@github.com:minad/corfu.git load-path = . load-path = ./extensions 简单说明：如果不想 compile 一个包就使用 no-byte-compile 选项。比如，我不使用 helm 插件，有些包提供了关于 helm 的支持，此时我就可以不 compile 对应的文件，那么 Emacs 就不会加载这些配置。对于有些包需要安装的就使用 build-step 进行。对于有些包在子文件夹中的使用 load-path 加载。 Borg 升级包，可以在 magit 界面中进行，按 f m 获取 submodule 的更新，展开 Modules 可以看到 Modules unpulled ，进入相应的包中的 magit 界面，通过按 SPC k 删除 Untracked files ，然后按 m merge 配置。最后使用 borg-build 重新 build 包即可升级相应的包。有时候会提示某个文件有旧的版本，那么就需要进行这个包的文件夹，把 .elc 文件删除然后再重新 build 。 (add-to-list 'load-path (expand-file-name \"packages/borg\" user-emacs-directory)) (eval-and-compile (require 'borg) (borg-initialize)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#borg-package-manage"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive init-file-debug) (let ((old-file-name-handler-alist file-name-handler-alist)) (setq file-name-handler-alist nil) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) FullscreenMacOS 上全屏使用 Emacs 有点问题。如果你要使用 eaf ，就不要全屏使用 Emacs 。说明见此：Andy Stewart 。 (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil))) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 1 nil (lambda () (toggle-frame-fullscreen))) (toggle-frame-fullscreen) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#startup"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive init-file-debug) (let ((old-file-name-handler-alist file-name-handler-alist)) (setq file-name-handler-alist nil) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) FullscreenMacOS 上全屏使用 Emacs 有点问题。如果你要使用 eaf ，就不要全屏使用 Emacs 。说明见此：Andy Stewart 。 (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil))) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 1 nil (lambda () (toggle-frame-fullscreen))) (toggle-frame-fullscreen) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#start-speedup"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive init-file-debug) (let ((old-file-name-handler-alist file-name-handler-alist)) (setq file-name-handler-alist nil) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) FullscreenMacOS 上全屏使用 Emacs 有点问题。如果你要使用 eaf ，就不要全屏使用 Emacs 。说明见此：Andy Stewart 。 (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil))) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 1 nil (lambda () (toggle-frame-fullscreen))) (toggle-frame-fullscreen) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#utility-hooks-and-functions"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive init-file-debug) (let ((old-file-name-handler-alist file-name-handler-alist)) (setq file-name-handler-alist nil) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) FullscreenMacOS 上全屏使用 Emacs 有点问题。如果你要使用 eaf ，就不要全屏使用 Emacs 。说明见此：Andy Stewart 。 (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil))) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 1 nil (lambda () (toggle-frame-fullscreen))) (toggle-frame-fullscreen) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fullscreen"},{"categories":null,"content":"Variables自定义一些变量，方便配置文件位置或针对特定系统进行相关设定。 (defvar my-cloud \"~/Nextcloud\" \"This folder is My cloud.\") (defvar my-galaxy (expand-file-name \"L.Personal.Galaxy\" my-cloud) \"This folder stores all the plain text files of my life.\") (defvar my-roam (expand-file-name \"roam\" my-galaxy) \"This is the org-roam folder.\") (defvar my-finance (expand-file-name \"finance\" my-galaxy) \"This folder stores all my finance files.\") (defvar my-finance-year (expand-file-name (format-time-string \"%Y\") my-finance) \"This folder stores all my finance files of current year.\") (defvar my-pdf-storage (expand-file-name \"storage/pdf\" my-galaxy) \"This folder stores all the pdf files.\") (require 'no-littering) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#variables"},{"categories":null,"content":"Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) (load custom-file t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#custom-file"},{"categories":null,"content":"Private file私有配置分开存放，不进行同步。 (defvar private-file nil \"My private Emacs configuration\") (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#private-file"},{"categories":null,"content":"Homebrewbrew_install() { echo \"\\nInstalling $1\" if brew list $1 \u0026\u003e/dev/null; then echo \"${1}is already installed\" else brew install $1 \u0026\u0026 echo \"$1is installed\" fi } ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#homebrew"},{"categories":null,"content":"BenchmarkEmacs Foundation Configuration 启动时间约 0.19s 。 (message \"Emacs Foundation Configuration: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:3:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs User interface, DELICIOUSEmacs 中视觉相关的配置基本都在这里了，目前我喜欢极简的界面。 (setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-user-interface-delicious"},{"categories":null,"content":"Fonts对于字体的选择有 Iosevka Fixed，Fantasque Sans Mono，Sarasa Mono SC，HarmonyOS Sans SC，Source Han Serif SC。 设置字体的两种方式：一种是通过 set-fontset-font 设置中文字体，另外一种是设置 fixed-pitch 和 variable-pitch 字体，开启 variable-pitch-mode 。 另外结合 modus-themes ，通过设置 modus-themes-mixed-pitch 可以在 org-table org-block 等环境中使用固定宽度的字体。 尝试使用了几天后，发现开启 variable-pitch-mode 之后，光标的宽度变的很细，看起来很不舒服。 brew_install \"homebrew/cask-fonts/font-iosevka\" (set-face-attribute 'default nil :family \"Iosevka Fixed\" :weight 'regular :height 160) (set-face-attribute 'fixed-pitch nil :family \"Iosevka Fixed\" :weight 'regular :height 180) (set-face-attribute 'variable-pitch nil :family \"Source Han Serif SC\" :weight 'regular :height 160) ;; (set-fontset-font t 'unicode (font-spec :family \"all-the-icons\") nil 'prepend) (set-fontset-font t 'unicode \"Apple Color Emoji\" nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"Material Icons\") nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"file-icons\") nil 'prepend) ;; 言总是被替换成 file-icons 中的图标，强制其使用 Source Han Serif SC 这个字体 (set-fontset-font t '(#x8a00 . #x8a00) (font-spec :family \"Source Han Serif SC\")) ;; (set-fontset-font t 'unicode (font-spec :family \"github-octicons\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"FontAwesome\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"Weather Icons\") nil 'prepend) (setq modus-themes-mixed-fonts t) (add-hook 'text-mode-hook 'variable-pitch-mode) (set-face-attribute 'default nil :family \"Iosevka Fixed\" :weight 'regular :height 160) (set-fontset-font t 'han (font-spec :name \"Source Han Serif SC\" :weight 'regular :height 160)) (set-fontset-font t 'cjk-misc (font-spec :name \"Source Han Serif SC\" :weight 'regular :height 160)) ;; (set-fontset-font t 'unicode (font-spec :family \"all-the-icons\") nil 'prepend) (set-fontset-font t 'unicode \"Apple Color Emoji\" nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"Material Icons\") nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"file-icons\") nil 'prepend) ;; 言总是被替换成 file-icons 中的图标，强制其使用 Source Han Serif SC 这个字体 (set-fontset-font t '(#x8a00 . #x8a00) (font-spec :family \"Source Han Serif SC\")) ;; (set-fontset-font t 'unicode (font-spec :family \"github-octicons\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"FontAwesome\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"Weather Icons\") nil 'prepend) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fonts"},{"categories":null,"content":"Icons(require 'all-the-icons) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#icons"},{"categories":null,"content":"modus-themes我的默认主题是 modus-themes ，有黑白配色两套。这个包的自定义性特别高，详细的设置见官方手册。 Modus-themes 的暗色模式实在是太黑了，长时间看很不舒服。椐据 MacOS 的系统颜色，替换了背景色。 (setq modus-themes-italic-constructs t) (setq modus-themes-bold-constructs nil) (setq modus-themes-region '(bg-only no-extend)) (setq modus-themes-lang-checkers '(background text-also straight-underline)) (setq modus-themes-links '(italic background faint neutral-underline)) (setq modus-themes-hl-line '(intense)) (setq modus-themes-paren-match '(accented intense)) (setq modus-themes-prompts '(intense background gray bold)) (setq modus-themes-completions '((matches . (extrabold intense)) (selection . (underline)) (popup . (intense)))) (setq modus-themes-org-blocks 'tinted-background) (setq modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light))) (setq modus-themes-headings '((t . (rainbow)))) Modus-theme 的主题色有些我还是不喜欢，根据自己的喜好更改了一些颜色设置。其中 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#FFFFFF\") (bg-dim . \"#FFFFFF\") (bg-hl-line . \"#FFFFFF\") (bg-active . \"#FFFFFF\") (bg-inactive . \"#FFFFFF\") (bg-tab-bar . \"#FFFFFF\") (bg-tab-active . \"#FFFFFF\") (bg-tab-inactive . \"#FFFFFF\") (blue . \"#252321\") (magenta-nuanced-bg . \"#F2F0EF\"))) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#1F1F1E\") (bg-dim . \"#1F1F1E\") (bg-hl-line . \"#1F1F1E\") (bg-active . \"#1F1F1E\") (bg-inactive . \"#1F1F1E\") (bg-tab-bar . \"#1F1F1E\") (bg-tab-active . \"#1F1F1E\") (bg-tab-inactive . \"#1F1F1E\") (blue . \"#FFFFFF\") (magenta-nuanced-bg . \"#343435\"))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#modus-themes"},{"categories":null,"content":"Theme auto change目前切换到了 MacOS 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#theme-auto-change"},{"categories":null,"content":"tab-bar(setq tab-bar-format '(tab-bar-format-history tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right tab-bar-format-global)) (setq tab-bar-close-button-show nil) (with-eval-after-load 'tab-bar (face-spec-set 'tab-bar-tab '((((background light)) :foreground \"controlAccentColor\" :inherit nil) (t :foreground \"deep sky blue\" :inherit nil)) 'face-override-spec) (face-spec-set 'tab-bar '((((background light)) :inherit modus-themes-tab-backdrop :underline t) (t :inherit modus-themes-tab-backdrop :underline t)) 'face-override-spec)) (add-to-list 'global-mode-string '(:eval mode-line-position)) (add-to-list 'global-mode-string '(:eval mode-line-front-space)) (add-to-list 'global-mode-string '(:eval mode-line-modified)) (add-to-list 'global-mode-string '(:eval mode-line-mule-info)) (tab-bar-mode t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tab-bar"},{"categories":null,"content":"window-divider使用 face-spec-sat 重置 window-divider 的颜色。同样的方式可以重置其他的使用 defface 定义的颜色。 (setq window-divider-default-bottom-width 1) (setq window-divider-default-right-width 1) (setq window-divider-default-places t) (face-spec-set 'window-divider '((((background light)) :foreground \"#000000\") (t :foreground \"#FFFFFF\")) 'face-override-spec) (add-hook 'after-init-hook 'window-divider-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#window-divider"},{"categories":null,"content":"cursor因为我不使用 modeline 当有多个 buffer 的时候会不知道当前处于哪个 buffer 中，所以关闭其他窗口中的光标，这样哪个 buffer 中有光标，哪个 buffer 就处于活动状态。 (blink-cursor-mode -1) (setq-default cursor-in-non-selected-windows nil) 我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。 (add-hook 'text-mode-hook 'cursor-chg-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor"},{"categories":null,"content":"Fringe bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fringe-bitmap"},{"categories":null,"content":"Highlight line(add-hook 'on-first-buffer-hook 'global-hl-line-mode) (add-hook 'eshell-mode-hook (lambda () (setq-local global-hl-line-mode nil))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#highlight-line"},{"categories":null,"content":"info-colors(add-hook 'Info-selection-hook 'info-colors-fontify-node) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#info-colors"},{"categories":null,"content":"rainbow-mode(add-hook 'prog-mode-hook 'rainbow-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rainbow-mode"},{"categories":null,"content":"goggles Goggles highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported. (setq-default goggles-pulse t) (add-hook 'prog-mode-hook 'goggles-mode) (add-hook 'text-mode-hook 'goggles-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#goggles"},{"categories":null,"content":"Emacs window managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 switch-to-buffer(global-set-key (kbd \"C-c w m\") (lambda () (interactive) (switch-to-buffer \"*Messages*\"))) (global-set-key (kbd \"C-c w s\") (lambda () (interactive) (switch-to-buffer \"*scratch*\"))) last-buffer(defun meow-last-buffer (arg) \"Switch to last buffer. Argument ARG if not nil, switching in a new window.\" (interactive \"P\") (cond ((minibufferp) (keyboard-escape-quit)) ((not arg) (mode-line-other-buffer)) (t))) (global-set-key (kbd \"\u003cescape\u003e\") 'meow-last-buffer) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-window-management"},{"categories":null,"content":"Emacs window managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 switch-to-buffer(global-set-key (kbd \"C-c w m\") (lambda () (interactive) (switch-to-buffer \"*Messages*\"))) (global-set-key (kbd \"C-c w s\") (lambda () (interactive) (switch-to-buffer \"*scratch*\"))) last-buffer(defun meow-last-buffer (arg) \"Switch to last buffer. Argument ARG if not nil, switching in a new window.\" (interactive \"P\") (cond ((minibufferp) (keyboard-escape-quit)) ((not arg) (mode-line-other-buffer)) (t))) (global-set-key (kbd \"\") 'meow-last-buffer) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#switch-to-buffer"},{"categories":null,"content":"Emacs window managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 switch-to-buffer(global-set-key (kbd \"C-c w m\") (lambda () (interactive) (switch-to-buffer \"*Messages*\"))) (global-set-key (kbd \"C-c w s\") (lambda () (interactive) (switch-to-buffer \"*scratch*\"))) last-buffer(defun meow-last-buffer (arg) \"Switch to last buffer. Argument ARG if not nil, switching in a new window.\" (interactive \"P\") (cond ((minibufferp) (keyboard-escape-quit)) ((not arg) (mode-line-other-buffer)) (t))) (global-set-key (kbd \"\") 'meow-last-buffer) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#last-buffer"},{"categories":null,"content":"Emacs window managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 switch-to-buffer(global-set-key (kbd \"C-c w m\") (lambda () (interactive) (switch-to-buffer \"*Messages*\"))) (global-set-key (kbd \"C-c w s\") (lambda () (interactive) (switch-to-buffer \"*scratch*\"))) last-buffer(defun meow-last-buffer (arg) \"Switch to last buffer. Argument ARG if not nil, switching in a new window.\" (interactive \"P\") (cond ((minibufferp) (keyboard-escape-quit)) ((not arg) (mode-line-other-buffer)) (t))) (global-set-key (kbd \"\") 'meow-last-buffer) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#quit-and-delete-window"},{"categories":null,"content":"Emacs window managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 switch-to-buffer(global-set-key (kbd \"C-c w m\") (lambda () (interactive) (switch-to-buffer \"*Messages*\"))) (global-set-key (kbd \"C-c w s\") (lambda () (interactive) (switch-to-buffer \"*scratch*\"))) last-buffer(defun meow-last-buffer (arg) \"Switch to last buffer. Argument ARG if not nil, switching in a new window.\" (interactive \"P\") (cond ((minibufferp) (keyboard-escape-quit)) ((not arg) (mode-line-other-buffer)) (t))) (global-set-key (kbd \"\") 'meow-last-buffer) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#scroll-other-window"},{"categories":null,"content":"BenchmarkEmacs User interface 启动时间约 0.05s 。 (message \"Emacs User interface: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Powerful Emacs Equipped with Builtin PackagesEmacs 本身就是一个宝库，有很多的内置功能 ，这些功能的实现简单而强大，名符其实的操作系统。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 (setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#powerful-emacs-equipped-with-builtin-packages"},{"categories":null,"content":"Basic(setq read-process-output-max #x10000) 使用 y 替代 yes，使用 n 替代 no, 可以少输几个字符。Emacs 28.1 内置了 use-short-answers 变量，就很方便了，不再需要使用 advice 的方式设置此功能。 (setq use-short-answers t) 没有人不关这个吧？吵死了。 (setq ring-bell-function 'ignore) (setq-default indent-tabs-mode nil) (setq-default tab-width 4) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#basic"},{"categories":null,"content":"message(setq message-kill-buffer-on-exit t) (setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#message"},{"categories":null,"content":"Send mail(setq send-mail-function 'sendmail-send-it) (setq sendmail-program (executable-find \"msmtp\")) (setq mail-specify-envelope-from t) (setq mail-envelope-from 'header) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#send-mail"},{"categories":null,"content":"help(setq help-window-select t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#help"},{"categories":null,"content":"menu-barbuffer(global-set-key (kbd \"C-c w d\") 'kill-this-buffer) word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#menu-bar"},{"categories":null,"content":"menu-barbuffer(global-set-key (kbd \"C-c w d\") 'kill-this-buffer) word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#buffer"},{"categories":null,"content":"menu-barbuffer(global-set-key (kbd \"C-c w d\") 'kill-this-buffer) word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#word-wrap"},{"categories":null,"content":"time(setq display-time-24hr-format t) (setq display-time-format \"%m/%d %H:%M %a \") (defface my/date-face '((((background light)) :foreground \"darkred\" :bold t) (t :foreground \"deep sky blue\" :bold t)) \"Date face.\" :group 'display-time) (setq display-time-string-forms '((propertize (format-time-string \"%m/%d %H:%M %a\" now) 'face 'my/date-face))) (add-hook 'after-init-hook 'display-time-mode 20) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#time"},{"categories":null,"content":"battery(setq battery-load-critical 15) (setq battery-mode-line-format \" [%b%p%%/%t] \") (add-hook 'after-init-hook 'display-battery-mode 10) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#battery"},{"categories":null,"content":"kill-ringDo not saves duplicates in kill-ring (setq kill-do-not-save-duplicates t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#kill-ring"},{"categories":null,"content":"ibuffer(global-set-key (kbd \"C-x C-b\") 'ibuffer-jump) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ibuffer"},{"categories":null,"content":"osx-trash(when (eq system-type 'darwin) (osx-trash-setup)) (setq delete-by-moving-to-trash t) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#osx-trash"},{"categories":null,"content":"system coding(when (fboundp 'set-charset-priority) (set-charset-priority 'unicode)) (prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#system-coding"},{"categories":null,"content":"authinfoEmacs 中可以使用 .authinfo.gpg 存储密码，需要使用到的有 epa 、 epg 包。在使用 .authinfo.gpg 保存密码之前，应该使用 gpg 生成密钥。这里有个教程写的比较详细。 gpg --gen-key gpg --list-secret-keys 新建 .authinfo.gpg 文件之后，保存该文件，就会提示你进行下一步加密设置。下次打开该文件会提示你输入密码，否则不能查看该文件的内容。使用其他的软件打开这个文件也会显示乱码。 (with-eval-after-load 'epa-file (epa-file-enable) (setq epg-pinentry-mode 'loopback) (auth-source-forget-all-cached)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#authinfo"},{"categories":null,"content":"paren(setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (add-hook 'text-mode-hook 'show-paren-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#paren"},{"categories":null,"content":"elec-pair在 org-mode 中有些人喜欢使用 \u003c 快速插入 src block ，但是 elec-pair 会插入成对的 \u003c\u003e ，所以可以在 org-mode 中禁用这个功能，如何设置参见 rational-emacs 。 我不需要这个功能，因为我还是喜欢使用 C-c C-, 插入相应的块。 (electric-pair-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elec-pair"},{"categories":null,"content":"line number在 prog-mode 中显示行号，当在 org-mode 中，不显示行号。 (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:15","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#line-number"},{"categories":null,"content":"simple(setq mail-user-agent 'mu4e-user-agent) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#simple"},{"categories":null,"content":"autorevert(setq auto-revert-verbose t) (add-hook 'on-first-file-hook 'global-auto-revert-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#autorevert"},{"categories":null,"content":"subwordEnabling it remaps word-based editing commands to subword-based commands that handle symbols with mixed uppercase and lowercase letters。 (add-hook 'on-first-input-hook 'global-subword-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:18","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#subword"},{"categories":null,"content":"windmove(global-set-key (kbd \"C-c w b\") 'windmove-left) (global-set-key (kbd \"C-c w n\") 'windmove-down) (global-set-key (kbd \"C-c w p\") 'windmove-up) (global-set-key (kbd \"C-c w f\") 'windmove-right) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:19","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#windmove"},{"categories":null,"content":"winner(setq winner-dont-bind-my-keys nil) (add-hook 'on-first-buffer-hook 'winner-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:20","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#winner"},{"categories":null,"content":"serverAccording to this blog, use server-process instead of server-ruanning-p 。但是当我新开一个 Emacs 时，会报错，所以还是回到原来的配置上。 (add-hook 'after-init-hook 'server-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:21","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#server"},{"categories":null,"content":"prettify-symbols-mode这个 mode 可以替换一些 fancy 的字体，但是目前没找到好看的字体。 (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:22","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#prettify-symbols-mode"},{"categories":null,"content":"so-longEmacs 的长行检测。在 Emacs 中当编辑长行时，会很卡，开启此模式可以提高性能。 (add-hook 'text-mode-hook 'global-so-long-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:23","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#so-long"},{"categories":null,"content":"delsel插入文本会将所选文本删除，这在其他的很多软件中都有，Emacs 中默认没有，需要手动开启。 (add-hook 'on-first-input-hook 'delete-selection-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:24","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#delsel"},{"categories":null,"content":"repeat重复某个按键，比如在调整窗口大小时。 (setq repeat-on-final-keystroke t) (setq set-mark-command-repeat-pop t) (add-hook 'on-first-input-hook 'repeat-mode) resize-window-repeat-map结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:25","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#repeat"},{"categories":null,"content":"repeat重复某个按键，比如在调整窗口大小时。 (setq repeat-on-final-keystroke t) (setq set-mark-command-repeat-pop t) (add-hook 'on-first-input-hook 'repeat-mode) resize-window-repeat-map结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:25","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#resize-window-repeat-map"},{"categories":null,"content":"minibuffer(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:26","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#minibuffer"},{"categories":null,"content":"ibuffer(setq ibuffer-saved-filter-groups (quote ((\"default\" (\"dired\" (mode . dired-mode)) (\"perl\" (mode . cperl-mode)) (\"erc\" (mode . erc-mode)) (\"org\" (mode . org-mode)) (\"planner\" (or (name . \"^\\\\*Calendar\\\\*$\") (name . \"^diary$\") (mode . muse-mode))) (\"emacs\" (or (name . \"^\\\\*scratch\\\\*$\") (name . \"^\\\\*Messages\\\\*$\"))))))) (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-switch-to-saved-filter-groups \"default\"))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:27","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ibuffer"},{"categories":null,"content":"mouse-avoidanceBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:28","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mouse-avoidance"},{"categories":null,"content":"cursor-intangible(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:29","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor-intangible"},{"categories":null,"content":"large file(setq large-file-warning-threshold nil) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:30","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#large-file"},{"categories":null,"content":"Hippie妙啊，Hippie-expand 的功能是这么的好用，我原来输入路径需要使用 cape-file，现在使用 hippie-expand 就好了。它还有其他的功能，介绍性的说明可以看这。 设置 hippie-expand-try-functions-list ，把 try-expand-list 和 try-expand-line 去掉，他们会在末尾增加括号，有点多余。我己经使用 elec-pair 自动成对插入括号。 (setq hippie-expand-try-functions-list '(try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)) (global-set-key [remap dabbrev-expand] 'hippie-expand) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:31","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#hippie"},{"categories":null,"content":"BenchmarkPowerful Emacs Equipped with Builtin Packages 启动时间约 0.04s 。 (message \"Powerful Emacs Equipped with Builtin Packages: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:5:32","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Awesome Emacs Equipped with Third-party Packages编辑器的基本功能就是增删改查。 (setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-emacs-equipped-with-third-party-packages"},{"categories":null,"content":"helpful(global-set-key [remap describe-function] 'helpful-callable) (global-set-key [remap describe-variable] 'helpful-variable) (global-set-key [remap describe-key] 'helpful-key) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#helpful"},{"categories":null,"content":"gcmhEmacs 中拉圾回收的策略是当Emacs自上一次垃圾收集后分配的内存超过 gc-cons-threshold 阀值时就会触发新一轮的垃圾收集行为。~gcmh~ 包对 Emacs 的拉圾回收进行了设置，当正常使用时，拉圾回收的阈值设置的较高，当 Emacs 空闲时阈值设的较低。 优化Emacs的垃圾搜集行为 一文中提出了通过记录每次垃圾收集的时间来进行判断和调整 gc-cons-threshold 的值。 (setq gcmh-idle-delay 'auto) (setq gcmh-auto-idle-delay-factor 10) (setq gcmh-high-cons-threshold #x1000000) (gcmh-mode 1) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#gcmh"},{"categories":null,"content":"input methodace-pinyin(add-hook 'on-first-input-hook 'ace-pinyin-global-mode) rime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 0)) (setq rime-disable-predicates '(rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background nil) (t :foreground \"#FFFFFF\" :background nil)) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#input-method"},{"categories":null,"content":"input methodace-pinyin(add-hook 'on-first-input-hook 'ace-pinyin-global-mode) rime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 0)) (setq rime-disable-predicates '(rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background nil) (t :foreground \"#FFFFFF\" :background nil)) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ace-pinyin"},{"categories":null,"content":"input methodace-pinyin(add-hook 'on-first-input-hook 'ace-pinyin-global-mode) rime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 0)) (setq rime-disable-predicates '(rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background nil) (t :foreground \"#FFFFFF\" :background nil)) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime"},{"categories":null,"content":"input methodace-pinyin(add-hook 'on-first-input-hook 'ace-pinyin-global-mode) rime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 0)) (setq rime-disable-predicates '(rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background nil) (t :foreground \"#FFFFFF\" :background nil)) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime-regexp"},{"categories":null,"content":"autoinsert(define-auto-insert (cons \"init-.*\\\\.el\" \"Emacs Lisp Skeleton\") '(\"Emacs Configuration Description: \" \";;;; \" (file-name-nondirectory (buffer-file-name)) \" --- \" str (make-string (max 2 (- 80 (current-column) 27)) ?\\s) \"-*- lexical-binding: t; -*-\" '(setq lexical-binding t) \" ;; Copyright (C) \" (format-time-string \"%Y\") \" ;;; Commentary: ;; \" _ \" ;;; Code: (provide '\" (file-name-base (buffer-file-name)) \") ;;; \" (file-name-nondirectory (buffer-file-name)) \" ends here\\n\")) (add-hook 'on-first-input-hook 'auto-insert-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#autoinsert"},{"categories":null,"content":"embrace这个包很方便的对文本进行括号的增删改。 (require 'embrace) (with-eval-after-load 'embrace (set-face-attribute 'embrace-help-pair-face nil :inherit font-lock-function-name-face :inverse-video nil)) (defun embrace-org-mode-hook () (dolist (lst '((?= \"=\" . \"=\") (?~ \"~\" . \"~\") (?/ \"/\" . \"/\") (?* \"*\" . \"*\") (?_ \"_\" . \"_\") (?+ \"+\" . \"+\"))) (embrace-add-pair (car lst) (cadr lst) (cddr lst)))) (add-hook 'org-mode-hook 'embrace-org-mode-hook) (global-set-key (kbd \"C-,\") 'embrace-commander) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embrace"},{"categories":null,"content":"recentf(add-hook 'on-first-input-hook 'recentf-mode) (add-hook 'kill-emacs-hook #'recentf-cleanup) (setq recentf-max-saved-items 1000) (setq recentf-exclude nil) (add-to-list 'recentf-exclude no-littering-var-directory) (add-to-list 'recentf-exclude no-littering-etc-directory) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#recentf"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-mode"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#files"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#diredfl"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#peep-dired"},{"categories":null,"content":"dired-mode目前 Emacs 中进行文件管理的类似 dired 的包有好几个，但是我平常使用的话还是 dired 就足够了，不是重度依赖它。另外我不使用 all-the-icons-dired-mode ，它有图标不齐的问题。 files(setq auto-save-file-name-transforms `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t))) (setq confirm-kill-processes nil) (add-to-list 'revert-without-query \".+\\\\.org\") (add-to-list 'revert-without-query \".+\\\\.tex\") (add-to-list 'revert-without-query \".+\\\\.pdf\") dired(setq dired-recursive-deletes 'always) (setq dired-recursive-copies 'always) (setq global-auto-revert-non-file-buffers t) (setq auto-revert-verbose nil) (setq dired-dwim-target t) (setq delete-by-moving-to-trash t) (setq load-prefer-newer t) (setq auto-revert-use-notify nil) (setq auto-revert-interval 3) (setq insert-directory-program \"gls\" dired-use-ls-dired t) (setq dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) diredfl(add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook (lambda () (dired-hide-dotfiles-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-hide-dotfiles"},{"categories":null,"content":"expand-region(global-set-key (kbd \"C-=\") 'er/expand-region) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#expand-region"},{"categories":null,"content":"hungry delete(setq hungry-delete-chars-to-skip \" \\f\u000b\") (add-hook 'on-first-input-hook 'global-hungry-delete-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#hungry-delete"},{"categories":null,"content":"easy-kill(global-set-key [remap kill-ring-save] 'easy-kill) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#easy-kill"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (setq auto-save-silent t) (setq auto-save-delete-trailing-whitespace t) (add-hook 'on-first-input-hook 'auto-save-enable) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save histToggle saving of minibuffer history. (setq history-length 1000) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)) (setq history-delete-duplicates t) (add-hook 'on-first-input-hook 'savehist-mode) saveplacesaveplace-pdf-view 可以保存 PDF 视图的位置。 (require 'saveplace-pdf-view) (save-place-mode 1) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (setq auto-save-silent t) (setq auto-save-delete-trailing-whitespace t) (add-hook 'on-first-input-hook 'auto-save-enable) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save histToggle saving of minibuffer history. (setq history-length 1000) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)) (setq history-delete-duplicates t) (add-hook 'on-first-input-hook 'savehist-mode) saveplacesaveplace-pdf-view 可以保存 PDF 视图的位置。 (require 'saveplace-pdf-view) (save-place-mode 1) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-save"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (setq auto-save-silent t) (setq auto-save-delete-trailing-whitespace t) (add-hook 'on-first-input-hook 'auto-save-enable) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save histToggle saving of minibuffer history. (setq history-length 1000) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)) (setq history-delete-duplicates t) (add-hook 'on-first-input-hook 'savehist-mode) saveplacesaveplace-pdf-view 可以保存 PDF 视图的位置。 (require 'saveplace-pdf-view) (save-place-mode 1) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-hist"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (setq auto-save-silent t) (setq auto-save-delete-trailing-whitespace t) (add-hook 'on-first-input-hook 'auto-save-enable) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save histToggle saving of minibuffer history. (setq history-length 1000) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring)) (setq history-delete-duplicates t) (add-hook 'on-first-input-hook 'savehist-mode) saveplacesaveplace-pdf-view 可以保存 PDF 视图的位置。 (require 'saveplace-pdf-view) (save-place-mode 1) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#saveplace"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) (global-set-key (kbd \"C-c w v\") 'vundo) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#undo-and-redo"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) (global-set-key (kbd \"C-c w v\") 'vundo) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#undo"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) (global-set-key (kbd \"C-c w v\") 'vundo) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vundo"},{"categories":null,"content":"Keyfreq(setq keyfreq-excluded-commands '(self-insert-command forward-char backward-char previous-line next-line)) (add-hook 'on-first-input-hook 'keyfreq-mode) (add-hook 'on-first-input-hook 'keyfreq-autosave-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#keyfreq"},{"categories":null,"content":"key-chord(add-hook 'after-init-hook 'key-chord-mode) (key-chord-define-global \"yy\" 'consult-yank-pop) (key-chord-define-global \"jj\" 'avy-goto-char) (key-chord-define-global \"uu\" 'vundo) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-chord"},{"categories":null,"content":"Which-key(add-hook 'on-first-input-hook 'which-key-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:15","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#which-key"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#completion-and-search-framework"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vertico"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#marginalia"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#orderless"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#corfu"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#corfu-doc"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#kind-icon"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult-dir"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embark"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ctrlf"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#engine-mode"},{"categories":null,"content":"Completion and search frameworkvertico(setq vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(add-hook 'minibuffer-setup-hook 'marginalia-mode) orderless(setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t) (setq corfu-cycle t) (setq corfu-quit-at-boundary t) (setq corfu-auto-prefix 2) (setq corfu-preselect-first t) (setq corfu-quit-no-match t) (setq completion-cycle-threshold 3) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) corfu-doc(add-hook 'corfu-mode-hook #'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"M-p\") #'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") #'corfu-doc-scroll-up)) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"M-y\") 'consult-yank-pop) (global-set-key (kbd \"C-c f r\") 'consult-recent-file) (global-set-key (kbd \"C-c o o\") 'consult-outline) consult-dir(global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) (setq prefix-help-command #'embark-prefix-help-command) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) engine-mode(with-eval-after-load 'engine-mode (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine github \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" :keybinding \"b\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\")) (add-hook 'on-first-input-hook 'engine-mode) cape(add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cape"},{"categories":null,"content":"tempel(setq tempel-path \"~/.emacs.d/template/tempel\") (global-set-key (kbd \"M-+\") 'tempel-complete) (global-set-key (kbd \"M-*\") 'tempel-insert) (with-eval-after-load 'tempel (define-key tempel-map (kbd \"M-[\") 'tempel-previous) (define-key tempel-map (kbd \"M-]\") 'tempel-next)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tempel"},{"categories":null,"content":"imenu-listImenu-list 可以充当导航栏，对于我经常使用 org-mode 来说，很方便。此处添加了自动开关 imenu-list 的功能，对于有时候 org 文档中具有表格，而宽度不够时自动关闭它。 这个有个问题就是当 imenu-list 打开后，打开 help 窗口不能自动跳转了。 (setq imenu-list-position 'left) (setq imenu-list-size 0.2) (defvar my/imenu-list-enabled t) (defun my/imenu-list-on-off () (interactive) (if my/imenu-list-enabled (progn (setq my/imenu-list-enabled nil) (imenu-list-minor-mode -1)) (progn (setq my/imenu-list-enabled t) (imenu-list-minor-mode 1)))) (defun my/imenu-list-noselect (_) (when (not (minibufferp)) (if (and my/imenu-list-enabled (string-equal major-mode \"org-mode\") (not org-roam-capture--node) (not org-agenda-buffer) (org-roam-buffer-p) (not osx-dictionary-mode) (not org-capture-mode)) (progn (imenu-list-minor-mode 1) (imenu-list-update) (imenu-list-show-noselect)) (imenu-list-minor-mode -1)))) (add-hook 'window-buffer-change-functions #'my/imenu-list-noselect) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:18","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#imenu-list"},{"categories":null,"content":"Open with Safari有些时候需要使用外部应用打开相应的文件，比如打印文件的时候。目前还没有发现直接使用 Emacs 打印文件的方法。 看 pdf print 。 这里是使用 safari 打开相应的文件，如需要使用其他的应用，可以参照博客。 (defun xah-html-open-in-safari () \"Open the current file or `dired'marked files in Mac's Safari browser. If the file is not saved, save it first. URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'Version 2018-02-26\" (interactive) (let* ( ($file-list (if (string-equal major-mode \"dired-mode\") (dired-get-marked-files) (list (buffer-file-name)))) ($do-it-p (if (\u003c= (length $file-list) 5) t (y-or-n-p \"Open more than 5 files? \")))) (when $do-it-p (cond ((string-equal system-type \"darwin\") (mapc (lambda ($fpath) (when (buffer-modified-p ) (save-buffer)) (shell-command (format \"open -a Safari.app \\\"%s\\\"\" $fpath))) $file-list)))))) (global-set-key (kbd \"C-c f s\") 'xah-html-open-in-safari) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:19","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#open-with-safari"},{"categories":null,"content":"Open in desktop在文件管理器中打开对应的文件。 (defun xah-show-in-desktop () \"Show current file in desktop. (Mac Finder, File Explorer, Linux file manager) This command can be called when in a file buffer or in `dired'. URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'Version 2020-11-20 2021-01-18\" (interactive) (let (($path (if (buffer-file-name) (buffer-file-name) default-directory))) (cond ((string-equal system-type \"windows-nt\") (shell-command (format \"PowerShell -Command Start-Process Explorer -FilePath %s\" (shell-quote-argument default-directory))) ;; todo. need to make window highlight the file ) ((string-equal system-type \"darwin\") (if (eq major-mode 'dired-mode) (let (($files (dired-get-marked-files ))) (if (eq (length $files) 0) (shell-command (concat \"open \" (shell-quote-argument (expand-file-name default-directory )))) (shell-command (concat \"open -R \" (shell-quote-argument (car (dired-get-marked-files ))))))) (shell-command (concat \"open -R \" (shell-quote-argument $path))))) ((string-equal system-type \"gnu/linux\") (let ( (process-connection-type nil) (openFileProgram (if (file-exists-p \"/usr/bin/gvfs-open\") \"/usr/bin/gvfs-open\" \"/usr/bin/xdg-open\"))) (start-process \"\" nil openFileProgram (shell-quote-argument $path))) ;; (shell-command \"xdg-open .\") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus )))) (with-eval-after-load 'dired (define-key dired-mode-map \",\" #'xah-show-in-desktop)) (global-set-key (kbd \"C-c f d\") 'xah-show-in-desktop) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:20","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#open-in-desktop"},{"categories":null,"content":"yequake(setq yequake-frames '((\"org-capture\" . ((width . 0.75) (height . 0.75) (alpha . 0.95) (buffer-fns . (yequake-org-capture)) (frame-parameters . ((undecorated . t))))))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:21","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#yequake"},{"categories":null,"content":"BenchmarkAwesome Emacs Equipped with Third-party Packages 启动时间约 0.06s 。 (message \"Awesome Emacs Equipped with Third-party Packages: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:6:22","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs Works with Multiple Language, PIECE OF CAKE(setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-works-with-multiple-language-piece-of-cake"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) wucuo Fastest solution to spell check camel case code or plain text. (add-hook 'on-first-buffer-hook 'wucuo-mode) (add-hook 'prog-mode-hook #'wucuo-start) (add-hook 'text-mode-hook #'wucuo-start) flyspell(with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) flyspell-correct(defun frog-menu-flyspell-correct (candidates word) \"Run `frog-menu-read'for the given CANDIDATES. List of CANDIDATES is given by flyspell for the WORD. Return selected word to use as a replacement or a tuple of (command . word) to be used by `flyspell-do-correct'.\" (let* ((corrects (if flyspell-sort-corrections (sort candidates 'string\u003c) candidates)) (actions `((\"C-s\" \"Save word\" (save . ,word)) (\"C-a\" \"Accept (session)\" (session . ,word)) (\"C-b\" \"Accept (buffer)\" (buffer . ,word)) (\"C-c\" \"Skip\" (skip . ,word)))) (prompt (format \"Dictionary: [%s]\" (or ispell-local-dictionary ispell-dictionary \"default\"))) (res (frog-menu-read prompt corrects actions))) (unless res (error \"Quit\")) res)) (global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'frog-menu-flyspell-correct) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-spelling"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) wucuo Fastest solution to spell check camel case code or plain text. (add-hook 'on-first-buffer-hook 'wucuo-mode) (add-hook 'prog-mode-hook #'wucuo-start) (add-hook 'text-mode-hook #'wucuo-start) flyspell(with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) flyspell-correct(defun frog-menu-flyspell-correct (candidates word) \"Run `frog-menu-read'for the given CANDIDATES. List of CANDIDATES is given by flyspell for the WORD. Return selected word to use as a replacement or a tuple of (command . word) to be used by `flyspell-do-correct'.\" (let* ((corrects (if flyspell-sort-corrections (sort candidates 'string","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ispell"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) wucuo Fastest solution to spell check camel case code or plain text. (add-hook 'on-first-buffer-hook 'wucuo-mode) (add-hook 'prog-mode-hook #'wucuo-start) (add-hook 'text-mode-hook #'wucuo-start) flyspell(with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) flyspell-correct(defun frog-menu-flyspell-correct (candidates word) \"Run `frog-menu-read'for the given CANDIDATES. List of CANDIDATES is given by flyspell for the WORD. Return selected word to use as a replacement or a tuple of (command . word) to be used by `flyspell-do-correct'.\" (let* ((corrects (if flyspell-sort-corrections (sort candidates 'string","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#wucuo"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) wucuo Fastest solution to spell check camel case code or plain text. (add-hook 'on-first-buffer-hook 'wucuo-mode) (add-hook 'prog-mode-hook #'wucuo-start) (add-hook 'text-mode-hook #'wucuo-start) flyspell(with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) flyspell-correct(defun frog-menu-flyspell-correct (candidates word) \"Run `frog-menu-read'for the given CANDIDATES. List of CANDIDATES is given by flyspell for the WORD. Return selected word to use as a replacement or a tuple of (command . word) to be used by `flyspell-do-correct'.\" (let* ((corrects (if flyspell-sort-corrections (sort candidates 'string","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) wucuo Fastest solution to spell check camel case code or plain text. (add-hook 'on-first-buffer-hook 'wucuo-mode) (add-hook 'prog-mode-hook #'wucuo-start) (add-hook 'text-mode-hook #'wucuo-start) flyspell(with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) flyspell-correct(defun frog-menu-flyspell-correct (candidates word) \"Run `frog-menu-read'for the given CANDIDATES. List of CANDIDATES is given by flyspell for the WORD. Return selected word to use as a replacement or a tuple of (command . word) to be used by `flyspell-do-correct'.\" (let* ((corrects (if flyspell-sort-corrections (sort candidates 'string","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell-correct"},{"categories":null,"content":"Language TranslatePowerthesaurus有 autoload ，此处不需要做配置，只需要在设置相应的按键绑定。 (global-set-key (kbd \"C-c l t\") 'powerthesaurus-lookup-dwim) Smog还没搞懂这个软件怎么用，这里是一些资料。 https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") (global-set-key (kbd \"C-c l s\") 'smog-check) osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (with-eval-after-load 'org-roam (advice-add 'osx-dictionary-search-pointer :before 'org-roam-buffer-toggle)) (global-set-key (kbd \"C-c l d\") 'osx-dictionary-search-pointer) (global-set-key (kbd \"C-c l D\") 'osx-dictionary-search-input) go-translate(with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (global-set-key (kbd \"C-c l t\") 'gts-do-translate) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-translate"},{"categories":null,"content":"Language TranslatePowerthesaurus有 autoload ，此处不需要做配置，只需要在设置相应的按键绑定。 (global-set-key (kbd \"C-c l t\") 'powerthesaurus-lookup-dwim) Smog还没搞懂这个软件怎么用，这里是一些资料。 https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") (global-set-key (kbd \"C-c l s\") 'smog-check) osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (with-eval-after-load 'org-roam (advice-add 'osx-dictionary-search-pointer :before 'org-roam-buffer-toggle)) (global-set-key (kbd \"C-c l d\") 'osx-dictionary-search-pointer) (global-set-key (kbd \"C-c l D\") 'osx-dictionary-search-input) go-translate(with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (global-set-key (kbd \"C-c l t\") 'gts-do-translate) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#powerthesaurus"},{"categories":null,"content":"Language TranslatePowerthesaurus有 autoload ，此处不需要做配置，只需要在设置相应的按键绑定。 (global-set-key (kbd \"C-c l t\") 'powerthesaurus-lookup-dwim) Smog还没搞懂这个软件怎么用，这里是一些资料。 https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") (global-set-key (kbd \"C-c l s\") 'smog-check) osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (with-eval-after-load 'org-roam (advice-add 'osx-dictionary-search-pointer :before 'org-roam-buffer-toggle)) (global-set-key (kbd \"C-c l d\") 'osx-dictionary-search-pointer) (global-set-key (kbd \"C-c l D\") 'osx-dictionary-search-input) go-translate(with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (global-set-key (kbd \"C-c l t\") 'gts-do-translate) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#smog"},{"categories":null,"content":"Language TranslatePowerthesaurus有 autoload ，此处不需要做配置，只需要在设置相应的按键绑定。 (global-set-key (kbd \"C-c l t\") 'powerthesaurus-lookup-dwim) Smog还没搞懂这个软件怎么用，这里是一些资料。 https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") (global-set-key (kbd \"C-c l s\") 'smog-check) osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (with-eval-after-load 'org-roam (advice-add 'osx-dictionary-search-pointer :before 'org-roam-buffer-toggle)) (global-set-key (kbd \"C-c l d\") 'osx-dictionary-search-pointer) (global-set-key (kbd \"C-c l D\") 'osx-dictionary-search-input) go-translate(with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (global-set-key (kbd \"C-c l t\") 'gts-do-translate) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#osx-dictionary"},{"categories":null,"content":"Language TranslatePowerthesaurus有 autoload ，此处不需要做配置，只需要在设置相应的按键绑定。 (global-set-key (kbd \"C-c l t\") 'powerthesaurus-lookup-dwim) Smog还没搞懂这个软件怎么用，这里是一些资料。 https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") (global-set-key (kbd \"C-c l s\") 'smog-check) osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (with-eval-after-load 'org-roam (advice-add 'osx-dictionary-search-pointer :before 'org-roam-buffer-toggle)) (global-set-key (kbd \"C-c l d\") 'osx-dictionary-search-pointer) (global-set-key (kbd \"C-c l D\") 'osx-dictionary-search-input) go-translate(with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (global-set-key (kbd \"C-c l t\") 'gts-do-translate) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#go-translate"},{"categories":null,"content":"Writegood具体看此Flesch–Kincaid，关于英语可读性的测试。分数越高，可读性越强；分数越低，就越困难。 (global-set-key (kbd \"C-c l w\") 'writegood-mode) (global-set-key (kbd \"C-c l g\") 'writegood-grade-level) (global-set-key (kbd \"C-c l e\") 'writegood-reading-ease) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#writegood"},{"categories":null,"content":"Flymake(add-hook 'prog-mode-hook 'flymake-mode) (add-hook 'flymake-mode-hook 'flymake-popon-mode) python flymake(add-hook 'python-mode-hook 'flymake-mode) (add-hook 'flymake-mode-hook 'flymake-popon-mode) (add-hook 'python-mode-hook 'flymake-python-pyflakes-load) (setq flymake-python-pyflakes-executable \"flake8\") (setq flymake-python-pyflakes-extra-arguments '(\"--ignore=W806\")) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flymake"},{"categories":null,"content":"Flymake(add-hook 'prog-mode-hook 'flymake-mode) (add-hook 'flymake-mode-hook 'flymake-popon-mode) python flymake(add-hook 'python-mode-hook 'flymake-mode) (add-hook 'flymake-mode-hook 'flymake-popon-mode) (add-hook 'python-mode-hook 'flymake-python-pyflakes-load) (setq flymake-python-pyflakes-executable \"flake8\") (setq flymake-python-pyflakes-extra-arguments '(\"--ignore=W806\")) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#python-flymake"},{"categories":null,"content":"Language Service Protocoleldoc在 echo 中显示有关函数或变量的信息。 (add-hook 'on-first-buffer-hook 'eldoc-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-service-protocol"},{"categories":null,"content":"Language Service Protocoleldoc在 echo 中显示有关函数或变量的信息。 (add-hook 'on-first-buffer-hook 'eldoc-mode) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eldoc"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) rust(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#multiple-programming-language"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) rust(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#markdown"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) rust(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rust"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) rust(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#csv"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) rust(add-to-list 'auto-mode-alist '(\"\\\\.rs\\\\'\" . rust-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#yaml"},{"categories":null,"content":"BenchmarkEmacs Works with Multiple Language 启动时间约 0.04s 。 (message \"Emacs Works with Multiple Language: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:7:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Organize Life With Plain Text, HIGH EFFECTIVE SYSTEM使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 (setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#organize-life-with-plain-text-high-effective-system"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#better-default"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-todo"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-faces"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-emphasis-color"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-babel"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-capture"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-attach"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-refile"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-frame"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-archive"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-habit"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-src"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-id"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-clock"},{"categories":null,"content":"Better Default(setq org-modules '()) (setq org-deadline-warning-days 7) (setq org-imenu-depth 4) (setq org-return-follows-link t) (setq org-agenda-dim-blocked-tasks t) (setq org-image-actual-width nil) (setq org-display-remote-inline-images 'download) (setq org-log-into-drawer t) (setq org-fast-tag-selection-single-key 'expert) (setq org-adapt-indentation nil) (setq org-fontify-quote-and-verse-blocks t) (setq org-support-shift-select t) (setq org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-hide-leading-stars nil) (setq org-startup-with-inline-images t) (global-set-key (kbd \"C-c f o i\") (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) (global-set-key (kbd \"C-c o l\") 'org-cliplink) (global-set-key (kbd \"C-c o i\") 'org-toggle-inline-images) (global-set-key (kbd \"C-c o I\") 'org-redisplay-inline-images) (global-set-key (kbd \"C-c o p i\") 'org-id-get-create) (global-set-key (kbd \"C-c o b\") 'org-switchb) org todoIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org faces(setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (setq org-babel-python-command \"python3\") ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default or","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-num"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#packages-enhance-org"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-tangle"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#toc-org"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-superstar"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-download"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-appear"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-cliplink"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org(add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-downloadbrew_install \"pngpaste\" (setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) (global-set-key (kbd \"C-c o d c\") 'org-download-clipboard) (global-set-key (kbd \"C-c o d i\") 'org-download-image) (global-set-key (kbd \"C-c o d r\") 'org-download-rename-at-point) (global-set-key (kbd \"C-c o d s\") 'org-download-screenshot) org-appear(setq org-appear-trigger 'on-change) (setq org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 org-present(add-hook 'org-present-mode-hook (lambda () (org-present-big) (org-display-inline-images) (org-present-hide-cursor) (org-present-read-only) (global-tab-line-mode 0))) (add-hook 'org-present-mode-quit-hook (lambda () (org-present-small) (org-remove-inline-images) (org-present-show-cursor) (org-present-read-write) (global-tab-line-mode 1))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-present"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\u003cf7\u003e\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \u003e \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \u003e \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/\u003c%Y-%m\u003e.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-note"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#keybindings"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-node"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-capture-template"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-settings"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#search-org-roam-node-with-rg"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-buffer"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#quick-open-org-roam-ref-link"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-ui"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-transclusion"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-preview-latex-formula"},{"categories":null,"content":"Org-roam, NOTEkeybindings(global-set-key (kbd \"C-c r f\") 'org-roam-node-find) (global-set-key (kbd \"\") 'org-roam-node-find) (global-set-key (kbd \"C-c r i\") 'org-roam-node-insert) (global-set-key (kbd \"C-c r e\") 'org-roam-extract-subtree) (global-set-key (kbd \"C-c r r f\") 'org-roam-ref-find) (global-set-key (kbd \"C-c r r a\") 'org-roam-ref-add) (global-set-key (kbd \"C-c r r r\") 'org-roam-ref-remove) (global-set-key (kbd \"C-c r r o\") 'gpc/open-node-roam-ref-url) (global-set-key (kbd \"C-c r a a\") 'org-roam-alias-add) (global-set-key (kbd \"C-c r a r\") 'org-roam-alias-remove) (global-set-key (kbd \"C-c r t a\") 'org-roam-tag-add) (global-set-key (kbd \"C-c r t r\") 'org-roam-tag-remove) (global-set-key (kbd \"C-c r b\") 'my/org-roam-buffer-turn-on-off) (global-set-key (kbd \"C-c r s\") 'bms/org-roam-rg-search) (global-set-key (kbd \"C-c r d t\") 'org-roam-dailies-goto-today) (global-set-key (kbd \"C-c r d y\") 'org-roam-dailies-goto-yesterday) (global-set-key (kbd \"C-c r d j\") 'org-roam-dailies-goto-date) org-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/te","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#morning-diary"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\u003cf2\u003e\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex-manage"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex-completion"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ebib"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#import-bib-to-ebib-from-zotero"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#oc-csl"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#citar"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult-bibtex"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我这里会出现图标对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-index-mode-line nil) (setq ebib-entry-mode-line nil) (setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl(defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq c","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-bibtex"},{"categories":null,"content":"Tasks management, GTDGTD就是Getting Things Done的缩写，意思是“把需要做的事情处理好”，是一个管理时间的方法。Org-mode 用于实践 GTD 是一个非常很好用的任务管理系统。目前我将笔记系统和任务管理系统结合在一起使用。 org-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) (global-set-key (kbd \"C-c a\") 'my/org-agenda) 下面的配置见这（Link）。Systemcraft 也给了一些配置，可以参考（Link），我原来使用，现在去掉了。 Functions borrowed from vulpea library 。 (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using `combine-and-quote-strings'. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t. If the property is already set, replace its value.\" (vulpea-buffer-prop-set name (combine-and-quote-strings values separators))) (defun vulpea-buffer-prop-get (name) \"Get a buffer property called NAME as a string.\" (org-with-point-at 1 (when (re-search-forward (concat \"^#\\\\+\" name \": \\\\(.*\\\\)\") (point-max) t) (buffer-substring-no-properties (match-beginning 1) (match-end 1))))) (defun vulpea-buffer-prop-get-list (name \u0026optional separators) \"Get a buffer property NAME as a list using SEPARATORS. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t.\" (let ((value (vulpea-buffer-prop-get name))) (when (and value (not (string-empty-p value))) (split-string-and-unquote value separators)))) (defun vulpea-buffer-prop-remove (name) \"Remove a buffer property called NAME.\" (org-with-point-at 1 (when (re-search-forward (concat \"\\\\(^#\\\\+\" name \":.*\\n?\\\\)\") (point-max) t) (replace-match \"\")))) Dynamic agenda。如果需要给合使用 org-roam 和固定的 org 文件可以使用下面的配置，改写 vulpea-agenda-files-update 。 (defun vulpea-agenda-files-update (\u0026rest _) \"Update the value of `org-agenda-files'.\" (setq org-agenda-files (seq-uniq (append (vulpea-project-fil","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tasks-management-gtd"},{"categories":null,"content":"Tasks management, GTDGTD就是Getting Things Done的缩写，意思是“把需要做的事情处理好”，是一个管理时间的方法。Org-mode 用于实践 GTD 是一个非常很好用的任务管理系统。目前我将笔记系统和任务管理系统结合在一起使用。 org-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) (global-set-key (kbd \"C-c a\") 'my/org-agenda) 下面的配置见这（Link）。Systemcraft 也给了一些配置，可以参考（Link），我原来使用，现在去掉了。 Functions borrowed from vulpea library 。 (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using `combine-and-quote-strings'. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t. If the property is already set, replace its value.\" (vulpea-buffer-prop-set name (combine-and-quote-strings values separators))) (defun vulpea-buffer-prop-get (name) \"Get a buffer property called NAME as a string.\" (org-with-point-at 1 (when (re-search-forward (concat \"^#\\\\+\" name \": \\\\(.*\\\\)\") (point-max) t) (buffer-substring-no-properties (match-beginning 1) (match-end 1))))) (defun vulpea-buffer-prop-get-list (name \u0026optional separators) \"Get a buffer property NAME as a list using SEPARATORS. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t.\" (let ((value (vulpea-buffer-prop-get name))) (when (and value (not (string-empty-p value))) (split-string-and-unquote value separators)))) (defun vulpea-buffer-prop-remove (name) \"Remove a buffer property called NAME.\" (org-with-point-at 1 (when (re-search-forward (concat \"\\\\(^#\\\\+\" name \":.*\\n?\\\\)\") (point-max) t) (replace-match \"\")))) Dynamic agenda。如果需要给合使用 org-roam 和固定的 org 文件可以使用下面的配置，改写 vulpea-agenda-files-update 。 (defun vulpea-agenda-files-update (\u0026rest _) \"Update the value of `org-agenda-files'.\" (setq org-agenda-files (seq-uniq (append (vulpea-project-fil","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-agenda"},{"categories":null,"content":"Tasks management, GTDGTD就是Getting Things Done的缩写，意思是“把需要做的事情处理好”，是一个管理时间的方法。Org-mode 用于实践 GTD 是一个非常很好用的任务管理系统。目前我将笔记系统和任务管理系统结合在一起使用。 org-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) (global-set-key (kbd \"C-c a\") 'my/org-agenda) 下面的配置见这（Link）。Systemcraft 也给了一些配置，可以参考（Link），我原来使用，现在去掉了。 Functions borrowed from vulpea library 。 (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using `combine-and-quote-strings'. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t. If the property is already set, replace its value.\" (vulpea-buffer-prop-set name (combine-and-quote-strings values separators))) (defun vulpea-buffer-prop-get (name) \"Get a buffer property called NAME as a string.\" (org-with-point-at 1 (when (re-search-forward (concat \"^#\\\\+\" name \": \\\\(.*\\\\)\") (point-max) t) (buffer-substring-no-properties (match-beginning 1) (match-end 1))))) (defun vulpea-buffer-prop-get-list (name \u0026optional separators) \"Get a buffer property NAME as a list using SEPARATORS. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators', normally \\\"[ \\f\\t\\n\\r\\v]+\\\", and OMIT-NULLS is forced to t.\" (let ((value (vulpea-buffer-prop-get name))) (when (and value (not (string-empty-p value))) (split-string-and-unquote value separators)))) (defun vulpea-buffer-prop-remove (name) \"Remove a buffer property called NAME.\" (org-with-point-at 1 (when (re-search-forward (concat \"\\\\(^#\\\\+\" name \":.*\\n?\\\\)\") (point-max) t) (replace-match \"\")))) Dynamic agenda。如果需要给合使用 org-roam 和固定的 org 文件可以使用下面的配置，改写 vulpea-agenda-files-update 。 (defun vulpea-agenda-files-update (\u0026rest _) \"Update the value of `org-agenda-files'.\" (setq org-agenda-files (seq-uniq (append (vulpea-project-fil","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-super-agenda"},{"categories":null,"content":"Finance manage我使用 beancount 进行财务管理，其他可用的还有 ledger 的。 Beancount 可以结合 fava 使用。 (setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#finance-manage"},{"categories":null,"content":"Org Exportox(setq org-export-dispatch-use-expert-ui t) ox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" \"~/.emacs.d/template\"))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-export"},{"categories":null,"content":"Org Exportox(setq org-export-dispatch-use-expert-ui t) ox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" \"~/.emacs.d/template\"))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox"},{"categories":null,"content":"Org Exportox(setq org-export-dispatch-use-expert-ui t) ox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" \"~/.emacs.d/template\"))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-hugo"},{"categories":null,"content":"Org Exportox(setq org-export-dispatch-use-expert-ui t) ox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" \"~/.emacs.d/template\"))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#export-org-to-docx-with-pandoc"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#latex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#defaults"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-latex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-beamer"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auctex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cdlatex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) ;; (setq org-latex-with-hyperref nil) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article-cn\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass[11pt]{article} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"beamer\" \"\\\\documentclass[presentation]{beamer} [DEFAULT-PACKAGES] [PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) ox-beamer(add-hook 'org-mode-hook (lambda () (require 'ox-beamer))) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math-preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 The full list of macros and environments with their packages is available here. 把相应的环境加入到 math-preveiw-tex-default-packages 即可。 npm install -g git+https://gitlab.com/matsievskiysv/math-preview (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (global-set-key (kbd \"C-c p m\") 'math-preview-all) (global-set-key (kbd \"C-c p M\") 'math-preview-clear-all) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#math-preview"},{"categories":null,"content":"BenchmarkOrganize Life With Plain Text 启动时间约 0.13s 。 (message \"Organize Life With Plain Text: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:8:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs Can DO More, Applications(setq my/section-start-time (current-time)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-can-do-more-applications"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\u003cRET\u003e\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003creturn\u003e\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003cS-return\u003e\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \u003e\" item) (princ (concat (replace-regexp-in-string \" \u003e\" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-reader"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-tools"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-view"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-outline"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-annot"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-cache"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-print"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) pdf-view(setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil) (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map (kbd \"G\") 'pdf-view-goto-page) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) pdf-outline(with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf-annot(with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) Create pdf annotations file. 基于 consult-bibtex 这个包实现的。 (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) (global-set-key (kbd \"C-c b n\") 'my/edit-notes) Extract pdf annotations with pdfannots. 这边的实现还有些问题，回头重新优化下。 (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) (global-set-key (kbd \"C-c b x\") 'my/extract-pdf-annots-to-ref-note) pdf-cache(with-eval-after-load 'pdf-cache (define-pdf-cache-function pagelabels)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf password需要安装 qpdf ，如果使用 Homebrew，可以使用 brew install qpdf – Emacs: Password-protect current pdf (defun pdf-password-protect () \"Password protect current pdf in buffer or `dired'file.\" (interactive) (unless (executable-find \"qpdf\") (user-error \"qpdf not installed\")) (unless (equal \"pdf\" (or (when (buffer-file-name) (downcase (file-name-extension (buffer-file-name)))) (when (dired-get-filename nil t) (downcase (file-name-extension (dired-get-filename nil t)))))) (user-error \"no pdf to act on\")) (let* ((user-password","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-password"},{"categories":null,"content":"GITMagitMagit related configuration (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) (with-eval-after-load \"magit-submodule\" (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) git-timemachine有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 git-timemachine 即可。 Browse at remote有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 browser-at-remote 即可。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git"},{"categories":null,"content":"GITMagitMagit related configuration (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) (with-eval-after-load \"magit-submodule\" (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) git-timemachine有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 git-timemachine 即可。 Browse at remote有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 browser-at-remote 即可。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#magit"},{"categories":null,"content":"GITMagitMagit related configuration (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) (with-eval-after-load \"magit-submodule\" (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) git-timemachine有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 git-timemachine 即可。 Browse at remote有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 browser-at-remote 即可。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git-timemachine"},{"categories":null,"content":"GITMagitMagit related configuration (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) (with-eval-after-load \"magit-submodule\" (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) git-timemachine有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 git-timemachine 即可。 Browse at remote有 autoload ，这里不需要配置。使用的时候通过 M-x 调用 browser-at-remote 即可。 ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#browse-at-remote"},{"categories":null,"content":"eshell(global-set-key (kbd \"C-`\") 'eshell) eshell buffer(add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eshell"},{"categories":null,"content":"eshell(global-set-key (kbd \"C-`\") 'eshell) eshell buffer(add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eshell-buffer"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-summary(setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) (global-set-key (kbd \"C-c w r\") 'elfeed-summary) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rss-management"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-summary(setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) (global-set-key (kbd \"C-c w r\") 'elfeed-summary) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-summary(setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) (global-set-key (kbd \"C-c w r\") 'elfeed-summary) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-org"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-summary(setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) (global-set-key (kbd \"C-c w r\") 'elfeed-summary) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-summary"},{"categories":null,"content":"EmailEmacs 可以进行 Email 的管理，分三个部份，收邮件，看邮件和发邮件。收邮件使用isync，看邮件使用mu，发邮件使用msmtp。 Emacs 管理邮件的详细教程见此Blog，按照此教程一步步进行基本可用。 mu，isync和msmtp都是独立于 emacs 的外部程序，需要使用系统工具进行安装。对于MacOS，使用 homebrew即可。 Emacs 中使用 mu4e 进行邮件的查询 mu4e 是 mu 的一部份，安装 mu 后就可以使用。建议还是安装 mu 来使用 mu4e 不要在 emacs 中安装它，虽然也可以，可是相对会比较麻烦，Mu4e 的安装见官方手册（Installation）。 对于 msmtp 配置好后，可以使用终端对其进行测试是否能正常工作。测试通过后才能使用 msmtp 发送邮件。 echo -e \"hello world\" | msmtp -a default XXXXXX@XX.com msmtp 的默认配置文件位于 “~/.msmtprc”，对于 outlook 的邮箱，其中内容如下： defaults logfile ~/.maildir/msmtp.log account outlook auth on host smtp-mail.outlook.com port 587 protocol smtp from XXX@outlook.com user XXX@outlook.com passwordeval security find-generic-password -s mu4e-outlook -a XXX@outlook.com -w tls on tls_starttls on tls_trust_file ~/.maildir/certificates/Certificates.pem account default : outlook 注意上面的 passwordeval 中在 MacOS 使用 keychain access 获取密码，其他的平台，请使用其他的（自己搜一下）。如果要测试 msmtp 能否正常工作，可以使用“password XXXX”，写入明码测试。 在使用 find-generic-password 之前，需要将密码加入到 keychain access 中去。 security add-generic-password -s mu4e-outlook -a XXX@outlook.com -w 对于 tls_trust_file 是将 keychain access 中的导出来的。 brew_install \"mu\" brew_install \"isync\" brew_install \"msmtp\" mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) mu4e-vars (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) mu4e-message (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) mu4e-main (setq mu4e-main-hide-personal-addresses t) mu4e-headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars nil) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face))) (setq mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\")))) (setq mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\")))) (setq mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face))) (setq mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face))) (setq mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\")))) (setq mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face))) (setq mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face))) (setq mu4e-head","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#email"},{"categories":null,"content":"EmailEmacs 可以进行 Email 的管理，分三个部份，收邮件，看邮件和发邮件。收邮件使用isync，看邮件使用mu，发邮件使用msmtp。 Emacs 管理邮件的详细教程见此Blog，按照此教程一步步进行基本可用。 mu，isync和msmtp都是独立于 emacs 的外部程序，需要使用系统工具进行安装。对于MacOS，使用 homebrew即可。 Emacs 中使用 mu4e 进行邮件的查询 mu4e 是 mu 的一部份，安装 mu 后就可以使用。建议还是安装 mu 来使用 mu4e 不要在 emacs 中安装它，虽然也可以，可是相对会比较麻烦，Mu4e 的安装见官方手册（Installation）。 对于 msmtp 配置好后，可以使用终端对其进行测试是否能正常工作。测试通过后才能使用 msmtp 发送邮件。 echo -e \"hello world\" | msmtp -a default XXXXXX@XX.com msmtp 的默认配置文件位于 “~/.msmtprc”，对于 outlook 的邮箱，其中内容如下： defaults logfile ~/.maildir/msmtp.log account outlook auth on host smtp-mail.outlook.com port 587 protocol smtp from XXX@outlook.com user XXX@outlook.com passwordeval security find-generic-password -s mu4e-outlook -a XXX@outlook.com -w tls on tls_starttls on tls_trust_file ~/.maildir/certificates/Certificates.pem account default : outlook 注意上面的 passwordeval 中在 MacOS 使用 keychain access 获取密码，其他的平台，请使用其他的（自己搜一下）。如果要测试 msmtp 能否正常工作，可以使用“password XXXX”，写入明码测试。 在使用 find-generic-password 之前，需要将密码加入到 keychain access 中去。 security add-generic-password -s mu4e-outlook -a XXX@outlook.com -w 对于 tls_trust_file 是将 keychain access 中的导出来的。 brew_install \"mu\" brew_install \"isync\" brew_install \"msmtp\" mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) mu4e-vars (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) mu4e-message (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) mu4e-main (setq mu4e-main-hide-personal-addresses t) mu4e-headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars nil) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face))) (setq mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\")))) (setq mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\")))) (setq mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face))) (setq mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face))) (setq mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\")))) (setq mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face))) (setq mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face))) (setq mu4e-head","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e"},{"categories":null,"content":"EmailEmacs 可以进行 Email 的管理，分三个部份，收邮件，看邮件和发邮件。收邮件使用isync，看邮件使用mu，发邮件使用msmtp。 Emacs 管理邮件的详细教程见此Blog，按照此教程一步步进行基本可用。 mu，isync和msmtp都是独立于 emacs 的外部程序，需要使用系统工具进行安装。对于MacOS，使用 homebrew即可。 Emacs 中使用 mu4e 进行邮件的查询 mu4e 是 mu 的一部份，安装 mu 后就可以使用。建议还是安装 mu 来使用 mu4e 不要在 emacs 中安装它，虽然也可以，可是相对会比较麻烦，Mu4e 的安装见官方手册（Installation）。 对于 msmtp 配置好后，可以使用终端对其进行测试是否能正常工作。测试通过后才能使用 msmtp 发送邮件。 echo -e \"hello world\" | msmtp -a default XXXXXX@XX.com msmtp 的默认配置文件位于 “~/.msmtprc”，对于 outlook 的邮箱，其中内容如下： defaults logfile ~/.maildir/msmtp.log account outlook auth on host smtp-mail.outlook.com port 587 protocol smtp from XXX@outlook.com user XXX@outlook.com passwordeval security find-generic-password -s mu4e-outlook -a XXX@outlook.com -w tls on tls_starttls on tls_trust_file ~/.maildir/certificates/Certificates.pem account default : outlook 注意上面的 passwordeval 中在 MacOS 使用 keychain access 获取密码，其他的平台，请使用其他的（自己搜一下）。如果要测试 msmtp 能否正常工作，可以使用“password XXXX”，写入明码测试。 在使用 find-generic-password 之前，需要将密码加入到 keychain access 中去。 security add-generic-password -s mu4e-outlook -a XXX@outlook.com -w 对于 tls_trust_file 是将 keychain access 中的导出来的。 brew_install \"mu\" brew_install \"isync\" brew_install \"msmtp\" mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) mu4e-vars (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) mu4e-message (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) mu4e-main (setq mu4e-main-hide-personal-addresses t) mu4e-headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars nil) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face))) (setq mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\")))) (setq mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\")))) (setq mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face))) (setq mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face))) (setq mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\")))) (setq mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face))) (setq mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face))) (setq mu4e-head","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-alert"},{"categories":null,"content":"EmailEmacs 可以进行 Email 的管理，分三个部份，收邮件，看邮件和发邮件。收邮件使用isync，看邮件使用mu，发邮件使用msmtp。 Emacs 管理邮件的详细教程见此Blog，按照此教程一步步进行基本可用。 mu，isync和msmtp都是独立于 emacs 的外部程序，需要使用系统工具进行安装。对于MacOS，使用 homebrew即可。 Emacs 中使用 mu4e 进行邮件的查询 mu4e 是 mu 的一部份，安装 mu 后就可以使用。建议还是安装 mu 来使用 mu4e 不要在 emacs 中安装它，虽然也可以，可是相对会比较麻烦，Mu4e 的安装见官方手册（Installation）。 对于 msmtp 配置好后，可以使用终端对其进行测试是否能正常工作。测试通过后才能使用 msmtp 发送邮件。 echo -e \"hello world\" | msmtp -a default XXXXXX@XX.com msmtp 的默认配置文件位于 “~/.msmtprc”，对于 outlook 的邮箱，其中内容如下： defaults logfile ~/.maildir/msmtp.log account outlook auth on host smtp-mail.outlook.com port 587 protocol smtp from XXX@outlook.com user XXX@outlook.com passwordeval security find-generic-password -s mu4e-outlook -a XXX@outlook.com -w tls on tls_starttls on tls_trust_file ~/.maildir/certificates/Certificates.pem account default : outlook 注意上面的 passwordeval 中在 MacOS 使用 keychain access 获取密码，其他的平台，请使用其他的（自己搜一下）。如果要测试 msmtp 能否正常工作，可以使用“password XXXX”，写入明码测试。 在使用 find-generic-password 之前，需要将密码加入到 keychain access 中去。 security add-generic-password -s mu4e-outlook -a XXX@outlook.com -w 对于 tls_trust_file 是将 keychain access 中的导出来的。 brew_install \"mu\" brew_install \"isync\" brew_install \"msmtp\" mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) mu4e-vars (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) mu4e-message (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) mu4e-main (setq mu4e-main-hide-personal-addresses t) mu4e-headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars nil) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default))))) (setq mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face))) (setq mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\")))) (setq mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\")))) (setq mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face))) (setq mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face))) (setq mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\")))) (setq mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face))) (setq mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face))) (setq mu4e-head","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-column-faces"},{"categories":null,"content":"Map osm(setq osm-server 'default) (setq osm-tile-directory (expand-file-name \"var/osm/\" user-emacs-directory)) (setq osm-home '(31.93 118.80 3)) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#map-osm"},{"categories":null,"content":"Telegaram非官方的 telegram 客户端。 (setq telega-server-libs-prefix \"~/td/tdlib\") (setq telega-proxies (list '(:server \"127.0.0.1\" :port 7891 :enable t :type (:@type \"proxyTypeSocks5\")))) (global-set-key (kbd \"C-c w t\") 'telega) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#telegaram"},{"categories":null,"content":"Proxy(defun proxy-socks-show () \"Show SOCKS proxy.\" (interactive) (when (fboundp 'cadddr) (if (bound-and-true-p socks-noproxy) (message \"Current SOCKS%d proxy is %s:%d\" (cadddr socks-server) (cadr socks-server) (caddr socks-server)) (message \"No SOCKS proxy\")))) (defun proxy-socks-enable () \"Enable SOCKS proxy.\" (interactive) (require 'socks) (setq url-gateway-method 'socks socks-noproxy '(\"localhost\") socks-server '(\"Default server\" \"127.0.0.1\" 7890 5)) (setenv \"all_proxy\" \"socks5://127.0.0.1:7890\") (proxy-socks-show)) (defun proxy-socks-disable () \"Disable SOCKS proxy.\" (interactive) (require 'socks) (setq url-gateway-method 'native socks-noproxy nil) (setenv \"all_proxy\" \"\") (proxy-socks-show)) (defun proxy-socks-toggle () \"Toggle SOCKS proxy.\" (interactive) (require 'socks) (if (bound-and-true-p socks-noproxy) (proxy-socks-disable) (proxy-socks-enable))) ;; (add-hook 'on-first-buffer-hook #'proxy-socks-enable) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#proxy"},{"categories":null,"content":"BenchmarkEmacs Can DO More 启动时间约 0.10s 。 (message \"Emacs Can DO More: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) Emacs 总计启动时间约 0.66s (+ 0.13 system time) 。 (let ((init-time (float-time (time-subtract (current-time) my/init-start-time))) (total-time (string-to-number (emacs-init-time \"%f\")))) (message \"Initialization time: %.2fs (+ %.2f system time)\" init-time (- total-time init-time))) ","date":"2022-05-21","objectID":"/posts/emacs-configuration/:9:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Org 转 latex 的自用基本配置，日常使用","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:1:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:2:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#emacs-配置"},{"categories":null,"content":"Org 编译 PDF 的一般流程 导言区内容 一篇 PDF 的样式，取决于此处的设置。日常配置好两个常用的模板即可处理大部分的文档写作工作。目前，我还没有配置 report 类型的模板。有时间的时候，处理一下。 这部分的内容，见第四部分的说明，己包含常用的配置。在 Emacs 中可以将它们组合后，制作成模板，当需要的时候，插入即可，很方便。 yasnippet 和 tempel 这两个包都很好用。 正文具体内容的写作。 内容这部分是一篇文章的主要部分，需要花大量的时间和精力进行。写本文的目的也就将除此之外的部分简化，减少程序性的事务消消耗的精力。 通过 C-c C-e l o 编译 pdf 文件，并打开预览。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:3:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-编译-pdf-的一般流程"},{"categories":null,"content":"Org 文件头部内容配置","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-文件头部内容配置"},{"categories":null,"content":"documentclass Figure 1: documentclass 其中 #+title: 是文章的名字。如果需要不输出 title ，增加下面一行说明，输出 pdf 的时候就不会生成标题。 #+LATEX_CLASS 有默认值，可以见 org-latex-default-class ，默认使用 article 。 #+LATEX_CLASS 还有 article ， book 等，可以查看 org-latex-classes 这个值。 OPTIONS: 中可以指定是否输出目录，日期，作者。 #+LATEX_CLASS_OPTIONS 设置 documentclass 中的可选参数。如 [UTF8,a4paper,12pt] 。其他的参数看手册。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:1","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#documentclass"},{"categories":null,"content":"页面布局 Figure 2: 文档布局 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:2","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页面布局"},{"categories":null,"content":"字体大小和类型 Figure 3: 字体 这个根据需要自己配吧。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:3","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#字体大小和类型"},{"categories":null,"content":"页眉和页脚 Figure 4: 页眉和页脚 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:4","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页眉和页脚"},{"categories":null,"content":"目录通过 secnumdepth 控制目录的深度，根据需要来设置就好。 Figure 5: 目录 当使用 article 这个样式的时候，目录这两个字不会居中。当使用 book 的时候，会居中。 book 这个样式中有 chapter 这一个控制， chapter 是设置为居中显示的，相应的目录这两个字也是居中显示。 后期研究下，怎么单独设置某一级标题居中显示。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:5","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#目录"},{"categories":null,"content":"标题主要是使用了 titlesec 这个包，设置了 titleformat 和 titlespace 这两个参数，分别控制着标题的样式和标题前后的行间距。不设置这个值的话，当使用 book 这个样式时，行间距会很难看。 titleformat 中可以设置字体的大小和类型。 Figure 6: 标题 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:6","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#标题"},{"categories":null,"content":"图形图形的话，就是使用 graphicx 和 subfigure 这两个包。 Figure 7: 图形 在 org-mode 中我使用 org-download 这个包进行图片的管理，通过 org-download-clipboard 将图片复制到 org 文档中。当需要插入己有图片时，我会使用 org-insert-link 插入 file 类型的文件。 图形环境中 placement 这个参数有五个选项 !htbp ，分别对应的是 here,top,bottom,page of float, 当图形位置不在文本附近时或者你需要强制图形在文本附近，可以加入 ! 来强制实现。一般情况下，使用 htbp 基本上能满足需要了。 当一行只有一张图时，使用 org-download-clipboard 产生的配置如图 \\ref{org-mode 图形配置} 所示： Figure 8: org-mode 图形配置 图中 #+NAME 当需要引用时，可以通过在正文中使用 ref{} 来实现引用。 #+CAPTION 是图片的标签，一般居于图片的下方。 #+ATTR_LATEX 可以控制图片在文章中的大小，单张图设置 :width 8cm 即可。 当一行有两张图时，我会插入模板，如下： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\centering \\caption{fig:} \\end{figure} 当有四张图时，我会使用下面的配置： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\centering \\caption{fig:} \\end{figure} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:7","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图形"},{"categories":null,"content":"图表这里的问题还很大，得好好琢磨一下。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:8","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图表"},{"categories":null,"content":"数学公式一般有行内公式和行间公式两种。在 org 中的语法很简单，分别使用 $$ 或者 \\[\\]\\ 。 如果需要设置数学字体的话，需要如下配置，见图 \\ref{数学字体配置}： Figure 9: 数学字体配置 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:9","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#数学公式"},{"categories":null,"content":"代码环境Org-mode 中的代码环境可以使用 listings 和 minted 这两种方式。目前使用推荐使用 minted 这种方式，比较新。 minted 需要安装 pygemnts 这个包，终端执行下面的命令。 pip3 install pygments 别外，编译时需要加入 eshell-escape 这个命令参数，见上方 Emacs 中的配置。这个很重要，否则当编译的时候会报错。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:10","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#代码环境"},{"categories":null,"content":"参考文献 Figure 10: 参考文献 org 9.5.2 己经内置了 org-cite 。参考文献的格式设置见 cite_export 。我一般使用 chinese-gb7714 这个，具体的文件可以去 zotero 的官网下载。 设置 UNNUMBERED 这个 property ，目录中就会不显示参考文献这个标题，通常也不需要显示。 默认的参考文献间距过大，使用 #+LATEX_HEADER: \\usepackage{bibspacing} 这个文件，此文件用内容是网上抄来的一段代码，具体的内容如下，使用时将下面的内容保存到 bibspacing.sty 中，将该文件放到 /usr/local/texlive/2021/texmf-dist/tex/latex/bibspacing 文件夹中，然后执行 sudo texhash 即可： \\newdimen\\bibindent \\setlength\\bibindent{1.5em} \\newdimen\\bibspacing \\setlength\\bibspacing\\z@ \\renewenvironment{thebibliography}[1]{% \\section*{\\refname \\@mkboth{\\MakeUppercase\\refname}{\\MakeUppercase\\refname}}% \\list{\\@biblabel{\\@arabic\\c@enumiv}}% {\\settowidth\\labelwidth{\\@biblabel{#1}}% \\leftmargin\\labelwidth \\advance\\leftmargin\\labelsep \\itemsep\\z@skip % should this be commented out? \\parsep\\z@skip % should this be commented out? \\@openbib@code \\usecounter{enumiv}% \\let\\p@enumiv\\@empty \\renewcommand\\theenumiv{\\@arabic\\c@enumiv}}% \\sloppy\\clubpenalty4000\\widowpenalty4000% \\sfcode`\\.\\@m} {\\def\\@noitemerr {\\@latex@warning{Empty `thebibliography' environment}}% \\endlist} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:11","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#参考文献"},{"categories":null,"content":"统一 workflow ，减少在程序性事务上清耗精力","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/"},{"categories":null,"content":"最近配置了自己的 blog， 目前写 blog 的流程有三种方式： ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:0:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#"},{"categories":null,"content":"写在一个统一的文件中这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。 如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。 虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:1:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#写在一个统一的文件中"},{"categories":null,"content":"使用 easy-hugoeasy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下： (defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/blog/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-org-header t) 我使用 easy-hugo 的流程很简单，通过 easy-hugo-new-post 创建新的文章 ，写文章， easy-hugo-magit 提交到仓库。看下图中 easy-hugo 提供了很多人命令，但是使用的很少。 Figure 1: easy-hugo menu ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:2:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#使用-easy-hugo"},{"categories":null,"content":"在 org-roam 笔记系统中进行今天想到我使用 org-roam 管理自己的笔记，那么在本地是否可以结合 org-roam 进行 blog 的写作呢？实践证明是可以的。这篇文章就是在 org-roam 中写的。 这种的优势是，每一篇 post 都是 org-roam 中的一个 node ；结合 org-roam 的方式使得自己对于写作的 workflow 更统一。 相对第一种写在 all-posts.org 中的这种创作方式，不再每次写都要先打开 all-posts 这个文档，在其中创建新的结点，直接使用 org-roam-node-find 创建新的结点写 post 即可。 post 和其他笔记之间的区别仅在于我是否选择将其 export 到 blog 这个项目文件中。相对于第二种使用 easy-hugo 的方式，可以更大化的利用 org-roam 这个包的基础功能。 easy-hugo 中毕竟就使用了两个命令而己，完全可以被 org-roam 替代。 使用 easy-hugo 如果选择 org 作为文档的格式，那么不会将文档转换成 md 文档。使用 all-posts.org 或者是 org-roam 中的节点都可以将 org 文档转换成 md 文件。虽然 hugo 支持解析 org 文档，但是我看对 md 的解析更快一些。那么使用 org-roam 管理自己的 posts 看起来就有了优势。 一个统一的流程，可以显著减少自己在无关程序性的事务上清耗的精力。 Org-roam 中关于图片的管理也很方便，当 export 到 blog 用项目仓库时，图片会自动 export 到 hugo-source 项目仓库中的 staic/ox-hugo 文件夹中。不用使用 easy-hugo-put-image 这个功能。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:3:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#在-org-roam-笔记系统中进行"}]