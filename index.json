[{"categories":null,"content":"之前写过一篇关于使用 Emacs 进行文献管理的文章，有人询问能否写一篇详细的教程。 这篇文章就更新下我目前的关于文献管理及笔记记录的相关流程，更多的是关于术的使用，道的部份还得每个人深思。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:0:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#"},{"categories":null,"content":"Zotero首先是文献管理的基本软件。 我曾经使用过的有 Endnote、Mendeley、Zotero、Jabref、Ebib 等等，其中Endnote 是最早使用的，但是一直都没觉得它有多么的好用，可能最早就它和 Word 结合使用的体验较好而己。Mendeley 己经很久没有使用过了，使用它的时间比 Endnote 长一些，它需要在线使用更新文献等，没有黑科技使用起来并不是很好。Jabref 的优点在于开源，以及使用 plain entry 的功能自动生成文献题录。 Zotero 的优势在于收集文献，我的基本使用流程是使用 Google scholar 跟踪最新的文献，通过邮箱订阅一周会定时收到几篇文献，打开文献阅读的时候，然后使用 zotero 保存到数据库当中。Zotero 有个插件 Better bibtex for zotero，使用该插件可以自动的更新数据库中的文献到 Reference.bib 文件，这个文件记录了所有的文献引文，该文件可以在Emacs 中调用。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:1:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#zotero"},{"categories":null,"content":"Emacs 中文献的管理在 Emacs 中有多个包可以进行文献的管理与阅读工作，具体的可以通过 melpa.org 这个网战查询。我目前使用的是 Ebib、Bibtex-completion、Citar、org-cite 以及 org-roam-bibtex 这几个。 Ebib 是类似 zotero 的文献管理包，可以进行文献的收索、查询、笔记的记录等工作，但是我仅用它来进行文献的过滤查找，简单的查找用使用 citar 进行。 我的配置文件见.emacs.d/init-bibtex.el at master · Jousimies/.emacs.d。 这个过程的难点在于 Emacs 的配置，配置好之后在 Emacs 中可以通过 citar 打开文献文件、引文或者文献引用等都比较简单。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:2:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#emacs-中文献的管理"},{"categories":null,"content":"PDF 阅读软件我通常只保存 PDF 文件，知网上的 CAJ 文件我会通过 Tempermonkey 这个软件来下载 PDF 文件，我不喜欢 CAJ 格式文件，在 Mac 上打开非常的慢，体验很差。 在 Mac 上一个比较好用的独立于 Emacs 的 PDF 阅读器是 sioyek。如果你使用付费软件有其他可选，自己找吧。 基于 Emacs 的目前就两个选择，一个是 pdf-tools，一个是 eaf-pdf-viewer ，关于 eaf-pdf-viewer 的使用见我的另一篇文章。如果你使用 Mac 或 Linux 系统两个都可以使用，Mac 上使用 eaf-pdf-viewer 目前需要 Emacs 版本为 28.2，29及以上的版本使用存在一些问题。 如果是 Windows 系统还是使用独立于 Emacs 的 PDF 阅读器更好。 Figure 1: eaf-pdf-viewer ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:3:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#pdf-阅读软件"},{"categories":null,"content":"文献阅读笔记我在 Emacs 中使用 org-roam 进行笔记的记录，相关的内容可以见我的文章，All-in-one 笔记系统。 说一说我的基本使用流程。 我会通过 citar-open-note 开始进行文献笔记的记录，这个会自动的调用 org-roam 中设置的 template。可根据自己的需要修改模板的内容。 在生成的笔记文件当中包含了 :ID: :ROAM_REFS: 这两项，通过 ID 可以使用 org-roam 提供的检索功能 org-roam-ref-find 进行文献笔记的查找，这个与 org-roam-node-find 区分普通笔记和文献笔记。 有了 ROAM_REFS 这一项就可以在笔记中打开对应的 PDF 文件，我设置的是 zm 调用 orb-note-actions，回车即可。这个 orb-note-actions 还有其他的功能，我不怎么使用，感兴趣的可以自己去探索。 阅读文献的时候会进行 highlight 的标注，然后通过 pdfannot 这个第三方的程序将 highlight 抽取到文献笔记当中。（这个过程原来是通过一致的 bibtex key 进行，当前我更改了文件保存的文件名，导致这个过程目前不可用，相关代码就不放出来了。感兴趣的去我过往的文章中找找代码。） 至于具体的文献阅读的过程可以在知乎上搜索，有很多的个人经验可以参考，这里就不赘述了。 需要指出的是这只是单篇文献的阅读，还需要争对同类型的文献进行整理，需要另外建立笔记然后在其中对需要的文献进行引用({Timothy Johnson}, 2022)。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:4:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#文献阅读笔记"},{"categories":null,"content":"TODO基于 Emacs 的 latex 文献引用当需要投稿的时候，使用期刊提供的 Latex 模板可以很容易的引用文献，相比较于 Word 处理文献要容易的很多。 但是面临的一个问题是，zotero 管理的是所有的文献，投稿时并不需要提供所有的文献只需要提供引用的那些文献，怎么办呢？ 第一种是从主 bibtex 文件中将所需的的复制出来。这个方法可行，但是显的有些笨拙。 第二种方法是使用 Emacs 中的 ebib 这个包提取所需要的文献。 首先使用 ebib-dependent-create-dependent 在你的 latex 文档处创建 Reference.bib 文件以供引用。然后通过 ebib-dependent-add-entry 将需要引用的文献加入到 Reference.bib 文件中即可。 在 Emacs 中进行 latex 的写作还是很方便的，通过 Reftex 这个包提供的 reftex-citation 就可以插入文献啦。 在 Emacs 中使用 bibtex 文件需要对此先进行编译，通常需要三步， bibtex-\u003elatex-\u003elatex 。在 Emacs 中使用 C-c C-c 进行，还是很方便的。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:5:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#基于-emacs-的-latex-文献引用"},{"categories":null,"content":"今天在知乎上看到一篇文章是在本地使用 roam research，不连网使用就不需要交费，所以就尝试了下。想要尝试使用看这。 Roam research 这类大纲类软件的 daily note 功能相比 org-roam 要好用，但是创建页面笔记的时候还是有很多的不适应感，有可能是因为我用习惯了基于 Emacs 的 org-roam 笔记。 首先不能根据上下文的环境自动的切换输入法，这个给我带来了很大的不确定感，需要不停的使用 Shift 在中英文之间进行切换。虽然我使用 Evil 需要在 insert 和 normal 模式之间进行切换，但是这种形为是明确的，而在 RR 中输入法的切换是不明确的，需要自己明确当前的输入法状态。比如在一个词条上我要创建页面引用，我会选中词条然后通过输入[[进行，但是如果当前输入法是中文的状态就会出现【覆盖当前的词条，很不爽。 创建 alias 不是很方便，没有 org-roam 好用。有 pomodoro 的功能，但是很简陋，不能创建多个。不能进行计时。 RR 比较强的一方面在于文章的组织，当建立了较好的笔记库后，新建一篇文章复制可拖动 block 即可。在 org-roam 当中需要使用 org-transclusion，相较于直接拖动的操作这个会麻烦一些。 不能方便的进行文献的引用，结合 zotero 进行文献的管理很差，但是也不是不能使用，我无感。想要使用 zotero 的可以看看这篇文章，Zotero and Roam Research，该文中需要的 zotero translator 的内容如下： { \"translatorID\":\"dda092d2-a257-46af-b9a3-2f04a55cb04f\", \"translatorType\":2, \"label\":\"Roam Metadata Export\", \"creator\":\"Lukas Kawerau\", \"target\":\"md\", \"minVersion\":\"2.0\", \"maxVersion\":\"\", \"priority\":200, \"configOptions\": { \"getCollections\": \"true\", \"dataMode\": \"rdf/xml\" }, \"inRepository\":false, \"lastUpdated\":\"2020-11-24 - 07:30\" } function doExport() { var item; while (item = Zotero.nextItem()) { var creatorsS = item.creators[0].lastName; if (item.creators.length\u003e2) { creatorsS += \" et al.\"; } else if (item.creators.length==2) { creatorsS += \" \u0026 \" + item.creators[1].lastName; } var citationKey = (item.citationKey) ? item.citationKey : \"(bib citkey missing)\"; Zotero.write('[[' + item.citationKey + ']]\\n'); Zotero.write(' author:: '); for (author in item.creators){ if (item.creators[author].firstName !== undefined) { Zotero.write('[[' + item.creators[author].firstName + ' ' + item.creators[author].lastName + ']] '); } else { Zotero.write('[[' + item.creators[author].lastName + ']] '); } } Zotero.write('\\n'); var titleS = (item.title) ? item.title : \"(no title)\"; Zotero.write(' title:: ') Zotero.write('[[' + titleS + ']]\\n') var date = Zotero.Utilities.strToDate(item.date); var dateS = (date.year) ? date.year : item.date; Zotero.write(' year:: ') Zotero.write('[[' + dateS + ']]\\n') if (item.url !== undefined) { Zotero.write(' url:: [') Zotero.write(creatorsS) Zotero.write(' (' + dateS + '). ') Zotero.write(titleS + '.') if(item.publicationTitle !== undefined) { Zotero.write(' ' + item.publicationTitle) } Zotero.write('](' + item.url + ')\\n') } var library_id = item.libraryID ? item.libraryID : 0; var itemLink = 'zotero://select/items/' + library_id + '_' + item.key; Zotero.write(' Zotero link:: ') Zotero.write('[Zotero Link](' + itemLink + ')\\n') Zotero.write(' topics:: \\n') Zotero.write(' reading status:: [[to read]]\\n') Zotero.write(' citation graph:: {{[[query]]: {and: [[quote]] [[citing]] [['+citationKey+']] {not: [[query]]}}}}\\n') } } 下载了 RR 之后，我又下载了 logseq ，两者好像啊！ 综上，这两个软件都不错，颜值高，但是不是我的菜，还是使用 org-roam 比较带劲，Emacs 的生态更好，颜值差些。 ","date":"2022-12-10","objectID":"/posts/2022-12-10/:0:0","series":null,"tags":["project"],"title":"Roam research","uri":"/posts/2022-12-10/#"},{"categories":["Philosophy"],"content":"It's a descript","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/"},{"categories":["Philosophy"],"content":"哲学的定义哲学是研究自然、社会和思维的最一般规律的科学。 “哲学”一词的本义，西方人通常指“爱智慧”或“智慧之学”，中国人解释为通晓事理、使人聪明的学问。 哲学是关于世界观的学问，是理论化和系统化的世界观，任何哲学都是世界观和方法论的统一。 根据对思维与存在、精神与物质的关系的认识，哲学可分为唯物主义和唯心主义两大派别。 认识论是哲学的一个组成部分。 冯友兰说：“哲学的作用有两方面，一是锻炼、发展人的理论思维的能力，一是丰富、提高人的精神境界。” 人生处处不无哲学的影响。 王国维在《静庵文集·自序二》中写道:“哲学上之说，大都可爱者不可信，可信者不可爱。余知真理，余又爱其谬误。” ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:1:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#哲学的定义"},{"categories":["Philosophy"],"content":"方法论 Youtube The Active Learning Method 方法论，就是关于人们认识世界、改造世界的方法的理论。它是人们用什么样的方式、方法来观察事物和处理问题。 方法论主要说明 怎么办 的问题。 方法论是一种以解决问题为目标的理论体系或系统，通常涉及对问题阶段、任务、工具、方法技巧的论述。方法论会对一系列具体的方法进行分析研究、系统总结并最终提出较为一般性的原则。 方法论也是一个哲学概念。人们关于“世界是什么、怎么样”的根本观点是世界观。用这种观点作指导去认识世界和改造世界，就成了方法论。 方法论是普遍适用于各门具体社会科学并起指导作用的范畴、原则、理论、方法和手段的总和。 方法论=逻辑+环境变量 —- 底层逻辑(刘润, 2021) ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:2:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#方法论"},{"categories":["Philosophy"],"content":"哲学和逻辑 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。—- 苏珊哈克 ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:3:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#哲学和逻辑"},{"categories":["Philosophy"],"content":"思维更清晰，表达更顺畅：书单 逻辑学入门:清晰思考，理性生活的88个逻辑学常识 帮助读者轻松地了解逻辑学常识和概念，辨别语言陷阱，认识逻辑谬误，学会用清晰理性的方式思考问题。 沟通力就是思维力 格局 这本书不是讲思维能力的，但是提供了提高思维能力的一种很有效的方式，那就是格局。 作者说人生的格局就在你怎么看自己，你所认识的人，你说过的话，你给人的感觉，你做事的态度，你所经历的遭遇，你的每个念头，以及你的所作所为。当你把这些都想清楚了，你的格局提高了，思维能力自然而然会上升一个层次。 一本小小的红色写作书 麦肯锡教我的写作武器 金字塔原理 非暴力沟通 态度改变与社会影响 远见 系统之美 我们如何思维 ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:4:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#思维更清晰-表达更顺畅-书单"},{"categories":["PersoanlManage"],"content":"之前在知乎上看到一个问题是：有没有一个All in One的笔记系统?。我在下面的回答中提供了一个方案就是使用 Emacs。 那么现在说说怎么使用 Emacs 进行笔记的管理，如何做到 all-in-one。 在上面的提问中，提问者列出了自己关于all-in-one笔记的系统的几点要求。笔记记的是什么内容呢，初步列举如下： ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:0:0","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#"},{"categories":["PersoanlManage"],"content":"笔记内容","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:0","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#笔记内容"},{"categories":["PersoanlManage"],"content":"文本+格式笔记肯定第一位的就是需要记录大量的文本内容。那么文本只能是汉字、英文、字母吗？当然不是，文本也有格式，如对文本进行加粗、斜体、引用、列表等等。文本+格式只要是个笔记软件应该都能提供（window 上的 txt 记事本不行，过于简陋）。 但是文本与格式分离，这不是哪个软件都能做好的。如 word 就很难做到样式和内容的分离，以我的经验，它可以做到但是很难，你需要对word 有充分的了解。Latex 就很容易做到文本与样式的分离，但是它难在非所见即所得。（有什么软件你需要深度使用，但是可以对其不需要了解的吗？没有什么是纯傻瓜式的。） ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:1","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#文本-plus-格式"},{"categories":["PersoanlManage"],"content":"图表我认为表格只是文本内容呈现的另一种方式，笔记系统中不需要使用过于复杂的表格。 这里要提到 onenote 笔记软件，这个软件我很多次都想利用起来，但是最终都没能。现在想来，它就像一个画板，做笔记像画画，内容超出屏幕范围时，很难对内容有个全局的了解。相对应的是幕布类的大纲式的软件（有了解没用过，不评价）。Onenote软件作的笔记如果想要内容很规整，一个方法就是嵌套使用表格（可以很漂亮，但是不推荐）。 图是笔记系统中一个很重要的组成部分。笔记系统中插入图我想有两种方式，一种是如word ，印象笔记的方式。一种是类似org-mode, markdown这种方式，以链接的方式插入到笔记当中。我选择第二种。 图直接插入到笔记当中的方式，往往是专有格式的软件。这类笔记系统对于软件本体依赖过高，不利于笔记在不同系统中的转移。图直接插入到笔记当中，会导致单个笔记的体积很大，而且很难在不同的笔记中进行复用。相应的使用图片链接的方式就没有上述的问题。 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:2","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#图表"},{"categories":["PersoanlManage"],"content":"公式公式我只推荐使用 latex ，以文本的方式进行管理。如 Word 上使用 mathtype 进行公式的输入非常差，难以编排，交叉引用。 如果你认为latex 输入公式很慢，不直观，是大概率你没有使用合适的方法。你需要的是快速输入的方法以及公式预览。Latex公式的效果看看这个demo。 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:3","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#公式"},{"categories":["PersoanlManage"],"content":"文献管理文献管理软件有很多，如zotero，endnote，mendeley，jabref等等。笔记系统中我推荐使用zotero，其他都不做推荐。我更喜欢的方式是直接管理bibtex文件，zotero只是我用来收集bib的工具。 此外，还应关注的是文献文件的格式，大部份应该都是pdf 文件。 如果是caj等格式，那么推荐你使用tampermonkey在知网上下载pdf 格式的，而不是caj格式的（我讨厌caj）。 如果你看的是出版物，网上有很多提供的epub格式。 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:4","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#文献管理"},{"categories":["PersoanlManage"],"content":"音频和视频这里不过多写，我没这个需求。对此没什么实践。 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:1:5","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#音频和视频"},{"categories":["PersoanlManage"],"content":"Emacs 如何实现上述的笔记管理Emacs 中进行笔记写作依赖的是 org-mode，关于 org-mode 的介绍可以见其官方网站，网上也有很人写了介绍。 Figure 1: 笔记界面 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:2:0","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#emacs-如何实现上述的笔记管理"},{"categories":["PersoanlManage"],"content":"笔记界面Emacs 上想要实现笔记还需要依赖其他的包，好在这些都是开源的，你不需要担心其突然就不能用的问题。 文本记录需要用到 org-mode + org-roam，org-roam 是链式笔记，对此可以知乎上搜zettelkasten。有人对此有不同的意见。我的意见是，你可以用也可以不用。好处是可以保持笔记的原子化，便于复用。 org-mode 自带表格功能，简单的矩阵式表格使用自带的即可。如果是要实现复杂的表格，那么在org-mode 中插入 Latex 表格即可。 图表的功能，以文件链接的方式插入。好处是org-mode 中可以直接切换是否在当前文档中显示图片。 公式那么直接使用 latex 语法就可以啦，预览可以使用自带的功能，我推荐使用 math-preveiw这个包，输入的话开启cdlatex的功能，那么输入各种公式符号都很方便。 ","date":"2022-10-25","objectID":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/:2:1","series":null,"tags":["High-effective-system"],"title":"All-In-One 笔记系统","uri":"/posts/all_in_one_%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/#笔记界面"},{"categories":null,"content":"今天看到一篇好的介绍算法的文章。此文总结了六种算法思想。此处做些记录，留待以后慢慢补充。 递归算法 递归算法是一种直接或者间接调用自身函数或者方法的算法。 递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。 分治算法 分治，顾名思义就是将一个复杂的问题分成两个或多个相似的子问题，再把子问题分成更小的子问题，直到更小的子问题可以简单求解，原问题的解则为子问题解的合集。 贪心算法 贪心算法总是做出当前的最优选择，即期望通过局部的最优选择获得整体的最优选择。它做出的选择仅是某种意义上的局部最优，但是贪心算法在很多问题上还是可以获得最优解或较优解。 回溯算法 回溯算法是一种搜索法，试探法，它会在每一步做出选择，一旦发现这个选择无法得到期望结果，就回溯回去，重新做出选择。 深度优先搜索利用的就是回溯算法思想。 动态规划 动态规划也是将复杂问题分解成小问题求解的策略，与分治算法不同，动态规划各子问题是相互关联的。动态规划适用于子问题重叠的情况，即不同的子问题具有公共的子子问题。 枚举算法 将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适。 ","date":"2022-07-05","objectID":"/posts/%E7%AE%97%E6%B3%95/:0:0","series":null,"tags":null,"title":"算法","uri":"/posts/%E7%AE%97%E6%B3%95/#"},{"categories":null,"content":"Org 转 latex 的自用基本配置，日常使用","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:1:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:2:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#emacs-配置"},{"categories":null,"content":"Org 编译 PDF 的一般流程 导言区内容 一篇 PDF 的样式，取决于此处的设置。日常配置好两个常用的模板即可处理大部分的文档写作工作。目前，我还没有配置 report 类型的模板。有时间的时候，处理一下。 这部分的内容，见第四部分的说明，己包含常用的配置。在 Emacs 中可以将它们组合后，制作成模板，当需要的时候，插入即可，很方便。 yasnippet 和 tempel 这两个包都很好用。 正文具体内容的写作。 内容这部分是一篇文章的主要部分，需要花大量的时间和精力进行。写本文的目的也就将除此之外的部分简化，减少程序性的事务消消耗的精力。 通过 C-c C-e l o 编译 pdf 文件，并打开预览。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:3:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-编译-pdf-的一般流程"},{"categories":null,"content":"Org 文件头部内容配置","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-文件头部内容配置"},{"categories":null,"content":"documentclass Figure 1: documentclass 其中 #+title: 是文章的名字。如果需要不输出 title ，增加下面一行说明，输出 pdf 的时候就不会生成标题。 #+LATEX_CLASS 有默认值，可以见 org-latex-default-class ，默认使用 article 。 #+LATEX_CLASS 还有 article ， book 等，可以查看 org-latex-classes 这个值。 OPTIONS: 中可以指定是否输出目录，日期，作者。 #+LATEX_CLASS_OPTIONS 设置 documentclass 中的可选参数。如 [UTF8,a4paper,12pt] 。其他的参数看手册。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:1","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#documentclass"},{"categories":null,"content":"页面布局 Figure 2: 文档布局 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:2","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页面布局"},{"categories":null,"content":"字体大小和类型 Figure 3: 字体 这个根据需要自己配吧。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:3","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#字体大小和类型"},{"categories":null,"content":"页眉和页脚 Figure 4: 页眉和页脚 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:4","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页眉和页脚"},{"categories":null,"content":"目录通过 secnumdepth 控制目录的深度，根据需要来设置就好。 Figure 5: 目录 当使用 article 这个样式的时候，目录这两个字不会居中。当使用 book 的时候，会居中。 book 这个样式中有 chapter 这一个控制， chapter 是设置为居中显示的，相应的目录这两个字也是居中显示。 后期研究下，怎么单独设置某一级标题居中显示。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:5","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#目录"},{"categories":null,"content":"标题主要是使用了 titlesec 这个包，设置了 titleformat 和 titlespace 这两个参数，分别控制着标题的样式和标题前后的行间距。不设置这个值的话，当使用 book 这个样式时，行间距会很难看。 titleformat 中可以设置字体的大小和类型。 Figure 6: 标题 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:6","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#标题"},{"categories":null,"content":"图形图形的话，就是使用 graphicx 和 subfigure 这两个包。 Figure 7: 图形 在 org-mode 中我使用 org-download 这个包进行图片的管理，通过 org-download-clipboard 将图片复制到 org 文档中。当需要插入己有图片时，我会使用 org-insert-link 插入 file 类型的文件。 图形环境中 placement 这个参数有五个选项 !htbp ，分别对应的是 here,top,bottom,page of float, 当图形位置不在文本附近时或者你需要强制图形在文本附近，可以加入 ! 来强制实现。一般情况下，使用 htbp 基本上能满足需要了。 当一行只有一张图时，使用 org-download-clipboard 产生的配置如图 \\ref{org-mode 图形配置} 所示： Figure 8: org-mode 图形配置 图中 #+NAME 当需要引用时，可以通过在正文中使用 ref{} 来实现引用。 #+CAPTION 是图片的标签，一般居于图片的下方。 #+ATTR_LATEX 可以控制图片在文章中的大小，单张图设置 :width 8cm 即可。 当一行有两张图时，我会插入模板，如下： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\centering \\caption{fig:} \\end{figure} 当有四张图时，我会使用下面的配置： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\centering \\caption{fig:} \\end{figure} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:7","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图形"},{"categories":null,"content":"图表这里的问题还很大，得好好琢磨一下。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:8","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图表"},{"categories":null,"content":"数学公式一般有行内公式和行间公式两种。在 org 中的语法很简单，分别使用 $$ 或者 \\[\\]\\ 。 如果需要设置数学字体的话，需要如下配置，见图 \\ref{数学字体配置}： Figure 9: 数学字体配置 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:9","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#数学公式"},{"categories":null,"content":"代码环境Org-mode 中的代码环境可以使用 listings 和 minted 这两种方式。目前使用推荐使用 minted 这种方式，比较新。 minted 需要安装 pygemnts 这个包，终端执行下面的命令。 pip3 install pygments 别外，编译时需要加入 eshell-escape 这个命令参数，见上方 Emacs 中的配置。这个很重要，否则当编译的时候会报错。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:10","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#代码环境"},{"categories":null,"content":"参考文献 Figure 10: 参考文献 org 9.5.2 己经内置了 org-cite 。参考文献的格式设置见 cite_export 。我一般使用 chinese-gb7714 这个，具体的文件可以去 zotero 的官网下载。 设置 UNNUMBERED 这个 property ，目录中就会不显示参考文献这个标题，通常也不需要显示。 默认的参考文献间距过大，使用 #+LATEX_HEADER: \\usepackage{bibspacing} 这个文件，此文件用内容是网上抄来的一段代码，具体的内容如下，使用时将下面的内容保存到 bibspacing.sty 中，将该文件放到 /usr/local/texlive/2021/texmf-dist/tex/latex/bibspacing 文件夹中，然后执行 sudo texhash 即可： \\newdimen\\bibindent \\setlength\\bibindent{1.5em} \\newdimen\\bibspacing \\setlength\\bibspacing\\z@ \\renewenvironment{thebibliography}[1]{% \\section*{\\refname \\@mkboth{\\MakeUppercase\\refname}{\\MakeUppercase\\refname}}% \\list{\\@biblabel{\\@arabic\\c@enumiv}}% {\\settowidth\\labelwidth{\\@biblabel{#1}}% \\leftmargin\\labelwidth \\advance\\leftmargin\\labelsep \\itemsep\\z@skip % should this be commented out? \\parsep\\z@skip % should this be commented out? \\@openbib@code \\usecounter{enumiv}% \\let\\p@enumiv\\@empty \\renewcommand\\theenumiv{\\@arabic\\c@enumiv}}% \\sloppy\\clubpenalty4000\\widowpenalty4000% \\sfcode`\\.\\@m} {\\def\\@noitemerr {\\@latex@warning{Empty `thebibliography' environment}}% \\endlist} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:11","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#参考文献"},{"categories":["Emacs"],"content":"统一 workflow ，减少在程序性事务上清耗精力","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/"},{"categories":["Emacs"],"content":"最近配置了自己的 blog(我的 hugo 配置记录)， 目前写 blog 的流程有三种方式： ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:0:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#"},{"categories":["Emacs"],"content":"写在一个统一的文件中这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。 如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。 虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:1:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#写在一个统一的文件中"},{"categories":["Emacs"],"content":"使用 easy-hugoeasy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下： (defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/blog/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-org-header t) 我使用 easy-hugo 的流程很简单，通过 easy-hugo-new-post 创建新的文章 ，写文章， easy-hugo-magit 提交到仓库。看下图中 easy-hugo 提供了很多人命令，但是使用的很少。 Figure 1: easy-hugo menu ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:2:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#使用-easy-hugo"},{"categories":["Emacs"],"content":"在 org-roam 笔记系统中进行今天想到我使用 org-roam 管理自己的笔记，那么在本地是否可以结合 org-roam 进行 blog 的写作呢？实践证明是可以的。这篇文章就是在 org-roam 中写的。 这种的优势是，每一篇 post 都是 org-roam 中的一个 node ；结合 org-roam 的方式使得自己对于写作的 workflow 更统一。 相对第一种写在 all-posts.org 中的这种创作方式，不再每次写都要先打开 all-posts 这个文档，在其中创建新的结点，直接使用 org-roam-node-find 创建新的结点写 post 即可。 post 和其他笔记之间的区别仅在于我是否选择将其 export 到 blog 这个项目文件中。相对于第二种使用 easy-hugo 的方式，可以更大化的利用 org-roam 这个包的基础功能。 easy-hugo 中毕竟就使用了两个命令而己，完全可以被 org-roam 替代。 使用 easy-hugo 如果选择 org 作为文档的格式，那么不会将文档转换成 md 文档。使用 all-posts.org 或者是 org-roam 中的节点都可以将 org 文档转换成 md 文件。虽然 hugo 支持解析 org 文档，但是我看对 md 的解析更快一些。那么使用 org-roam 管理自己的 posts 看起来就有了优势。 一个统一的流程，可以显著减少自己在无关程序性的事务上清耗的精力。 Org-roam 中关于图片的管理也很方便，当 export 到 blog 用项目仓库时，图片会自动 export 到 hugo-source 项目仓库中的 staic/ox-hugo 文件夹中。不用使用 easy-hugo-put-image 这个功能。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:3:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#在-org-roam-笔记系统中进行"}]