[{"categories":null,"content":"Personal emacs configuration","date":"2023-02-26","objectID":"/posts/emacs/","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/"},{"categories":null,"content":"Early Init;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; Profiling since here when in debug-mode (when init-file-debug (profiler-start 'cpu) (add-hook 'window-setup-hook #'profiler-stop 0)) ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 1.0) ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (push '(menu-bar-lines . 0) default-frame-alist) (push '(tool-bar-lines . 0) default-frame-alist) (push '(vertical-scroll-bars . 0) default-frame-alist) (push '(undecorated . t) default-frame-alist) (push '(fullscreen . maximized) initial-frame-alist) ;; (setq-default initial-major-mode 'fundamental-mode) ;; Disable mode-line when emacs startup. (setq-default mode-line-format nil) (setq byte-compile-warnings nil) ;;; early-init.el ends here ","date":"2023-02-26","objectID":"/posts/emacs/:1:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#early-init"},{"categories":null,"content":"Start, Lexical Binding关于 lexical-binding 的作用见 Make Emacs run (slightly) faster with lexical binding . 或者 Lisp 已死，Lisp 万岁！ ;; init.el --- Personal Emacs Configuration -*- lexical-binding: t; no-byte-compile: t -*- ;;; Commentary: ;;; Code: ","date":"2023-02-26","objectID":"/posts/emacs/:2:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#start-lexical-binding"},{"categories":null,"content":"Rudimentary Configuration","date":"2023-02-26","objectID":"/posts/emacs/:3:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#rudimentary-configuration"},{"categories":null,"content":"Speedup这部份的内容来源：.emacs.d/init.el at master · seagle0128/.emacs.d 可以加快 Emacs 的启动速度。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive init-file-debug) (let ((old-file-name-handler-alist file-name-handler-alist)) (setq file-name-handler-alist nil) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) ","date":"2023-02-26","objectID":"/posts/emacs/:3:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#speedup"},{"categories":null,"content":"Benchmark可以使用的配置：emacs.d/init-benchmarking.el at master · purcell/emacs.d Emacs 进行性检检测还可以使用dholm/benchmark-init-el: Benchmark your Emacs initialization 或者jschaf/esup: ESUP - Emacs Start Up Profiler. 相比较与使用 Emacs 内置的 package.el, 使用 borg 管理包，Emacs 的启动时间有一个明显的优化。 为了提高 Emacs 的启动速度，需要做的几个方面包括：Speedup, PATH, Early Init, 以及使用 gcmh 管理使用时的 Garbage collection 行为。 (add-hook 'window-setup-hook (lambda () (garbage-collect) (let ((curtime (current-time))) (message \"Times: init:%.06f total:%.06f gc-done:%d\" (float-time (time-subtract after-init-time before-init-time)) (float-time (time-subtract curtime before-init-time)) gcs-done))) 90) (defun sanityinc/time-subtract-millis (b a) (* 1000.0 (float-time (time-subtract b a)))) (defvar sanityinc/require-times nil \"A list of (FEATURE LOAD-START-TIME LOAD-DURATION). LOAD-DURATION is the time taken in milliseconds to load FEATURE.\") (defun sanityinc/require-times-wrapper (orig feature \u0026rest args) \"Note in `sanityinc/require-times'the time taken to require each feature.\" (let* ((already-loaded (memq feature features)) (require-start-time (and (not already-loaded) (current-time)))) (prog1 (apply orig feature args) (when (and (not already-loaded) (memq feature features)) (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time))) (add-to-list 'sanityinc/require-times (list feature require-start-time time) t)))))) (advice-add 'require :around 'sanityinc/require-times-wrapper) (define-derived-mode sanityinc/require-times-mode tabulated-list-mode \"Require-Times\" \"Show times taken to `require'packages.\" (setq tabulated-list-format [(\"Start time (ms)\" 20 sanityinc/require-times-sort-by-start-time-pred) (\"Feature\" 30 t) (\"Time (ms)\" 12 sanityinc/require-times-sort-by-load-time-pred)]) (setq tabulated-list-sort-key (cons \"Start time (ms)\" nil)) ;; (setq tabulated-list-padding 2) (setq tabulated-list-entries #'sanityinc/require-times-tabulated-list-entries) (tabulated-list-init-header) (when (fboundp 'tablist-minor-mode) (tablist-minor-mode))) (defun sanityinc/require-times-sort-by-start-time-pred (entry1 entry2) (\u003c (string-to-number (elt (nth 1 entry1) 0)) (string-to-number (elt (nth 1 entry2) 0)))) (defun sanityinc/require-times-sort-by-load-time-pred (entry1 entry2) (\u003e (string-to-number (elt (nth 1 entry1) 2)) (string-to-number (elt (nth 1 entry2) 2)))) (defun sanityinc/require-times-tabulated-list-entries () (cl-loop for (feature start-time millis) in sanityinc/require-times with order = 0 do (cl-incf order) collect (list order (vector (format \"%.3f\" (sanityinc/time-subtract-millis start-time before-init-time)) (symbol-name feature) (format \"%.3f\" millis))))) (defun sanityinc/require-times () \"Show a tabular view of how long various libraries took to load.\" (interactive) (with-current-buffer (get-buffer-create \"*Require Times*\") (sanityinc/require-times-mode) (tabulated-list-revert) (display-buffer (current-buffer)))) (defun sanityinc/show-init-time () (message \"init completed in %.2fms\" (sanityinc/time-subtract-millis after-init-time before-init-time))) ","date":"2023-02-26","objectID":"/posts/emacs/:3:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#benchmark"},{"categories":null,"content":"PATH如果使用 emacs-plus, 会自动的添加到 path 当中，或者使用purcell/exec-path-from-shell: Make Emacs use the $PATH set up by the user’s shell. 或者使用下面的配置. 这部份的配置来源：EmacsWiki: Exec Path 不设置 exec-path, 在 MacOS 上有可能会提示找不到程序。 (defun set-exec-path-from-shell-PATH () \"This is particularly useful under Mac OS X and macOS.\" (interactive) (let ((path-from-shell (replace-regexp-in-string \"[ \\t\\n]*$\" \"\" (shell-command-to-string \"$SHELL --login -c 'echo $PATH'\")))) (setenv \"PATH\" path-from-shell) (setq exec-path (split-string path-from-shell path-separator)))) (set-exec-path-from-shell-PATH) (require 'cl-lib) (defun add-subdirs-to-load-path (search-dir) (interactive) (let* ((dir (file-name-as-directory search-dir))) (dolist (subdir ;; 过滤出不必要的目录，提升Emacs启动速度 (cl-remove-if #'(lambda (subdir) (or ;; 不是目录的文件都移除 (not (file-directory-p (concat dir subdir))) ;; 父目录、 语言相关和版本控制目录都移除 (member subdir '(\".\" \"..\" \"dist\" \"node_modules\" \"__pycache__\" \"RCS\" \"CVS\" \"rcs\" \"cvs\" \".git\" \".github\")))) (directory-files dir))) (let ((subdir-path (concat dir (file-name-as-directory subdir)))) ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度 (when (cl-some #'(lambda (subdir-file) (and (file-regular-p (concat subdir-path subdir-file)) ;; .so .dll 文件指非Elisp语言编写的Emacs动态库 (member (file-name-extension subdir-file) '(\"el\" \"so\" \"dll\")))) (directory-files subdir-path)) ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾 ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动 (add-to-list 'load-path subdir-path t)) ;; 继续递归搜索子目录 (add-subdirs-to-load-path subdir-path))))) (add-subdirs-to-load-path \"~/.emacs.d/packages\") ;; (add-to-list 'load-path \"~/.emacs.d/packages\") ","date":"2023-02-26","objectID":"/posts/emacs/:3:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#path"},{"categories":null,"content":"Utility Hooks and Functions这个 ajgrf/on.el: Hooks for faster Emacs startup – GitHub mirror 增加了一些有用的 hook，可以控制包的启动时机。 更多参见：emacs-magus. (use-package on) ","date":"2023-02-26","objectID":"/posts/emacs/:3:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#utility-hooks-and-functions"},{"categories":null,"content":"Variables定义一些变量，方便配置文件位置或针对特定系统进行相关设定。 (defvar my-cloud \"~/Nextcloud\" \"This folder is My cloud.\") ;; L.Personal.Galaxy location may change, but folders in this directory never change. (defvar my-galaxy (expand-file-name \"L.Personal.Galaxy\" my-cloud) \"This folder stores all the plain text files of my life.\") (defvar website-directory \"~/Nextcloud/L.Personal.Galaxy/website\" \"The source folder of my blog.\") https://github.com/emacscollective/no-littering, 会将一些包产生的文件集中放置到 etc 和 var 两个文件夹中，而不是散落在 user-emacs-directory 当中。 (use-package no-littering) ","date":"2023-02-26","objectID":"/posts/emacs/:3:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#variables"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil-modal-edit"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil-collection"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil-commentary"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil-surround"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#evil-embrace"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#which-key-mode"},{"categories":null,"content":"Evil modal edit在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑. 我不使用 Meow 是因为它只能在 Emacs 中使用。 也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。 evil(use-package evil :bind (:map evil-insert-state-map (\"C-e\" . move-end-of-line) (\"C-k\" . kill-line)) :hook ((after-init . evil-mode) (after-change-major-mode . (lambda () (setq-local evil-shift-width tab-width)))) :init (setq evil-want-keybinding nil) :config (setq evil-undo-system 'undo-fu) (setq evil-respect-visual-line-mode t) (setq evil-visual-state-cursor 'hollow) (setq evil-normal-state-tag \" 𝐍 \") (setq evil-insert-state-tag \" 𝐈 \") (setq evil-motion-state-tag \" 𝐌 \") (setq evil-visual-state-tag \" 𝐕 \") (setq evil-replace-state-tag \" 𝐑 \") (setq evil-operator-state-tag \" O \") (setq evil-emacs-state-tag \" E \")) 下面的配置来源：emacs.d/init-evil.el at master · redguardtoo/emacs.d evil-collectionemacs-evil/evil-collection: A set of keybindings for evil-mode 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR. 我使用 SPC 作为 leader key, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 evil-collection-key-blacklist 禁用 SPC 键。 ;; (with-eval-after-load 'evil ;; (evil-collection-init)) (use-package evil-collection :after evil :config (setq evil-collection-key-blacklist '(\"SPC\" \",\")) (setq forge-add-default-bindings nil) (evil-collection-init)) evil-commentarylinktohack/evil-commentary: Comment stuff out. A port of vim-commentary 通过使用 gcc 添加注释，在 Mac 上可以通过使用 s-/ 进行。 (use-package evil-commentary :hook (on-first-file . evil-commentary-mode)) evil-surroundemacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer) 可以在指定的区域添加成对的符号，具体使用参见以上页面。 具体的使用是对于 visual 状态，使用 S = 来插入成对的等于号，其他的符号同理。若要修改的话，使用 cs = * 来将等于号改为星号，其他的符号同理。 (use-package evil-surround :hook (on-first-file . global-evil-surround-mode)) evil-embracecute-jumper/evil-embrace.el: Evil integration of embrace.el 具有和 evil-surround 相似的功能。 (use-package evil-embrace :hook ((org-mode . embrace-org-mode-hook)) :config (evil-embrace-enable-evil-surround-integration)) which-key-modejustbur/emacs-which-key: Emacs package that displays available keybindings in popup 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。 (use-package which-key :hook (on-first-input . which-key-mode) :config (setq which-key-show-early-on-C-h t) (setq which-key-idle-delay 10000) (setq which-key-idle-secondary-delay 0.05)) generalnoctuid/general.el: More convenient key definitions in emacs 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。 具体的使用方式见 package 的 README 文件。 (use-package general :config (general-create-definer my/space-leader-def :prefix \"SPC\" :non-normal-prefix \"M-SPC\" :states '(normal visual insert emacs)) (general-create-definer my/comma-leader-def :prefix \",\" :non-normal-prefix \"M-,\" :states '(normal visual insert emacs))) (defun my/emacs-config () \"My literate Emacs configuration.\" (interactive) (find-file (expand-file-name \"emacs.org\" user-emacs-directory))) (my/space-leader-def \"f\" '(:ignore t :wk \"Files\") \"fi\" '(my/emacs-config :wk \"Emacs configuration\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#general"},{"categories":null,"content":"epkg(use-package epkg :commands (epkg-describe-package)) (my/space-leader-def \"p\" '(:ignore t :wk \"Package management\") \"pp\" '(epkg-describe-package :wk \"Epkg describe package\")) (use-package epkg-marginalia :after (epkg marginalia) :config (cl-pushnew 'epkg-marginalia-annotate-package (alist-get 'package marginalia-annotator-registry))) ","date":"2023-02-26","objectID":"/posts/emacs/:3:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#epkg"},{"categories":null,"content":"auto-saveauto-save/auto-save.el at master · manateelazycat/auto-save 我使用这个包进行文件的自动保存，Emacs 自带 `auto-save-visited-mode’, 但是没有 auto-save 这个包好用。 主要的问题是 auto-save-visited-mode 在 org-capture 当中不能关闭自动删除空格。 (use-package auto-save :hook (on-first-file . auto-save-enable) :config (setq auto-save-silent t) (setq auto-save-delete-trailing-whitespace t)) ","date":"2023-02-26","objectID":"/posts/emacs/:3:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#auto-save"},{"categories":null,"content":"Auto tangle使用 Literate programming 配置 Emacs 文件，使用它可以不用手动 tangle，文件保存后自动执行。 (use-package org-auto-tangle :hook (org-mode . org-auto-tangle-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:3:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#auto-tangle"},{"categories":null,"content":"Server启用 Server 后可以使用 emacsclient 打开文件进行编辑，而不是新开一个 Emacs. 在 Mac 上使用 emacsclient 需要通过 automator 创建一个 application. 新建一个 run shell script 填入以下的内容。 /opt/homebrew/bin/emacsclient -n -a -c \"$@\" (use-package server :hook (on-first-input . server-start) :config (defun my/start-server () (interactive) (if (not (server-running-p)) (server-start)) (message \"Server has started\"))) iqbalansari/restart-emacs: A simple emacs package to restart emacs from within emacs Emacs 29 中 restart-emacs 己是 builtin function。 (my/space-leader-def \"q\" '(:ignore t :wk \"Quit/Restart\") \"qR\" '(restart-emacs :wk \"Restart emacs\") \"qq\" '(server-force-delete :wk \"Server Delete\") \"qs\" '(my/start-server :wk \"Server Delete\")) ","date":"2023-02-26","objectID":"/posts/emacs/:3:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#server"},{"categories":null,"content":"Magitmagit/magit: It’s Magit! A Git Porcelain inside Emacs. 是 Emacs 上的一大杀器应用，相对于命令行的方式使用 git 友好的很多。 通过 borg 安装 Magit 需要增加两行 load-path 的配置。使用时通过 C-x g 即可调用 Magit. [submodule \"magit\"] path = lib/magit url = git@github.com:magit/magit.git load-path = . load-path = ./lisp (use-package magit :commands (magit magit-status magit-submodule-add) :bind (\"C-x g\" . magit) :general (:keymaps 'with-editor-mode-map \"RET\" \"C-c C-c\") :hook (magit-status-mode . hide-mode-line-mode) :config (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) (use-package forge :after magit) browse-at-remote(use-package browse-at-remote :bind (\"C-c f b\" . browse-at-remote) :config (my/space-leader-def \"fb\" '(browse-at-remote :wk \"Browse remote\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:3:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#magit"},{"categories":null,"content":"Magitmagit/magit: It’s Magit! A Git Porcelain inside Emacs. 是 Emacs 上的一大杀器应用，相对于命令行的方式使用 git 友好的很多。 通过 borg 安装 Magit 需要增加两行 load-path 的配置。使用时通过 C-x g 即可调用 Magit. [submodule \"magit\"] path = lib/magit url = git@github.com:magit/magit.git load-path = . load-path = ./lisp (use-package magit :commands (magit magit-status magit-submodule-add) :bind (\"C-x g\" . magit) :general (:keymaps 'with-editor-mode-map \"RET\" \"C-c C-c\") :hook (magit-status-mode . hide-mode-line-mode) :config (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream) (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote)) (use-package forge :after magit) browse-at-remote(use-package browse-at-remote :bind (\"C-c f b\" . browse-at-remote) :config (my/space-leader-def \"fb\" '(browse-at-remote :wk \"Browse remote\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:3:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#browse-at-remote"},{"categories":null,"content":"Custom(setq custom-file (locate-user-emacs-file \"custom.el\")) (when (file-exists-p custom-file) (load custom-file)) ","date":"2023-02-26","objectID":"/posts/emacs/:3:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#custom"},{"categories":null,"content":"Emacs User Interface, Delicious","date":"2023-02-26","objectID":"/posts/emacs/:4:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#emacs-user-interface-delicious"},{"categories":null,"content":"FontsInsevka Fixed 和 Source Han Serif SC 这两个字体等宽，在 org-mode 中可以对齐表格。 尝试过 variable-pitch-mode 和 fixed-pitch-mode, 不好用。 不设置 charset，在 MacOS 上默认使用 PingFanc SC 字体，看起来也可以。 (set-face-attribute 'default nil :font \"Iosevka Fixed\" :height 160) (if (display-graphic-p) (dolist (charset '(kana han cjk-misc bopomofo)) (set-fontset-font (frame-parameter nil 'font) charset (font-spec :family \"Source Han Serif SC\" :height 160)) t 'prepend)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#fonts"},{"categories":null,"content":"Themes当前内置的 Modus-themes 主题看起来很好，I like it. (use-package modus-themes :config (setq modus-themes-bold-constructs t) (setq modus-themes-italic-constructs t) (setq modus-themes-common-palette-overrides '(;; mode-line (border-mode-line-active unspecified) (border-mode-line-inactive unspecified) (bg-mode-line-active bg-main) (fg-mode-line-active fg-main) ;; line-number (fg-line-number-inactive \"gray50\") (fg-line-number-active red-cooler) (bg-line-number-inactive unspecified) (bg-line-number-active unspecified) ;; link (underline-link border) (underline-link-visited border) (underline-link-symbolic border) ;; org agenda (date-common cyan) ; default value (for timestamps and more) (date-deadline red-warmer) (date-event magenta-warmer) (date-holiday blue) ; for M-x calendar (date-now yellow-warmer) (date-scheduled magenta-cooler) (date-weekday cyan-cooler) (date-weekend blue-faint) ;; org heading (fg-heading-1 blue-warmer) (fg-heading-2 yellow-cooler) (fg-heading-3 cyan-cooler))) (setq modus-themes-prompts '(extrabold italic)) (setq modus-themes-completions '((matches . (extrabold)) (selection . (semibold italic text-also))))) Theme switchemacs-plus can switch themes by system. 通过增加的补定实现的此功能，若是不使用这种方法，还有 auto-dark-emacs 可以使用。 使用 mclear-tools/build-emacs-macos: Build script for emacs and macos 自编译 Emacs 也有改变主题的 patch. (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2023-02-26","objectID":"/posts/emacs/:4:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#themes"},{"categories":null,"content":"Themes当前内置的 Modus-themes 主题看起来很好，I like it. (use-package modus-themes :config (setq modus-themes-bold-constructs t) (setq modus-themes-italic-constructs t) (setq modus-themes-common-palette-overrides '(;; mode-line (border-mode-line-active unspecified) (border-mode-line-inactive unspecified) (bg-mode-line-active bg-main) (fg-mode-line-active fg-main) ;; line-number (fg-line-number-inactive \"gray50\") (fg-line-number-active red-cooler) (bg-line-number-inactive unspecified) (bg-line-number-active unspecified) ;; link (underline-link border) (underline-link-visited border) (underline-link-symbolic border) ;; org agenda (date-common cyan) ; default value (for timestamps and more) (date-deadline red-warmer) (date-event magenta-warmer) (date-holiday blue) ; for M-x calendar (date-now yellow-warmer) (date-scheduled magenta-cooler) (date-weekday cyan-cooler) (date-weekend blue-faint) ;; org heading (fg-heading-1 blue-warmer) (fg-heading-2 yellow-cooler) (fg-heading-3 cyan-cooler))) (setq modus-themes-prompts '(extrabold italic)) (setq modus-themes-completions '((matches . (extrabold)) (selection . (semibold italic text-also))))) Theme switchemacs-plus can switch themes by system. 通过增加的补定实现的此功能，若是不使用这种方法，还有 auto-dark-emacs 可以使用。 使用 mclear-tools/build-emacs-macos: Build script for emacs and macos 自编译 Emacs 也有改变主题的 patch. (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2023-02-26","objectID":"/posts/emacs/:4:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#theme-switch"},{"categories":null,"content":"all-the-icons这里使用了domtronn/all-the-icons.el: A utility package to collect various Icon Fonts and propertize them within Emacs. 需要自己执行 all-the-icons-install-fonts 来安装对应的字体。 (set-fontset-font t 'unicode (font-spec :family \"Material Icons\") nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"file-icons\") nil 'prepend) 这部份的配置来源：seagle0128/.emacs.d: Centaur Emacs - A Fancy and Fast Emacs Configuration (use-package all-the-icons :config (let ((extension-icon-alist '((\"bat\" all-the-icons-alltheicon \"terminal\" :face all-the-icons-lsilver) (\"cmd\" all-the-icons-alltheicon \"terminal\" :face all-the-icons-lsilver) (\"conf\" all-the-icons-octicon \"settings\" :v-adjust 0.0 :face all-the-icons-yellow) (\"eln\" all-the-icons-octicon \"file-binary\" :v-adjust 0.0 :face all-the-icons-dsilver) (\"epub\" all-the-icons-faicon \"book\" :height 1.0 :v-adjust -0.1 :face all-the-icons-green) (\"exe\" all-the-icons-octicon \"file-binary\" :v-adjust 0.0 :face all-the-icons-dsilver) (\"make\" all-the-icons-fileicon \"gnu\" :face all-the-icons-dorange) (\"rss\" all-the-icons-octicon \"rss\" :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange) (\"toml\" all-the-icons-octicon \"settings\" :v-adjust 0.0 :face all-the-icons-yellow) (\"tsx\" all-the-icons-fileicon \"tsx\" :height 1.0 :v-adjust -0.1 :face all-the-icons-cyan-alt) (\"xpm\" all-the-icons-octicon \"file-media\" :v-adjust 0.0 :face all-the-icons-dgreen)))) (dolist (icon extension-icon-alist) (add-to-list 'all-the-icons-extension-icon-alist icon))) (let ((regexp-icon-alist '((\"\\\\.[bB][iI][nN]$\" all-the-icons-octicon \"file-binary\" :v-adjust 0.0 :face all-the-icons-yellow) (\"^config$\" all-the-icons-octicon \"settings\" :v-adjust 0.0 :face all-the-icons-dorange) (\"\\\\.\\\\(ba\\\\|z\\\\)shrc$\" all-the-icons-alltheicon \"script\" :height 0.9 :face all-the-icons-dpink) (\"\\\\.\\\\(bash\\\\|zsh\\\\)*_?profile$\" all-the-icons-alltheicon \"script\" :height 0.9 :face all-the-icons-dred) (\"\\\\.\\\\(ba\\\\|z\\\\)sh_history$\" all-the-icons-alltheicon \"script\" :height 0.9 :face all-the-icons-dsilver) (\"\\\\.zshenv$\" all-the-icons-alltheicon \"script\" :height 0.9 :face all-the-icons-dred) (\"Cask\\\\'\" all-the-icons-fileicon \"elisp\" :height 1.0 :v-adjust -0.2 :face all-the-icons-blue) (\"NEWS$\" all-the-icons-faicon \"newspaper-o\" :height 0.9 :v-adjust -0.2) (\"^Rakefile$\" all-the-icons-alltheicon \"ruby-alt\" :face all-the-icons-red)))) (dolist (icon regexp-icon-alist) (add-to-list 'all-the-icons-regexp-icon-alist icon))) (let ((mode-icon-alist '((xwidget-webkit-mode all-the-icons-faicon \"chrome\" :v-adjust -0.1 :face all-the-icons-blue) (bongo-playlist-mode all-the-icons-material \"queue_music\" :height 1.3 :face all-the-icons-green) (bongo-library-mode all-the-icons-material \"library_music\" :height 1.1 :face all-the-icons-green) (simple-mpc-mode all-the-icons-faicon \"music\" :v-adjust -0.1 :face all-the-icons-green) (mingus-playlist-mode all-the-icons-faicon \"music\" :v-adjust -0.1 :face all-the-icons-green) (mingus-help-mode all-the-icons-material \"music_note\" :height 1.2 :face all-the-icons-green) (mingus-browse-mode all-the-icons-material \"library_music\" :height 1.1 :face all-the-icons-green) (mingus-burn-mode all-the-icons-material \"queue_music\" :height 1.3 :face all-the-icons-green) (gnus-group-mode all-the-icons-fileicon \"gnu\" :face all-the-icons-silver) (gnus-summary-mode all-the-icons-octicon \"inbox\" :height 1.0 :v-adjust 0.0 :face all-the-icons-orange) (gnus-article-mode all-the-icons-octicon \"mail\" :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue) (message-mode all-the-icons-octicon \"mail\" :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue) (diff-mode all-the-icons-octicon \"git-compare\" :v-adjust 0.0 :face all-the-icons-lred) (flycheck-error-list-mode all-the-icons-octicon \"checklist\" :height 1.1 :v-adjust 0.0 :face all-the-icons-lred) (newsticker-mode all-the-icons-faicon \"rss-square\" :v-adjust -0.1 :face all-the-icons-orange) (newsticker-treeview-mode all-the-icons-faicon \"rss-square\" :v-adjust -0.1 :face all-the-icons-orange) (newsticker-treeview-list-mode all-t","date":"2023-02-26","objectID":"/posts/emacs/:4:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#all-the-icons"},{"categories":null,"content":"fringe-mode因为我要使用 org-transclusion, 所以不能默认不显示 fringe. 将其设置为最小模式。 fringe-mode 需要跟一个 cons cell, 直接使用 minimal 会报错。 (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) (fringe-mode '(1 . 1)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#fringe-mode"},{"categories":null,"content":"hl-line-mode高亮当前行，全局开启使用 global-hl-line-mode. 不使用 global-hl-line-mode 因为不想在 dashboard 中开启行高亮。 (add-hook 'prog-mode-hook 'hl-line-mode) (add-hook 'org-mode-hook 'hl-line-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:4:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#hl-line-mode"},{"categories":null,"content":"line numbers(setq-default display-line-numbers-widen t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) (add-hook 'org-mode-hook 'display-line-numbers-mode) (add-hook 'LaTeX-mode-hook 'display-line-numbers-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:4:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#line-numbers"},{"categories":null,"content":"scroll-bar-mode(scroll-bar-mode 0) ","date":"2023-02-26","objectID":"/posts/emacs/:4:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#scroll-bar-mode"},{"categories":null,"content":"fill column indicator(setq-default fill-column 90) (face-spec-set 'fill-column-indicator '((default :height 0.1)) 'face-override-spec) ;; only show fill indicator in prog mode. (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:4:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#fill-column-indicator"},{"categories":null,"content":"Paren显示对应的括号，这个在 elisp 中挺友好。 (setq show-paren-style 'parenthesis) (setq show-paren-context-when-offscreen 'overlay) (add-hook 'text-mode-hook 'show-paren-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:4:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#paren"},{"categories":null,"content":"Cursor and color默认关闭光标闪烁。 (blink-cursor-mode -1) 使用 Evil，通过光标的颜色来提示当前的输入法状态，结合使用三码郑码 / 至至郑码 （至简·至爱）zhengma.plus 输入法，具有很好的使用体验，相当的明确感。 关于光标自动更换颜色，这里有个包可以使用：Eason0210/im-cursor-chg. (defun im--chinese-p () \"Check if the current input state is Chinese.\" (if (featurep 'rime) (and (rime--should-enable-p) (not (rime--should-inline-ascii-p)) current-input-method) current-input-method)) (defun im-change-cursor-color () \"Set cursor color depending on input method.\" (interactive) (set-cursor-color (if (im--chinese-p) \"red\" (foreground-color-at-point)))) (add-hook 'post-command-hook 'im-change-cursor-color) 切换输入法时自动更换光标颜色 - Emacs-general - Emacs China 提到了 post-command-hook 的开销比较大，调用频繁。 使用 evil 内置的 hook 也可以达到切换光标颜色的功能，同时避免 post-command-hook 的巨大开销。 (defun im--chinese-p () \"Check if the current input state is Chinese.\" (if (featurep 'rime) (and (rime--should-enable-p) (not (rime--should-inline-ascii-p)) current-input-method) current-input-method)) (add-hook 'evil-insert-state-entry-hook (lambda () (when (im--chinese-p) (set-cursor-color \"red\")))) (add-hook 'evil-insert-state-exit-hook (lambda () (set-cursor-color (foreground-color-at-point)))) ","date":"2023-02-26","objectID":"/posts/emacs/:4:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#cursor-and-color"},{"categories":null,"content":"Frame窗口透明，更多见：Emacs 透明窗口 - Emacs-general - Emacs China (set-frame-parameter nil 'alpha '(100 . 100)) 在 MacOS 上新建的 frame 总是位于屏幕的左上角。解决方案：Automatically Center New Emacs Windows (Aka Frames) on Screen • Christian Tietze. (defun ct/frame-center (\u0026optional frame) \"Center a frame on the screen.\" (interactive) (let* ((frame (or (and (boundp 'frame) frame) (selected-frame))) (center (ct/frame-get-center frame))) (apply 'set-frame-position (flatten-list (list frame center))))) (defun ct/screen-usable-height (\u0026optional display) \"Return the usable height of the display. Some window-systems have portions of the screen which Emacs cannot address. This function should return the height of the screen, minus anything which is not usable.\" (- (display-pixel-height display) (cond ((eq window-system 'ns) 22) ;; macOS Menu Bar offset (t 0)))) (defun ct/screen-usable-width (\u0026optional display) \"Return the usable width of the display.\" (display-pixel-width display)) (defun ct/center-box (w h cw ch) \"Center a box inside another box. Returns a list of `(TOP LEFT)' representing the centered position of the box `(w h)' inside the box `(cw ch)'.\" (list (/ (- cw w) 2) (/ (- ch h) 2))) (defun ct/frame-get-center (frame) \"Return the center position of FRAME on it's display.\" (let ((disp (frame-parameter frame 'display))) (ct/center-box (frame-pixel-width frame) (frame-pixel-height frame) (ct/screen-usable-width disp) (ct/screen-usable-height disp)))) (defun ct/frame-center (\u0026optional frame) \"Center a frame on the screen.\" (interactive) (apply 'set-frame-position (let* ((frame (or (and (boundp 'frame) frame) (selected-frame))) (center (ct/frame-get-center frame))) ;; Flatten the X/Y list in `center` into a single list with `frame` ;; so this list can be applied as parameters to `set-frame-position`: `(,frame ,@center)))) (add-to-list 'after-make-frame-functions #'ct/frame-center 0) 默认的 make-frame 的按键是 s-n, 使用修改的函数实现了同一个按键，两种形为。我默认的 frame 是全屏使用，只在少数时候使用 make-frame 的功能。 (defun my/make-or-delete-frame () (interactive) (if (= (frame-width) 80) ;; 80 is the default frame width. (delete-frame) (make-frame))) (global-set-key (kbd \"s-n\") 'my/make-or-delete-frame) ","date":"2023-02-26","objectID":"/posts/emacs/:4:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#frame"},{"categories":null,"content":"modelinemode-line-format2023-01-30 发现 doom-modeline 总是在不停的 redisplay_internal ，需要消耗较多的资源。所以暂时禁用此包，通过自定义 mode-line-format 来配置 modeline。 210 56% + command-execute 94 25% + ... 62 16% - redisplay_internal (C function) 61 16% - eval 51 13% + doom-modeline-segment--buffer-info 9 2% + doom-modeline-format--main 1 0% + doom-modeline-segment--modals mode line - How to right align some items in the modeline? - Emacs Stack Exchange 以下的函数来自上面的链接中的回答，使用 string-width 替代了 length ，否则在对含有中文的 heading 进行 org-clock 的时候，会导致超出 mode-line 只显示部份的 heading。 2023-02-01 Emacs 29 上使用 string-pixel-width 替代 string-width ，可以获得象素级对齐。 (defun my/mode-line-padding () (let* ((r-length (string-width (format-mode-line global-mode-string)))) (propertize \" \" 'display `(space :align-to (- right ,(+ r-length 1)))))) (add-to-list 'global-mode-string '(:eval (propertize (concat \"𝚻𝚨𝚩 \" (number-to-string (tab-bar--current-tab-index)) \": \" (alist-get 'group (tab-bar--current-tab))) 'face 'font-lock-constant-face))) (setq mode-line-end-spaces '(\"\" global-mode-string)) (setq mode-line-position-column-line-format '(\" %l,%c\")) (setq mode-line-percent-position '(-4 \"%p\")) (setq-default mode-line-format `(\"%e\" mode-line-front-space (:propertize (\"\" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)) mode-line-frame-identification mode-line-buffer-identification mode-line-position ;; (:eval (propertize \" %I \" 'face 'font-lock-constant-face)) \" \" (vc-mode vc-mode) (:eval (when buffer-read-only (concat \" \" (propertize \"RO\" 'face 'font-lock-type-face 'help-echo \"Buffer is read-only\")))) (:eval (my/mode-line-padding)) mode-line-end-spaces)) 上式中的 %e 等说明如下：emacs-fu: customizing the mode-line. %b – print buffer name. %f – print visited file name. %F – print frame name. %* – print %, * or hyphen. %+ – print , % or hyphen. %\u0026 is like %, but ignore read-only-ness. % means buffer is read-only and * means it is modified. For a modified read-only buffer, %* gives % and %+ gives *. %s – print process status. %l – print the current line number. %c – print the current column number (this makes editing slower). To make the column number update correctly in all cases, `column-number-mode’ must be non-nil. %i – print the size of the buffer. %I – like %i, but use k, M, G, etc., to abbreviate. %p – print percent of buffer above top of window, or Top, Bot or All. %P – print percent of buffer above bottom of window, perhaps plus Top, or print Bottom or All. %n – print Narrow if appropriate. %t – visited file is text or binary (if OS supports this distinction). %z – print mnemonics of keyboard, terminal, and buffer coding systems. %Z – like %z, but including the end-of-line format. %e – print error message about full memory. %@ – print @ or hyphen. @ means that default-directory is on a remote machine. %[ – print one [ for each recursive editing level. %] similar. %% – print %. %- – print infinitely many dashes. Decimal digits after the % specify field width to which to pad. hide-mode-linehlissner/emacs-hide-mode-line: An Emacs plugin that hides (or masks) the current buffer’s mode-line 在有些情况下需要隐藏对应 buffer 的 modeline. (use-package hide-mode-line :config ;;:hook (dashboard-mode . hide-mode-line-mode) (add-hook 'dashboard-mode-hook 'hide-mode-line-mode) (if (string= (buffer-name) \"*scratch*\") (hide-mode-line-mode))) mode-line-bellpurcell/mode-line-bell: Flash the Emacs mode line instead of ringing the bell 如题。 (use-package mode-line-bell :hook (on-first-buffer . mode-line-bell-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#modeline"},{"categories":null,"content":"modelinemode-line-format2023-01-30 发现 doom-modeline 总是在不停的 redisplay_internal ，需要消耗较多的资源。所以暂时禁用此包，通过自定义 mode-line-format 来配置 modeline。 210 56% + command-execute 94 25% + ... 62 16% - redisplay_internal (C function) 61 16% - eval 51 13% + doom-modeline-segment--buffer-info 9 2% + doom-modeline-format--main 1 0% + doom-modeline-segment--modals mode line - How to right align some items in the modeline? - Emacs Stack Exchange 以下的函数来自上面的链接中的回答，使用 string-width 替代了 length ，否则在对含有中文的 heading 进行 org-clock 的时候，会导致超出 mode-line 只显示部份的 heading。 2023-02-01 Emacs 29 上使用 string-pixel-width 替代 string-width ，可以获得象素级对齐。 (defun my/mode-line-padding () (let* ((r-length (string-width (format-mode-line global-mode-string)))) (propertize \" \" 'display `(space :align-to (- right ,(+ r-length 1)))))) (add-to-list 'global-mode-string '(:eval (propertize (concat \"𝚻𝚨𝚩 \" (number-to-string (tab-bar--current-tab-index)) \": \" (alist-get 'group (tab-bar--current-tab))) 'face 'font-lock-constant-face))) (setq mode-line-end-spaces '(\"\" global-mode-string)) (setq mode-line-position-column-line-format '(\" %l,%c\")) (setq mode-line-percent-position '(-4 \"%p\")) (setq-default mode-line-format `(\"%e\" mode-line-front-space (:propertize (\"\" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)) mode-line-frame-identification mode-line-buffer-identification mode-line-position ;; (:eval (propertize \" %I \" 'face 'font-lock-constant-face)) \" \" (vc-mode vc-mode) (:eval (when buffer-read-only (concat \" \" (propertize \"RO\" 'face 'font-lock-type-face 'help-echo \"Buffer is read-only\")))) (:eval (my/mode-line-padding)) mode-line-end-spaces)) 上式中的 %e 等说明如下：emacs-fu: customizing the mode-line. %b – print buffer name. %f – print visited file name. %F – print frame name. %* – print %, * or hyphen. %+ – print , % or hyphen. %\u0026 is like %, but ignore read-only-ness. % means buffer is read-only and * means it is modified. For a modified read-only buffer, %* gives % and %+ gives *. %s – print process status. %l – print the current line number. %c – print the current column number (this makes editing slower). To make the column number update correctly in all cases, `column-number-mode’ must be non-nil. %i – print the size of the buffer. %I – like %i, but use k, M, G, etc., to abbreviate. %p – print percent of buffer above top of window, or Top, Bot or All. %P – print percent of buffer above bottom of window, perhaps plus Top, or print Bottom or All. %n – print Narrow if appropriate. %t – visited file is text or binary (if OS supports this distinction). %z – print mnemonics of keyboard, terminal, and buffer coding systems. %Z – like %z, but including the end-of-line format. %e – print error message about full memory. %@ – print @ or hyphen. @ means that default-directory is on a remote machine. %[ – print one [ for each recursive editing level. %] similar. %% – print %. %- – print infinitely many dashes. Decimal digits after the % specify field width to which to pad. hide-mode-linehlissner/emacs-hide-mode-line: An Emacs plugin that hides (or masks) the current buffer’s mode-line 在有些情况下需要隐藏对应 buffer 的 modeline. (use-package hide-mode-line :config ;;:hook (dashboard-mode . hide-mode-line-mode) (add-hook 'dashboard-mode-hook 'hide-mode-line-mode) (if (string= (buffer-name) \"*scratch*\") (hide-mode-line-mode))) mode-line-bellpurcell/mode-line-bell: Flash the Emacs mode line instead of ringing the bell 如题。 (use-package mode-line-bell :hook (on-first-buffer . mode-line-bell-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#mode-line-format"},{"categories":null,"content":"modelinemode-line-format2023-01-30 发现 doom-modeline 总是在不停的 redisplay_internal ，需要消耗较多的资源。所以暂时禁用此包，通过自定义 mode-line-format 来配置 modeline。 210 56% + command-execute 94 25% + ... 62 16% - redisplay_internal (C function) 61 16% - eval 51 13% + doom-modeline-segment--buffer-info 9 2% + doom-modeline-format--main 1 0% + doom-modeline-segment--modals mode line - How to right align some items in the modeline? - Emacs Stack Exchange 以下的函数来自上面的链接中的回答，使用 string-width 替代了 length ，否则在对含有中文的 heading 进行 org-clock 的时候，会导致超出 mode-line 只显示部份的 heading。 2023-02-01 Emacs 29 上使用 string-pixel-width 替代 string-width ，可以获得象素级对齐。 (defun my/mode-line-padding () (let* ((r-length (string-width (format-mode-line global-mode-string)))) (propertize \" \" 'display `(space :align-to (- right ,(+ r-length 1)))))) (add-to-list 'global-mode-string '(:eval (propertize (concat \"𝚻𝚨𝚩 \" (number-to-string (tab-bar--current-tab-index)) \": \" (alist-get 'group (tab-bar--current-tab))) 'face 'font-lock-constant-face))) (setq mode-line-end-spaces '(\"\" global-mode-string)) (setq mode-line-position-column-line-format '(\" %l,%c\")) (setq mode-line-percent-position '(-4 \"%p\")) (setq-default mode-line-format `(\"%e\" mode-line-front-space (:propertize (\"\" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)) mode-line-frame-identification mode-line-buffer-identification mode-line-position ;; (:eval (propertize \" %I \" 'face 'font-lock-constant-face)) \" \" (vc-mode vc-mode) (:eval (when buffer-read-only (concat \" \" (propertize \"RO\" 'face 'font-lock-type-face 'help-echo \"Buffer is read-only\")))) (:eval (my/mode-line-padding)) mode-line-end-spaces)) 上式中的 %e 等说明如下：emacs-fu: customizing the mode-line. %b – print buffer name. %f – print visited file name. %F – print frame name. %* – print %, * or hyphen. %+ – print , % or hyphen. %\u0026 is like %, but ignore read-only-ness. % means buffer is read-only and * means it is modified. For a modified read-only buffer, %* gives % and %+ gives *. %s – print process status. %l – print the current line number. %c – print the current column number (this makes editing slower). To make the column number update correctly in all cases, `column-number-mode’ must be non-nil. %i – print the size of the buffer. %I – like %i, but use k, M, G, etc., to abbreviate. %p – print percent of buffer above top of window, or Top, Bot or All. %P – print percent of buffer above bottom of window, perhaps plus Top, or print Bottom or All. %n – print Narrow if appropriate. %t – visited file is text or binary (if OS supports this distinction). %z – print mnemonics of keyboard, terminal, and buffer coding systems. %Z – like %z, but including the end-of-line format. %e – print error message about full memory. %@ – print @ or hyphen. @ means that default-directory is on a remote machine. %[ – print one [ for each recursive editing level. %] similar. %% – print %. %- – print infinitely many dashes. Decimal digits after the % specify field width to which to pad. hide-mode-linehlissner/emacs-hide-mode-line: An Emacs plugin that hides (or masks) the current buffer’s mode-line 在有些情况下需要隐藏对应 buffer 的 modeline. (use-package hide-mode-line :config ;;:hook (dashboard-mode . hide-mode-line-mode) (add-hook 'dashboard-mode-hook 'hide-mode-line-mode) (if (string= (buffer-name) \"*scratch*\") (hide-mode-line-mode))) mode-line-bellpurcell/mode-line-bell: Flash the Emacs mode line instead of ringing the bell 如题。 (use-package mode-line-bell :hook (on-first-buffer . mode-line-bell-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#hide-mode-line"},{"categories":null,"content":"modelinemode-line-format2023-01-30 发现 doom-modeline 总是在不停的 redisplay_internal ，需要消耗较多的资源。所以暂时禁用此包，通过自定义 mode-line-format 来配置 modeline。 210 56% + command-execute 94 25% + ... 62 16% - redisplay_internal (C function) 61 16% - eval 51 13% + doom-modeline-segment--buffer-info 9 2% + doom-modeline-format--main 1 0% + doom-modeline-segment--modals mode line - How to right align some items in the modeline? - Emacs Stack Exchange 以下的函数来自上面的链接中的回答，使用 string-width 替代了 length ，否则在对含有中文的 heading 进行 org-clock 的时候，会导致超出 mode-line 只显示部份的 heading。 2023-02-01 Emacs 29 上使用 string-pixel-width 替代 string-width ，可以获得象素级对齐。 (defun my/mode-line-padding () (let* ((r-length (string-width (format-mode-line global-mode-string)))) (propertize \" \" 'display `(space :align-to (- right ,(+ r-length 1)))))) (add-to-list 'global-mode-string '(:eval (propertize (concat \"𝚻𝚨𝚩 \" (number-to-string (tab-bar--current-tab-index)) \": \" (alist-get 'group (tab-bar--current-tab))) 'face 'font-lock-constant-face))) (setq mode-line-end-spaces '(\"\" global-mode-string)) (setq mode-line-position-column-line-format '(\" %l,%c\")) (setq mode-line-percent-position '(-4 \"%p\")) (setq-default mode-line-format `(\"%e\" mode-line-front-space (:propertize (\"\" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)) mode-line-frame-identification mode-line-buffer-identification mode-line-position ;; (:eval (propertize \" %I \" 'face 'font-lock-constant-face)) \" \" (vc-mode vc-mode) (:eval (when buffer-read-only (concat \" \" (propertize \"RO\" 'face 'font-lock-type-face 'help-echo \"Buffer is read-only\")))) (:eval (my/mode-line-padding)) mode-line-end-spaces)) 上式中的 %e 等说明如下：emacs-fu: customizing the mode-line. %b – print buffer name. %f – print visited file name. %F – print frame name. %* – print %, * or hyphen. %+ – print , % or hyphen. %\u0026 is like %, but ignore read-only-ness. % means buffer is read-only and * means it is modified. For a modified read-only buffer, %* gives % and %+ gives *. %s – print process status. %l – print the current line number. %c – print the current column number (this makes editing slower). To make the column number update correctly in all cases, `column-number-mode’ must be non-nil. %i – print the size of the buffer. %I – like %i, but use k, M, G, etc., to abbreviate. %p – print percent of buffer above top of window, or Top, Bot or All. %P – print percent of buffer above bottom of window, perhaps plus Top, or print Bottom or All. %n – print Narrow if appropriate. %t – visited file is text or binary (if OS supports this distinction). %z – print mnemonics of keyboard, terminal, and buffer coding systems. %Z – like %z, but including the end-of-line format. %e – print error message about full memory. %@ – print @ or hyphen. @ means that default-directory is on a remote machine. %[ – print one [ for each recursive editing level. %] similar. %% – print %. %- – print infinitely many dashes. Decimal digits after the % specify field width to which to pad. hide-mode-linehlissner/emacs-hide-mode-line: An Emacs plugin that hides (or masks) the current buffer’s mode-line 在有些情况下需要隐藏对应 buffer 的 modeline. (use-package hide-mode-line :config ;;:hook (dashboard-mode . hide-mode-line-mode) (add-hook 'dashboard-mode-hook 'hide-mode-line-mode) (if (string= (buffer-name) \"*scratch*\") (hide-mode-line-mode))) mode-line-bellpurcell/mode-line-bell: Flash the Emacs mode line instead of ringing the bell 如题。 (use-package mode-line-bell :hook (on-first-buffer . mode-line-bell-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#mode-line-bell"},{"categories":null,"content":"rainbow-mode(use-package rainbow-mode :hook (prog-mode . rainbow-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:13","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#rainbow-mode"},{"categories":null,"content":"rainbow-delimiters(use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#rainbow-delimiters"},{"categories":null,"content":"pulse(defun pulse-line (\u0026rest _) \"Pulse the current line.\" (pulse-momentary-highlight-one-line (point))) (dolist (command '(evil-paste-after evil-paste-pop evil-paste-before evil-delete evil-delete-line)) (advice-add command :after #'pulse-line)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:15","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#pulse"},{"categories":null,"content":"dashboardDashboard 可以让启动界面看起来比 scratch 界面更 fancy, 但是会比较明显的增加启动时间，有明显的迟顿感。 Dashboard 界面的 banner 使用的是 ascii art, 可以通过 ASCII.co.uk - The home of all things ASCII 生成。 或者不使用 dashboard, 将启动界面设置成图片等，参见 如何自定义 Banner 的图案？ - Spacemacs - Emacs China. 也可以结合 EmacsWiki: Tip Of The Day. (use-package dashboard :config (setq dashboard-center-content t) (setq dashboard-set-init-info t) (setq dashboard-set-footer nil) (setq dashboard-banner-logo-title nil) (setq dashboard-heading-icons t) (dashboard-setup-startup-hook) (setq dashboard-items '((recents . 5) (bookmarks . 5) (agenda . 5) (registers . 5))) (require 'cal-china) (let* ((ny (calendar-gregorian-from-absolute (cadr (assoc 1 (calendar-chinese-year (string-to-number (format-time-string \"%Y\" (current-time)))))))) (m (string-to-number (format-time-string \"%m\" (current-time)))) (d (string-to-number (format-time-string \"%d\" (current-time))))) (if (and (= d (cadr ny)) (= m (car ny))) (setq dashboard-startup-banner (expand-file-name \"src/banner2.txt\" user-emacs-directory)) (setq dashboard-startup-banner (expand-file-name \"src/banner.txt\" user-emacs-directory))))) (with-eval-after-load 'evil (evil-define-key 'motion 'dashboard-mode-map \"gf\" 'find-file \"gb\" 'consult-buffer)) (run-with-idle-timer 300 t #'dashboard-open) ","date":"2023-02-26","objectID":"/posts/emacs/:4:16","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dashboard"},{"categories":null,"content":"color-identifiers-mode(use-package color-identifiers-mode :hook (on-first-file . global-color-identifiers-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:4:17","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#color-identifiers-mode"},{"categories":null,"content":"Powerful Emacs Equipped with Builtin PackagesEmacs 内置了很多有用的 mode, 详细内容请参考仓库：condy0919/emacs-newbie: Introduction to Emacs. 初学者可以看看。 ","date":"2023-02-26","objectID":"/posts/emacs/:5:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#powerful-emacs-equipped-with-builtin-packages"},{"categories":null,"content":"Better default(setq frame-inhibit-implied-resize t) (setq use-file-dialog nil) (setq use-dialog-box nil) (setq-default ring-bell-function 'ignore use-short-answers t read-process-output-max #x10000 message-kill-buffer-on-exit t message-kill-buffer-query nil indent-tabs-mode nil tab-width 4 make-backup-files nil create-lockfiles nil confirm-kill-processes nil confirm-kill-emacs nil recenter-redisplay nil load-prefer-newer t mark-ring-max 128 next-screen-context-lines 5 inhibit-default-init t inhibit-startup-message t inhibit-splash-screen t inhibit-compacting-font-caches t ;; inhibit-quit nil fast-but-imprecise-scrolling t scroll-preserve-screen-position t auto-save-default nil auto-save-list-file-name nil kill-do-not-save-duplicates t kill-ring-max (* kill-ring-max 2) history-delete-duplicates t view-read-only t kill-read-only-ok t async-shell-command-display-buffer nil ;; Improve the performance of rendering long lines. bidi-display-reordering nil) (setq ffap-machine-p-known 'reject) ","date":"2023-02-26","objectID":"/posts/emacs/:5:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#better-default"},{"categories":null,"content":"system coding(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) ","date":"2023-02-26","objectID":"/posts/emacs/:5:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#system-coding"},{"categories":null,"content":"profiler(add-hook 'profiler-report-mode-hook #'hl-line-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#profiler"},{"categories":null,"content":"buffer(setq switch-to-buffer-in-dedicated-window 'pop) (setq switch-to-buffer-obey-display-actions t) (my/space-leader-def \"b\" '(:ignore t :wk \"Buffer/Bibtex\") \"be\" '(eval-buffer :wk \"Eval buffer\") \"bk\" '(kill-this-buffer :wk \"Kill This Buffer\")) (with-eval-after-load 'evil (evil-define-key 'normal 'global \"gB\" 'switch-to-prev-buffer \"gb\" 'switch-to-buffer \"zx\" 'kill-current-buffer)) ","date":"2023-02-26","objectID":"/posts/emacs/:5:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#buffer"},{"categories":null,"content":"calculator(use-package calc :commands calc :hook ((clac-mode . hide-mode-line-mode) (clac-trail-mode . hide-mode-line-mode))) (my/comma-leader-def \"C\" '(calc :wk \"calc\")) ","date":"2023-02-26","objectID":"/posts/emacs/:5:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#calculator"},{"categories":null,"content":"column-number-mode作用是在 modeline 中显示当前光标竖向处的位置。 (add-hook 'prog-mode-hook 'column-number-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#column-number-mode"},{"categories":null,"content":"size-indication-mode作用是在 modeline 中显示文件的大小。 (add-hook 'find-file-hook 'size-indication-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#size-indication-mode"},{"categories":null,"content":"delete-selection-mode作用是当选中区域后输入字符会删除选中的区域，大部份软件都是这种行为。 (add-hook 'on-first-input-hook 'delete-selection-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#delete-selection-mode"},{"categories":null,"content":"winner-mode进行窗口管理。 (setq-default winner-dont-bind-my-keys t) (add-hook 'on-first-buffer-hook 'winner-mode) (setq winner-boring-buffers '(\"*Completions*\" \"*Compile-Log*\" \"*inferior-lisp*\" \"*Fuzzy Completions*\" \"*Apropos*\" \"*Help*\" \"*cvs*\" \"*Buffer List*\" \"*Ibuffer*\" \"*esh command on file*\")) (my/space-leader-def \"w\" '(:ignore t :wk \"Window\") \"wu\" '(winner-undo :wk \"Undo winner\") \"wr\" '(winner-redo :wk \"Redo winner\")) ","date":"2023-02-26","objectID":"/posts/emacs/:5:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#winner-mode"},{"categories":null,"content":"auto-revert-mode(add-hook 'on-first-file-hook 'global-auto-revert-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#auto-revert-mode"},{"categories":null,"content":"tab-bar-mode可以将 mode-line 上的一些信息显示在 tab-bar 之上。 (setq tab-bar-format '(tab-bar-format-history tab-bar-format-tabs tab-bar-format-align-right tab-bar-format-global)) (use-package tab-bar :hook (on-first-file . tab-bar-mode) :config (setq tab-bar-new-tab-choice \"*scratch*\") (setq tab-bar-close-button-show nil) (setq tab-bar-tab-hints nil) (setq tab-bar-show nil)) (use-package tabspaces :after tab-bar :hook (tab-bar-mode . tabspaces-mode) :config (setq tabspaces-session-file (expand-file-name \"tabsession.el\" no-littering-var-directory)) (setq tabspaces-use-filtered-buffers-as-default t)) (my/space-leader-def \"t\" '(:ignore t :wk \"Tabs\") \"tn\" '(tab-new :wk \"New\") \"tg\" '(tab-group :wk \"Group\") \"tr\" '(tab-bar-switch-to-recent-tab :wk \"Recent\") \"tc\" '(tab-close :wk \"Close\") \"tC\" '(tab-close-group :wk \"Close group\") \"tO\" '(tab-close-other :wk \"Close other\")) (with-eval-after-load 'evil (evil-define-key 'normal 'global \"gs\" 'tab-switch)) (add-to-list 'display-buffer-alist '((or (derived-mode . org-mode)) (display-buffer-in-tab) (tab-name . \"Org\") (tab-group . \"Org\"))) (add-to-list 'display-buffer-alist '((or (derived-mode . latex-mode) (derived-mode . LaTeX-mode)) (display-buffer-in-tab) (tab-name . \"TEX\") (tab-group . \"TEX\"))) (add-to-list 'display-buffer-alist '((or (derived-mode . dired-mode) (derived-mode . dirvish-mode)) (display-buffer-in-tab) (tab-name . \"Dired\") (tab-group . \"Dired\"))) (add-to-list 'display-buffer-alist '((derived-mode . image-mode) (display-buffer-in-tab) (tab-name . \"Pic\") (tab-group . \"Pic\"))) (add-to-list 'display-buffer-alist '((derived-mode . emacs-lisp-mode) (display-buffer-in-tab) (tab-name . \"Prog\") (tab-group . \"Prog\"))) (add-to-list 'display-buffer-alist `(,(rx (| \"*scratch*\" \"*dashboard*\" \"*elfeed-search*\" \"*mu4e-main\" \"*mu4e-headers\" \"*elfeed-summary*\" \"*elfeed-entry-\" \"*Messages*\")) (display-buffer-in-tab) (tab-name . \"Home\") (tab-group . \"Home\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:5:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#tab-bar-mode"},{"categories":null,"content":"savehist-mode(setq history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) (add-hook 'on-first-file-hook 'savehist-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#savehist-mode"},{"categories":null,"content":"save-place-mode(add-hook 'on-first-buffer-hook 'save-place-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:13","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#save-place-mode"},{"categories":null,"content":"midnight-mode作用是半夜的时候自动清理 buffer。怀疑这个导致 mu4e 出现 error code 1 的错误，先关闭试试。 (add-hook 'on-first-buffer-hook 'midnight-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#midnight-mode"},{"categories":null,"content":"so-long-mode(add-hook 'text-mode-hook 'global-so-long-mode) (setq-default large-file-warning-threshold nil) (when (fboundp 'so-long-enable) (add-hook 'on-first-file-hook 'so-long-enable)) ","date":"2023-02-26","objectID":"/posts/emacs/:5:15","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#so-long-mode"},{"categories":null,"content":"electric-pair-mode(add-hook 'prog-mode-hook 'electric-pair-mode) (add-hook 'org-mode-hook 'electric-pair-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:16","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#electric-pair-mode"},{"categories":null,"content":"prettify-symbols-mode(setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:17","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#prettify-symbols-mode"},{"categories":null,"content":"hippie-expand(setq hippie-expand-try-functions-list '(try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)) (global-set-key [remap dabbrev-expand] 'hippie-expand) ","date":"2023-02-26","objectID":"/posts/emacs/:5:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#hippie-expand"},{"categories":null,"content":"outline-minor-mode(add-hook 'prog-mode-hook 'outline-minor-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#outline-minor-mode"},{"categories":null,"content":"pixel-scroll-precision-mode这个 mode 不好用，使用触摸板大幅度滚动屏幕后，会自动回到原先的位置。 (use-package loaddefs :hook (on-first-file . pixel-scroll-precision-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:5:20","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#pixel-scroll-precision-mode"},{"categories":null,"content":"recentf-mode(add-hook 'on-first-input-hook 'recentf-mode) (with-eval-after-load 'recentf (setq recentf-auto-cleanup 300) (setq recentf-max-saved-items 1000) (add-to-list 'recentf-exclude \"\\\\.pdf\\\\'\")) (my/space-leader-def \"fr\" '(recentf-open-files :wk \"Recent files\")) ","date":"2023-02-26","objectID":"/posts/emacs/:5:21","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#recentf-mode"},{"categories":null,"content":"visual-line-mode(add-hook 'org-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'LaTeX-mode-hook #'turn-on-visual-line-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:22","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#visual-line-mode"},{"categories":null,"content":"word-wrap-whitespace-mode这个是 Emacs 29 中的功能，具体见：Add new minor mode word-wrap-whitespace-mode · emacs-mirror/emacs@c789430 如果你使用 emacs 29 以下的版本，将这个文件保存到本地可以使用。 (add-hook 'org-mode-hook 'word-wrap-whitespace-mode) (add-hook 'org-roam-mode-hook 'word-wrap-whitespace-mode) ","date":"2023-02-26","objectID":"/posts/emacs/:5:23","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#word-wrap-whitespace-mode"},{"categories":null,"content":"dired(use-package dired :bind (\"C-x d\" . dired) :config (setq insert-directory-program \"/opt/homebrew/bin/gls\") (setq dired-use-ls-dired t) (setq dired-dwim-target t) (setq dired-auto-revert-buffer #'dired-buffer-stale-p) (setq dired-recursive-copies 'always) (setq dired-recursive-deletes 'top) (setq dired-listing-switches \"-l --almost-all --human-readable --group-directories-first --no-group\") (setq dired-auto-revert-buffer t)) dired-hide-dotfiles(use-package dired-hide-dotfiles :bind (:map dired-mode-map (\"s-.\" . dired-hide-dotfiles-mode))) dirvish(use-package dirvish :bind ([remap dired] . dirvish) :config (setq dirvish-use-header-line nil) (setq dirvish-use-mode-line nil) (setq dirvish-hide-cursor nil) (with-eval-after-load 'doom-modeline (setq dirvish-mode-line-height doom-modeline-height)) (setq dirvish-default-layout '(0 0.4 0.6)) (setq dirvish-header-line-format '(:left (path) :right (free-space))) (setq dirvish-mode-line-format '(:left (sort file-time \" \" file-size symlink) :right (omit yank index))) :hook ((dirvish-find-entry . (lambda (\u0026rest _) (setq-local truncate-lines t))) (on-switch-buffer . dirvish-override-dired-mode))) e 绑定的函数见：Open file with system file manager (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'dirvish-mode-map \"q\" 'dirvish-quit \"e\" 'xah-show-in-desktop)) ;; dired has default keybinding, C-x d, remap it to dirvish. (with-eval-after-load 'evil (evil-define-key 'normal 'global \"zd\" 'dirvish-quick-access)) consult-dir(use-package consult-dir :bind ((\"C-x C-d\" . consult-dir) (:map minibuffer-mode-map (\"C-x C-d\" . consult-dir) (\"C-x C-j\" . consult-dir-jump-file)))) ","date":"2023-02-26","objectID":"/posts/emacs/:5:24","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dired"},{"categories":null,"content":"dired(use-package dired :bind (\"C-x d\" . dired) :config (setq insert-directory-program \"/opt/homebrew/bin/gls\") (setq dired-use-ls-dired t) (setq dired-dwim-target t) (setq dired-auto-revert-buffer #'dired-buffer-stale-p) (setq dired-recursive-copies 'always) (setq dired-recursive-deletes 'top) (setq dired-listing-switches \"-l --almost-all --human-readable --group-directories-first --no-group\") (setq dired-auto-revert-buffer t)) dired-hide-dotfiles(use-package dired-hide-dotfiles :bind (:map dired-mode-map (\"s-.\" . dired-hide-dotfiles-mode))) dirvish(use-package dirvish :bind ([remap dired] . dirvish) :config (setq dirvish-use-header-line nil) (setq dirvish-use-mode-line nil) (setq dirvish-hide-cursor nil) (with-eval-after-load 'doom-modeline (setq dirvish-mode-line-height doom-modeline-height)) (setq dirvish-default-layout '(0 0.4 0.6)) (setq dirvish-header-line-format '(:left (path) :right (free-space))) (setq dirvish-mode-line-format '(:left (sort file-time \" \" file-size symlink) :right (omit yank index))) :hook ((dirvish-find-entry . (lambda (\u0026rest _) (setq-local truncate-lines t))) (on-switch-buffer . dirvish-override-dired-mode))) e 绑定的函数见：Open file with system file manager (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'dirvish-mode-map \"q\" 'dirvish-quit \"e\" 'xah-show-in-desktop)) ;; dired has default keybinding, C-x d, remap it to dirvish. (with-eval-after-load 'evil (evil-define-key 'normal 'global \"zd\" 'dirvish-quick-access)) consult-dir(use-package consult-dir :bind ((\"C-x C-d\" . consult-dir) (:map minibuffer-mode-map (\"C-x C-d\" . consult-dir) (\"C-x C-j\" . consult-dir-jump-file)))) ","date":"2023-02-26","objectID":"/posts/emacs/:5:24","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dired-hide-dotfiles"},{"categories":null,"content":"dired(use-package dired :bind (\"C-x d\" . dired) :config (setq insert-directory-program \"/opt/homebrew/bin/gls\") (setq dired-use-ls-dired t) (setq dired-dwim-target t) (setq dired-auto-revert-buffer #'dired-buffer-stale-p) (setq dired-recursive-copies 'always) (setq dired-recursive-deletes 'top) (setq dired-listing-switches \"-l --almost-all --human-readable --group-directories-first --no-group\") (setq dired-auto-revert-buffer t)) dired-hide-dotfiles(use-package dired-hide-dotfiles :bind (:map dired-mode-map (\"s-.\" . dired-hide-dotfiles-mode))) dirvish(use-package dirvish :bind ([remap dired] . dirvish) :config (setq dirvish-use-header-line nil) (setq dirvish-use-mode-line nil) (setq dirvish-hide-cursor nil) (with-eval-after-load 'doom-modeline (setq dirvish-mode-line-height doom-modeline-height)) (setq dirvish-default-layout '(0 0.4 0.6)) (setq dirvish-header-line-format '(:left (path) :right (free-space))) (setq dirvish-mode-line-format '(:left (sort file-time \" \" file-size symlink) :right (omit yank index))) :hook ((dirvish-find-entry . (lambda (\u0026rest _) (setq-local truncate-lines t))) (on-switch-buffer . dirvish-override-dired-mode))) e 绑定的函数见：Open file with system file manager (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'dirvish-mode-map \"q\" 'dirvish-quit \"e\" 'xah-show-in-desktop)) ;; dired has default keybinding, C-x d, remap it to dirvish. (with-eval-after-load 'evil (evil-define-key 'normal 'global \"zd\" 'dirvish-quick-access)) consult-dir(use-package consult-dir :bind ((\"C-x C-d\" . consult-dir) (:map minibuffer-mode-map (\"C-x C-d\" . consult-dir) (\"C-x C-j\" . consult-dir-jump-file)))) ","date":"2023-02-26","objectID":"/posts/emacs/:5:24","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dirvish"},{"categories":null,"content":"dired(use-package dired :bind (\"C-x d\" . dired) :config (setq insert-directory-program \"/opt/homebrew/bin/gls\") (setq dired-use-ls-dired t) (setq dired-dwim-target t) (setq dired-auto-revert-buffer #'dired-buffer-stale-p) (setq dired-recursive-copies 'always) (setq dired-recursive-deletes 'top) (setq dired-listing-switches \"-l --almost-all --human-readable --group-directories-first --no-group\") (setq dired-auto-revert-buffer t)) dired-hide-dotfiles(use-package dired-hide-dotfiles :bind (:map dired-mode-map (\"s-.\" . dired-hide-dotfiles-mode))) dirvish(use-package dirvish :bind ([remap dired] . dirvish) :config (setq dirvish-use-header-line nil) (setq dirvish-use-mode-line nil) (setq dirvish-hide-cursor nil) (with-eval-after-load 'doom-modeline (setq dirvish-mode-line-height doom-modeline-height)) (setq dirvish-default-layout '(0 0.4 0.6)) (setq dirvish-header-line-format '(:left (path) :right (free-space))) (setq dirvish-mode-line-format '(:left (sort file-time \" \" file-size symlink) :right (omit yank index))) :hook ((dirvish-find-entry . (lambda (\u0026rest _) (setq-local truncate-lines t))) (on-switch-buffer . dirvish-override-dired-mode))) e 绑定的函数见：Open file with system file manager (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'dirvish-mode-map \"q\" 'dirvish-quit \"e\" 'xah-show-in-desktop)) ;; dired has default keybinding, C-x d, remap it to dirvish. (with-eval-after-load 'evil (evil-define-key 'normal 'global \"zd\" 'dirvish-quick-access)) consult-dir(use-package consult-dir :bind ((\"C-x C-d\" . consult-dir) (:map minibuffer-mode-map (\"C-x C-d\" . consult-dir) (\"C-x C-j\" . consult-dir-jump-file)))) ","date":"2023-02-26","objectID":"/posts/emacs/:5:24","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#consult-dir"},{"categories":null,"content":"scratch以下配置来源：site-lisp/config/init-scratch.el · xiaoc/emacs.d - Gitee.com. 也可以尝试使用：persistent-scratch/persistent-scratch.el at master · Fanael/persistent-scratch. (defun my-scratch-save () (ignore-errors (with-current-buffer \"*scratch*\" (write-region nil nil \"~/.emacs.d/var/scratch\")))) (defun my-scratch-restore () (let ((f \"~/.emacs.d/var/scratch\")) (when (file-exists-p f) (with-current-buffer \"*scratch*\" (erase-buffer) (insert-file-contents f) (goto-char (point-max)))))) (add-hook 'kill-emacs-hook #'my-scratch-save) (add-hook 'after-init-hook #'my-scratch-restore) ","date":"2023-02-26","objectID":"/posts/emacs/:5:25","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#scratch"},{"categories":null,"content":"window-divider-mode(use-package frame :config (face-spec-set 'window-divider '((((background light)) :foreground \"#000000\") (t :foreground \"#FFFFFF\")) 'face-override-spec) (setq window-divider-default-bottom-width 1) (setq window-divider-default-places 'bottom-only) :hook (after-init . window-divider-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:5:26","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#window-divider-mode"},{"categories":null,"content":"doc-view(setq doc-view-mupdf-use-svg t) (setq doc-view-imenu-flatten t) (setq doc-view-continuous t) ","date":"2023-02-26","objectID":"/posts/emacs/:5:27","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#doc-view"},{"categories":null,"content":"abbrev-mode(setq-default abbrev-mode t) ","date":"2023-02-26","objectID":"/posts/emacs/:5:28","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#abbrev-mode"},{"categories":null,"content":"bookmark(my/space-leader-def \"fm\" 'bookmark-jump) ","date":"2023-02-26","objectID":"/posts/emacs/:5:29","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#bookmark"},{"categories":null,"content":"clipboard(setq select-enable-primary t) ","date":"2023-02-26","objectID":"/posts/emacs/:5:30","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#clipboard"},{"categories":null,"content":"filesAuto-create Missing Directories | Emacs Redux. (defun my/auto-create-missing-dirs () (let ((target-dir (file-name-directory buffer-file-name))) (unless (file-exists-p target-dir) (make-directory target-dir t)))) (add-to-list 'find-file-not-found-functions #'my/auto-create-missing-dirs) ","date":"2023-02-26","objectID":"/posts/emacs/:5:31","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#files"},{"categories":null,"content":"Awesome Emacs Equipped with Third-Party Packages","date":"2023-02-26","objectID":"/posts/emacs/:6:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#awesome-emacs-equipped-with-third-party-packages"},{"categories":null,"content":"undoEmacs 自带 undo 和 undo-redo 功能。这里使用了 undo-fu 和 undo-fu-session 以及 vundo 这三个包。 Evil 模式编辑需要设置 undo system. (use-package undo-fu) (use-package undo-fu-session :after undo-fu :hook (on-first-file . undo-fu-session-global-mode)) (use-package vundo :config (setq vundo-glyph-alist vundo-unicode-symbols) :bind (\"C-x u\" . vundo)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#undo"},{"categories":null,"content":"delete关于 Emacs 中的删除，一个是 delete-selection-mode, hungry-delelte 以及是否使用系统垃圾桶。 (setq delete-by-moving-to-trash t) (setq trash-directory \"~/.Trash\") nflath/hungry-delete: Enables hungry deletion in all modes. (use-package hungry-delete :custom (hungry-delete-chars-to-skip \" \\t\\n\\r\\f\\v\") :hook ((text-mode . hungry-delete-mode) (prog-mode . hungry-delete-mode) (org-mode . hungry-delete-mode))) ","date":"2023-02-26","objectID":"/posts/emacs/:6:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#delete"},{"categories":null,"content":"gc-buffers作用是自动删除 buffers. (use-package gc-buffers :hook (on-first-buffer . gc-buffers-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#gc-buffers"},{"categories":null,"content":"rime(use-package rime :init (setq rime-title \"𝐑 \") :config (setq default-input-method \"rime\") (setq rime-user-data-dir \"~/Library/Rime/\") (setq rime-emacs-module-header-root \"/Applications/Emacs.app/Contents/Resources/include/\") (setq rime-librime-root (expand-file-name \"librime/dist\" user-emacs-directory)) (setq rime-show-candidate 'minibuffer) ;; (setq rime-posframe-properties '(:internal-border-width 0)) (setq rime-disable-predicates '(rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-tex-math-or-command-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) :bind (:map rime-mode-map (\"M-j\" . rime-force-enable)) :hook ((evil-insert-state-entry . (lambda () (if (and (not (rime--should-inline-ascii-p)) (eq major-mode 'org-mode) (not (org-at-clock-log-p)) (not (org-at-table-p)) (not (org-at-timestamp-p)) (not (and (bolp) (org-on-heading-p)))) (activate-input-method \"rime\")))) (evil-insert-state-exit . #'evil-deactivate-input-method))) 进行 Evil 的 insert 状态时自动的切换中英文输入法的状态，结合 rime 的 predicates 使用。 rime-regexp-mode, 通过此包可以使用输入法进行文件的检索，若使用拼音输入法则可以通过拼音进行文件名的检索。我使用三郑输入法，则可以使用形码进行检索。 (use-package rime-regexp :hook (on-first-input . rime-regexp-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#rime"},{"categories":null,"content":"helpful(use-package helpful :commands helpful-update :bind (([remap describe-function] . helpful-callable) ([remap describe-variable] . helpful-variable) ([remap describe-key] . helpful-key)) :init (setq help-window-select 'always) (setq help-window-keep-selected t) :config (add-to-list 'display-buffer-alist '((or (derived-mode . help-mode) (derived-mode . helpful-mode)) (display-buffer-reuse-mode-window display-buffer-in-side-window) (window-width . 0.5) (side . right) (slot . 0)))) (autoload #'elisp-demos-advice-helpful-update \"elisp-demos\" nil t) (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update) ","date":"2023-02-26","objectID":"/posts/emacs/:6:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#helpful"},{"categories":null,"content":"expand-region这个用于扩展选区，有时候比 Evil 的 Visual 好用。最新的配置中己经使用 v 替代了 C-= 这个快捷键。 (use-package expand-region :after evil :bind ((\"C-=\" . er/expand-region) (:map evil-visual-state-map (\"v\" . er/expand-region)))) ","date":"2023-02-26","objectID":"/posts/emacs/:6:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#expand-region"},{"categories":null,"content":"ctrlf(use-package ctrlf :after evil :hook (on-first-buffer . ctrlf-mode) :config (evil-global-set-key 'normal (kbd \"/\") 'ctrlf-forward-default)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ctrlf"},{"categories":null,"content":"avy(my/comma-leader-def \"g\" '(:ignore t :wk \"Goto\") \"gc\" '(avy-goto-char :wk \"Goto Char\") \"gC\" '(avy-goto-char-2 :wk \"Goto Char 2\") \"gl\" '(avy-goto-line :wk \"Goto Line\") \"gw\" '(avy-goto-word-0 :wk \"Goto Line\")) ","date":"2023-02-26","objectID":"/posts/emacs/:6:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#avy"},{"categories":null,"content":"whitespace-cleanup-mode(use-package whitespace-cleanup-mode :hook (on-first-file . whitespace-cleanup-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#whitespace-cleanup-mode"},{"categories":null,"content":"elisp-demosxuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs 用于查查函数的用法很方便。 ","date":"2023-02-26","objectID":"/posts/emacs/:6:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#elisp-demos"},{"categories":null,"content":"tempel(use-package tempel :bind ((\"M-+\" . tempel-complete) (\"M-*\" . tempel-insert)) :config (setq tempel-path `(\"~/.emacs.d/template/tempel\" ,(expand-file-name \"template/tempel\" my-galaxy)))) ","date":"2023-02-26","objectID":"/posts/emacs/:6:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#tempel"},{"categories":null,"content":"yasnippet(use-package yasnippet :hook (on-first-file . yas-global-mode)) (use-package yasnippet-snippets :after yasnippet) ","date":"2023-02-26","objectID":"/posts/emacs/:6:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#yasnippet"},{"categories":null,"content":"rg(use-package rg :hook (on-first-input . rg-enable-default-bindings) :config (setq rg-group-result t) (setq rg-show-columns t)) ","date":"2023-02-26","objectID":"/posts/emacs/:6:13","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#rg"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#minibuffer-and-completion"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#minibuffer"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#orderless"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#vertico"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#marginalia"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#embark"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#consult"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#corfu"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#kind-icon"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#cape"},{"categories":null,"content":"Minibuffer and completionminibuffer(setq read-buffer-completion-ignore-case t) (setq completion-ignore-case t) (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) (use-package simple :config (setq-default read-extended-command-predicate #'command-completion-default-include-p)) (use-package minibuffer :config (setq completion-category-overrides '((file (styles basic partial-completion)))) (setq read-file-name-completion-ignore-case t) (setq-local completion-in-region-function (lambda (\u0026rest args) (apply (if vertico-mode #'consult-completion-in-region #'completion--in-region) args)))) orderless(setq tab-always-indent 'complete) (use-package orderless :config (setq completion-styles '(orderless partial-completion))) vertico(use-package vertico :load-path \"~/.emacs.d/packages/vertico\" :hook (after-init . vertico-mode) :config (setq vertico-cycle t) :bind (:map vertico-map (\"C-j\" . vertico-next) (\"C-k\" . vertico-previous))) (use-package vertico-directory :after vertico :bind (:map vertico-map (\"C-u\" . vertico-directory-up))) marginalia(use-package marginalia :hook ((minibuffer-setup . marginalia-mode))) embark(use-package embark :bind ((\"C-.\" . embark-act) (\"M-.\" . embark-dwim) (:map vertico-map (\"C-c C-o\" . embark-export) (\"C-c C-c\" . embark-act))) :init (setq prefix-help-command #'embark-prefix-help-command) :config (add-to-list 'display-buffer-alist '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\" nil (window-parameters (mode-line-format . none))))) (my/space-leader-def \"fe\" '(embark-open-externally :wk \"Open externally\")) consult(use-package consult :commands consult-outline :hook (completion-list-mode . consult-preview-at-point-mode) :bind (([remap apropos] . consult-apropos) ([remap bookmark-jump] . consult-bookmark) ([remap goto-line] . consult-goto-line) ([remap imenu] . consult-imenu) ([remap locate] . consult-locate) ([remap load-theme] . consult-theme) ([remap man] . consult-man) ([remap recentf-open-files] . consult-recent-file) ([remap switch-to-buffer] . consult-buffer) ([remap switch-to-buffer-other-window] . consult-buffer-other-window) ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame) ([remap yank-pop] . consult-yank-pop) :map minibuffer-mode-map (\"C-r\" . consult-history))) (with-eval-after-load 'evil (evil-declare-key 'normal org-mode-map \"gh\" 'consult-outline) (evil-declare-key 'normal LaTeX-mode-map \"gh\" 'consult-outline)) corfu(use-package corfu :config (setq corfu-cycle t) (setq corfu-auto t) (setq corfu-auto-prefix 2) (setq corfu-auto-delay 0.0) (setq corfu-preselect 'valid) (setq-default corfu-quit-no-match 'separator) :init (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input) (eq (current-local-map) read-passwd-map)) (setq-local corfu-auto nil) ;; Enable/disable auto completion (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup corfu-popupinfo-delay nil) (corfu-mode 1))) :hook ((on-first-buffer . global-corfu-mode) (eshell-mode-hook . (lambda () (setq-local corfu-quit-at-boundary t corfu-quit-no-match t corfu-auto nil) (corfu-mode))))) (use-package corfu-echo :hook (corfu-mode . corfu-echo-mode)) (use-package corfu-popupinfo :hook (corfu-mode . corfu-popupinfo-mode)) kind-icon(use-package kind-icon :after corfu :config (setq kind-icon-use-icons t) (setq kind-icon-default-face 'corfu-default) (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) cape(use-package cape :bind ((\"C-c p p\" . completion-at-point) ;; capf (\"C-c p t\" . complete-tag) ;; etags (\"C-c p d\" . cape-dabbrev) ;; or dabbrev-completion (\"C-c p h\" . cape-history) (\"C-c p f\" . cape-file) (\"C-c p k\" . cape-keyword) (\"C-c p s\" . cape-symbol) (\"C-c p a\" . cape-abbrev) (\"C-c p i\" . cape-ispell) (\"C-c p l\" . cape-line) (\"C-c p w\" . cape-dict) (\"C-c p \\\\\" . cape-tex) (\"C-c p _\" . cape-tex) (\"C-c p ^\" . cape-tex) (\"C-c p \u0026\" . ","date":"2023-02-26","objectID":"/posts/emacs/:6:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#prescient"},{"categories":null,"content":"Misc","date":"2023-02-26","objectID":"/posts/emacs/:7:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#misc"},{"categories":null,"content":"gcmhEmacs 的拉圾回收太影响性能，此包的作用是当 Emacs 处于 idle 状态时进行拉圾回收，正常使用的时候设置一个较高的阈值，降低垃圾回收。 (use-package gcmh :config (setq gcmh-idle-delay 'auto) (setq gcmh-auto-idle-delay-factor 10) (setq gcmh-high-cons-threshold #x1000000) :hook (after-init . gcmh-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:7:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#gcmh"},{"categories":null,"content":"file-info(use-package file-info :bind (\"C-c f i\" . file-info-show) :config (setq hydra-hint-display-type 'posframe) (setq hydra-posframe-show-params `(:poshandler posframe-poshandler-frame-center :internal-border-width 2 :internal-border-color \"#61AFEF\" :left-fringe 16 :right-fringe 16)) (my/space-leader-def \"fs\" '(file-info-show :wk \"File info\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:7:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#file-info"},{"categories":null,"content":"disk-usage(use-package disk-usage :bind (\"C-c d u\" . disk-usage)) (my/space-leader-def \"d\" '(:ignore t :wk \"Disk\") \"du\" '(disk-usage :wk \"usage\")) ","date":"2023-02-26","objectID":"/posts/emacs/:7:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#disk-usage"},{"categories":null,"content":"youtube-dl(use-package youtube-dl :commands youtube-dl :config (setq youtube-dl-directory \"~/Downloads/\") (setq youtube-dl-program \"/opt/homebrew/bin/youtube-dl\") (setq youtube-dl-arguments '(\"--no-mtime\" \"--restrict-filenames\" \"--format\" \"best\" \"--mark-watched\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:7:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#youtube-dl"},{"categories":null,"content":"OCR(defun my/ocr () \"OCR with Macos system.\" (interactive) (shell-command \"shortcuts run \\\"OCR Selected Area\\\"\") (do-applescript \"tell application id \\\"org.gnu.Emacs\\\" to activate\")) (my/comma-leader-def \"o\" '(my/ocr :wk \"OCR\")) ","date":"2023-02-26","objectID":"/posts/emacs/:7:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ocr"},{"categories":null,"content":"proxy(defun toggle-proxy () \"Toggle proxy for the url.el library.\" (interactive) (if url-proxy-services (proxy-disable) (proxy-enable))) (defun proxy-enable () \"Enable proxy.\" (interactive) (setq url-proxy-services '((\"http\" . \"127.0.0.1:8118\") (\"https\" . \"127.0.0.1:8118\") (\"socks\" . \"127.0.0.1:8118\") (\"no_proxy\" . \"0.0.0.0\"))) (message \"Proxy enabled! %s\" (car url-proxy-services))) (defun proxy-disable () \"Disable proxy.\" (interactive) (if url-proxy-services (setq url-proxy-services nil)) (message \"Proxy disabled!\")) (run-with-idle-timer 2 nil (lambda () (proxy-enable))) (my/comma-leader-def \"p\" '(toggle-proxy :wk \"Proxy\")) ","date":"2023-02-26","objectID":"/posts/emacs/:7:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#proxy"},{"categories":null,"content":"Emacs Works with Multiple Language, Piece of CakeEmacs 在英文的学习、使用方面具有很大的帮助。 使用 Emacs 写文档可以自动检查拼写，需要用到的有 ispell, flyspell 或者 wucuo-mode. 对于具有错误的单词会有下划线提示，使用 flyspell-correct 进行修正。 对于不认识的单词可以使用 sdcv 或者 osx-dictionary 查询，对于读不懂的单词可以使用 go-translate 或者 lingva 或者 google-translate 进行中英文的互译。当然其他的语言也是可以的。 此外还可以使用 dictionary-overlay 直接渲染整个 buffer, 不认识的单词会直接显示中文意思。这个功能结合 eww 或者 elfeed 阅读网页的时候使用。 当不知道英文单词怎么写时可以使用 lsp-bridge-toggle-sdcv-helper, 通过输入拼音来输入英语单词。对于想要查询近意词等时可以使用 powerthesaurus-lookup-dwim 来查找。 学习英语单词还可以结合 org-drll 或者 org-anki 进行，这里使用到的概念是 Forgetting curve. ","date":"2023-02-26","objectID":"/posts/emacs/:8:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#emacs-works-with-multiple-language-piece-of-cake"},{"categories":null,"content":"Ispell(use-package ispell :config (setq ispell-program-name \"/opt/homebrew/bin/aspell\") (setq ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) (setq ispell-aspell-dict-dir (ispell-get-aspell-config-value \"dict-dir\")) (setq ispell-aspell-data-dir (ispell-get-aspell-config-value \"data-dir\")) (setq ispell-personal-dictionary (expand-file-name \"config/ispell/.aspell.en.pws\" my-galaxy)) (setq-default ispell-following-word t ispell-quietly t)) 这里使用了cask/shut-up: Emacs, shut up would you! 来关闭一些错误提示。虽然其只是显示在 Message buffer 当中，但是看起来还是很不爽。 ;; Suppress start looking process. ;; https://github.com/company-mode/company-mode/issues/912 ;; shut-up (with-eval-after-load 'ispell (advice-add 'ispell-lookup-words :around (lambda (orig \u0026rest args) (shut-up (apply orig args))))) ","date":"2023-02-26","objectID":"/posts/emacs/:8:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ispell"},{"categories":null,"content":"flyspellWucuo 在某个版本有提示 warning, 不知道产生的原因是什么。 (use-package flyspell :hook (org-mode . flyspell-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#flyspell"},{"categories":null,"content":"flyspell-correct(use-package flyspell-correct :commands flyspell-correct-wrapper :bind ([remap flyspell-auto-correct-previous-word] . flyspell-correct-wrapper)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#flyspell-correct"},{"categories":null,"content":"langtoolMacOS 上使用需要安装 languagetool. (use-package langtool :commands langtool-check-buffer :config (setq langtool-http-server-host \"localhost\") (setq langtool-http-server-port 8081) (setq langtool-autoshow-message-function #'langtool-popup-autoshow)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#langtool"},{"categories":null,"content":"dictionaryEmacs 内置了 dictionary，默认是查询的 dict.org。 (add-to-list 'display-buffer-alist '(\"^\\\\*Dictionary\\\\*\" (display-buffer-in-side-window) (side . right) (window-width . 70))) (global-set-key (kbd \"M-#\") 'dictionary-lookup-definition) ","date":"2023-02-26","objectID":"/posts/emacs/:8:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dictionary"},{"categories":null,"content":"go-translate(use-package go-translate :commands gts-do-translate :config (setq gts-buffer-follow-p t) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-google-engine :parser (gts-google-summary-parser))) :render (gts-buffer-render)))) (my/space-leader-def \"l\" '(:ignore t :wk \"Language\") \"ll\" '(gts-do-translate :wk \"Translate\")) ","date":"2023-02-26","objectID":"/posts/emacs/:8:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#go-translate"},{"categories":null,"content":"lingvago-translate 的备用。 (use-package lingva :commands lingva-translate :config (setq lingva-target \"zh\")) (my/space-leader-def \"lL\" '(lingva-translate :wk \"Lingva\")) ","date":"2023-02-26","objectID":"/posts/emacs/:8:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#lingva"},{"categories":null,"content":"sdcv此 sdcv 来自 manateelazycat/sdcv: Emacs interface for sdcv (Stardict console version) 而不是 Melpa 上的。 关于 sdcv 的词典可以去这下载：dictd-www.dict.org Dictionaries 默认的颜色不喜欢可以通过 face-spec-set 函数进行设置。 (use-package sdcv :commands sdcv-search-pointer sdcv-search-input+ :config (face-spec-set 'sdcv-tooltip-face '((((background light)) :foreground \"#000000\" :background \"#ffffff\") (t :foreground \"#ffffff\" :background \"#000000\")) 'face-override-spec) (setq sdcv-tooltip-border-width 2) (setq sdcv-dictionary-data-dir (expand-file-name \"sdcv-dict\" user-emacs-directory)) (setq sdcv-program \"/opt/homebrew/bin/sdcv\") (setq sdcv-dictionary-simple-list ;星际译王屏幕取词词典, 简单, 快速 '(\"懒虫简明英汉词典\" \"懒虫简明汉英词典\" \"KDic11万英汉词典\")) (setq sdcv-dictionary-complete-list ;星际译王的词典, 完全, 详细 '(\"牛津英汉双解美化版\" \"懒虫简明英汉词典\" \"英汉汉英专业词典\" \"XDICT英汉辞典\" \"stardict1.3英汉辞典\" \"WordNet\" \"XDICT汉英辞典\" \"Jargon\" \"懒虫简明汉英词典\" \"FOLDOC\" \"新世纪英汉科技大词典\" \"KDic11万英汉词典\" \"朗道汉英字典5.0\" \"CDICT5英汉辞典\" \"新世纪汉英科技大词典\" \"21世纪双语科技词典\" \"quick_eng-zh_CN\"))) (my/space-leader-def \"lp\" '(sdcv-search-pointer :wk \"SDCV Point\") \"li\" '(sdcv-search-input+ :wk \"SDCV Input\")) (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'sdcv-mode-map \"q\" 'quit-window)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#sdcv"},{"categories":null,"content":"osx-dictionaryxuchunyang/osx-dictionary.el: Mac OS X Dictionary.app interface for Emacs 这个是使用 MacOS 上自带的 dictionary 进行单词的查询，需要让 dictionary 后台运行，否则无结果显示。 (use-package osx-dictionary :commands osx-dictionary-search-pointer) (my/space-leader-def \"ld\" '(osx-dictionary-search-pointer :wk \"OSX dictionary\")) ","date":"2023-02-26","objectID":"/posts/emacs/:8:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#osx-dictionary"},{"categories":null,"content":"powerthesaurus这个的好处是可以用于查询同义词、反义词等等，用于替换单词比较方便。 需要实时在线查询，有时候结果返回的较慢。 (use-package powerthesaurus :commands (powerthesaurus-lookup-dwim powerthesaurus-lookup-related-dwim powerthesaurus-lookup-synonyms-dwim powerthesaurus-lookup-antonyms-dwim powerthesaurus-lookup-definitions-dwim powerthesaurus-lookup-sentences-dwim)) (my/space-leader-def \"ls\" '(:ignore t :wk \"synosaurus\") \"lsl\" '(powerthesaurus-lookup-dwim :wk \"Dwim\") \"lsr\" '(powerthesaurus-lookup-related-dwim :wk \"Related\") \"lss\" '(powerthesaurus-lookup-synonyms-dwim :wk \"Synonyms\") \"lsa\" '(powerthesaurus-lookup-antonyms-dwim :wk \"Antonyms\") \"lsd\" '(powerthesaurus-lookup-definitions-dwim :wk \"Definitions\") \"lsj\" '(powerthesaurus-lookup-sentences-dwim :wk \"Sentences\")) ","date":"2023-02-26","objectID":"/posts/emacs/:8:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#powerthesaurus"},{"categories":null,"content":"flycheck(use-package flycheck :hook (prog-mode . flycheck-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#flycheck"},{"categories":null,"content":"flycheck-grammarlylangtool 也可以检查语法，相比较 grammarly，不需要连网，所以速度较快。 自动开启此功能导致在文档较大时有明显的卡顿感，手动开启语法检查较好。 (use-package flycheck-grammarly :after flycheck :commands flycheck-grammarly-setup) ","date":"2023-02-26","objectID":"/posts/emacs/:8:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#flycheck-grammarly"},{"categories":null,"content":"shortcut在 MacOS 可以调用 shortcut 使用系统翻译功能。 此处仅做记录，我不怎么使用。具体的见 Emacs+macOS 最简单也最强大的中英互译设置，不只英语 - Emacs-general - Emacs China. (add-to-list 'display-buffer-alist (cons \"\\\\*Async Shell Command\\\\*.*\" (cons #'display-buffer-no-window nil))) (defun my/siri-translate () (interactive) (let ((tempfile (make-temp-file \"siri-translate-\" nil \".txt\"))) (write-region (format \"%s\" (thing-at-point 'paragraph)) nil tempfile) (end-of-paragraph-text) (shell-command (format \"shortcuts run \\\"Translate File\\\" -i %s \u0026\" tempfile))) (shell-command \"open -b org.gnu.Emacs\")) (defun my/siri-translate2english () (interactive) (let ((tempfile (make-temp-file \"siri-translate-\" nil \".txt\"))) (write-region (format \"%s\" (thing-at-point 'paragraph)) nil tempfile) (end-of-paragraph-text) (shell-command (format \"shortcuts run \\\"Translate File 2 English\\\" -i %s \u0026\" tempfile))) (shell-command \"open -b org.gnu.Emacs\")) (defun language-to-zh-or-zh-to-english () (interactive) (let ((string (thing-at-point 'paragraph))) (if (eq (string-match \"\\\\cC\" string) nil) (my/siri-translate) (my/siri-translate2english)))) ","date":"2023-02-26","objectID":"/posts/emacs/:8:13","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#shortcut"},{"categories":null,"content":"LSPeglot(with-eval-after-load 'yasnippet (add-hook 'LaTeX-mode-hook 'eglot-ensure)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#lsp"},{"categories":null,"content":"LSPeglot(with-eval-after-load 'yasnippet (add-hook 'LaTeX-mode-hook 'eglot-ensure)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#eglot"},{"categories":null,"content":"markdown(use-package markdown-mode :mode ((\"\\\\.\\\\(?:md\\\\|markdown\\\\|mkd\\\\|mdown\\\\|mkdn\\\\|mdwn\\\\)\\\\'\" . markdown-mode) (\"README\\\\.md\\\\'\" . gfm-mode)) :init (setq markdown-command \"multimarkdown\") :bind (:map markdown-mode-map (\"C-c C-e\" . markdown-do))) ;; (with-eval-after-load 'whitespace-cleanup-mode ;; (add-to-list 'whitespace-cleanup-mode-ignore-modes 'markdown-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:8:15","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#markdown"},{"categories":null,"content":"Organize Life with Plain Text, High Effective System","date":"2023-02-26","objectID":"/posts/emacs/:9:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#organize-life-with-plain-text-high-effective-system"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\u003creturn\u003e\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\u003cf10\u003e\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-mode"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#babel"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-capture"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-archive"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-attach"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-habit"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-id"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-src"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-refile"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-emphasis-alist"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-clock"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-buffer"},{"categories":null,"content":"org-mode(use-package org :config (setq org-ellipsis \" ⇲\") (setq org-modules '() org-imenu-depth 4 org-return-follows-link t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t org-treat-S-cursor-todo-selection-as-state-change nil org-hide-leading-stars nil org-startup-with-inline-images t org-image-actual-width '(500) org-use-speed-commands t) (setq org-enforce-todo-dependencies t) (setq org-enforce-todo-checkbox-dependencies t) (setq org-todo-repeat-to-state t) (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"INPROGRESS(i)\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) :bind (:map org-mode-map (\"C-c l\" . org-store-link))) ;; (\"\" . org-return))) Babel以下配置来源：https://emacs-china.org/t/org-babel/18699 禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (use-package ob-core :after org :config (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block) (setq org-confirm-babel-evaluate nil)) org-capture(use-package org-capture :after org :bind (:map org-capture-mode-map ([remap evil-save-and-close] . org-capture-finalize) ([remap evil-save-modified-and-close] . org-capture-finalize) ([remap evil-quit] . org-capture-kill) (\"RET\" . org-capture-finalize)) :config (setq org-capture-templates '((\"i\" \"Inbox\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/inbox.org\"))) \"**** %?\\n%U\\n\" :time-prompt t :tree-type week) (\"p\" \"Daily Plan\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/inbox/plan.org\"))) \"- [ ] %?\\n%U\\n\" :time-prompt t :tree-type week) (\"r\" \"Reflection\" plain (file+olp+datetree (lambda () (concat my-galaxy \"/roam/main/reflection.org\"))) (file \"~/.emacs.d/template/tpl-daily-reflection\") :time-prompt t :tree-type week) (\"a\" \"Anki Deck\") (\"ae\" \"Deck: English\" entry (file (lambda () (concat my-galaxy \"/anki/anki_english.org\"))) \"* %?\\n\" :jump-to-captured t) (\"ac\" \"Deck: Civil Engineering\" entry (file (lambda () (concat my-galaxy \"/anki/anki_engineering.org\"))) \"* %?\\n\" :jump-to-captured t) (\"s\" \"Code snippets\" entry (file (lambda () (concat my-galaxy \"/scripts/snippets.org\"))) \"* %?\\t%^g\\n#+BEGIN_SRC %^{language}\\n\\n#+END_SRC\") ;; (\"l\" \"Lists\") (\"m\" \"Movie\" entry (file+headline (lambda () (concat my-galaxy \"/roam/main/watchlist.org\")) \"Watching Lists\") \"* %? :PROPERTIES: :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller} :COUNTRY: :SCORE: :PLOT: %^{PLOT} :END:\")))) 由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。 (defun my/org-capture () \"Make a new frame to do org-capture staff.\" (interactive) (make-frame) (org-capture)) (add-hook 'org-capture-after-finalize-hook 'delete-frame) (global-set-key (kbd \"\") 'my/org-capture) org-archive(use-package org-archive :after org :init (setq org-archive-location (expand-file-name \"todos/gtd_archive.org::datetree/\" my-galaxy)) (defun my/gtd-archive () \"Archive tasks to specific file","date":"2023-02-26","objectID":"/posts/emacs/:9:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ol"},{"categories":null,"content":"ekg轻度尝试，目前还有很多的不足，日常使用不太够。 和其他的模块不能很好的合作，如 org-agenda，math-preview。 (use-package ekg :commands (ekg-show-notes-in-trash ekg-show-notes-for-today ekg-show-notes-with-tag ekg-show-notes-with-all-tags ekg-show-notes-with-any-tags ekg-show-rename-tag ekg-browse-url) :bind ((\"\u003cf9\u003e\" . ekg-capture) (\"M-\u003cf9\u003e\" . ekg-capture-url)) :general (evil-define-key 'motion ekg-notes-mode-map \"q\" 'quit-window) :config (setq triples-default-database-filename (expand-file-name \"ekg/triples.db\" my-galaxy))) (my/space-leader-def \"e\" '(:ignore t :wk \"EKG\") \"ee\" '(ekg-show-notes-with-tag :wk \"With TAG\") \"ed\" '(ekg-show-notes-for-today :wk \"Today\") \"eA\" '(ekg-show-notes-with-all-tags :wk \"All TAG\") \"ea\" '(ekg-show-notes-with-any-tags :wk \"Any TAG\") \"et\" '(ekg-show-notes-in-trash :wk \"Trash\") \"er\" '(ekg-rename-tag :wk \"Rename TAG\") \"eb\" '(ekg-browse-url :wk \"Open URL\")) ","date":"2023-02-26","objectID":"/posts/emacs/:9:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ekg"},{"categories":null,"content":"org-roamreadinglog 和 reference 模板见 \u003c./template/\u003e 文件夹。 Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 ROAM_EXCLUDE 关键字或者使用 org-roam-db-node-include-function 函数。 (setq org-roam-db-node-include-function (lambda () (not (member \"ATTACH\" (org-get-tags))))) (use-package org-roam :commands org-roam-node-find :init (setq org-roam-directory (file-truename (expand-file-name \"roam\" my-galaxy))) :hook ((on-first-input . org-roam-db-autosync-mode) (org-mode . (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (org-roam-mode . hide-mode-line-mode)) :config (setq org-roam-database-connector 'sqlite) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-mode-sections '((org-roam-backlinks-section :unique t) org-roam-reflinks-section org-roam-unlinked-references-section)) (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\"))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\")) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count))) (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \u003e \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \u003e \") 'face '(shadow italic)) separator title))))) ;; 获得文件的修改时间. (cl-defmethod org-roam-node-date ((node org-roam-node)) (format-time-string \"%Y-%m-%d\" (org-roam-node-file-mtime node))) (setq org-roam-node-display-template (concat \"${type:4} ${backlinkscount:3} \" (propertize \"${doom-hierarchy:*}\" 'face 'org-level-3) (propertize \"${tags:20}\" 'face 'org-tag) \" \")) (setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/\u003c%Y-%m\u003e.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"s\" \"sources\" plain \"%?\" :target (file+head \"sources/${slug}.org\" \"#+TITLE: ${title","date":"2023-02-26","objectID":"/posts/emacs/:9:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-roam"},{"categories":null,"content":"org-roamreadinglog 和 reference 模板见 文件夹。 Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 ROAM_EXCLUDE 关键字或者使用 org-roam-db-node-include-function 函数。 (setq org-roam-db-node-include-function (lambda () (not (member \"ATTACH\" (org-get-tags))))) (use-package org-roam :commands org-roam-node-find :init (setq org-roam-directory (file-truename (expand-file-name \"roam\" my-galaxy))) :hook ((on-first-input . org-roam-db-autosync-mode) (org-mode . (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (org-roam-mode . hide-mode-line-mode)) :config (setq org-roam-database-connector 'sqlite) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-mode-sections '((org-roam-backlinks-section :unique t) org-roam-reflinks-section org-roam-unlinked-references-section)) (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\"))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\")) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count))) (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title))))) ;; 获得文件的修改时间. (cl-defmethod org-roam-node-date ((node org-roam-node)) (format-time-string \"%Y-%m-%d\" (org-roam-node-file-mtime node))) (setq org-roam-node-display-template (concat \"${type:4} ${backlinkscount:3} \" (propertize \"${doom-hierarchy:*}\" 'face 'org-level-3) (propertize \"${tags:20}\" 'face 'org-tag) \" \")) (setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"s\" \"sources\" plain \"%?\" :target (file+head \"sources/${slug}.org\" \"#+TITLE: ${title","date":"2023-02-26","objectID":"/posts/emacs/:9:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-roam-ui"},{"categories":null,"content":"org-roamreadinglog 和 reference 模板见 文件夹。 Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 ROAM_EXCLUDE 关键字或者使用 org-roam-db-node-include-function 函数。 (setq org-roam-db-node-include-function (lambda () (not (member \"ATTACH\" (org-get-tags))))) (use-package org-roam :commands org-roam-node-find :init (setq org-roam-directory (file-truename (expand-file-name \"roam\" my-galaxy))) :hook ((on-first-input . org-roam-db-autosync-mode) (org-mode . (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (org-roam-mode . hide-mode-line-mode)) :config (setq org-roam-database-connector 'sqlite) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-mode-sections '((org-roam-backlinks-section :unique t) org-roam-reflinks-section org-roam-unlinked-references-section)) (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\"))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\")) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count))) (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title))))) ;; 获得文件的修改时间. (cl-defmethod org-roam-node-date ((node org-roam-node)) (format-time-string \"%Y-%m-%d\" (org-roam-node-file-mtime node))) (setq org-roam-node-display-template (concat \"${type:4} ${backlinkscount:3} \" (propertize \"${doom-hierarchy:*}\" 'face 'org-level-3) (propertize \"${tags:20}\" 'face 'org-tag) \" \")) (setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"s\" \"sources\" plain \"%?\" :target (file+head \"sources/${slug}.org\" \"#+TITLE: ${title","date":"2023-02-26","objectID":"/posts/emacs/:9:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#consult-org-roam"},{"categories":null,"content":"org-roamreadinglog 和 reference 模板见 文件夹。 Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 ROAM_EXCLUDE 关键字或者使用 org-roam-db-node-include-function 函数。 (setq org-roam-db-node-include-function (lambda () (not (member \"ATTACH\" (org-get-tags))))) (use-package org-roam :commands org-roam-node-find :init (setq org-roam-directory (file-truename (expand-file-name \"roam\" my-galaxy))) :hook ((on-first-input . org-roam-db-autosync-mode) (org-mode . (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (org-roam-mode . hide-mode-line-mode)) :config (setq org-roam-database-connector 'sqlite) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-mode-sections '((org-roam-backlinks-section :unique t) org-roam-reflinks-section org-roam-unlinked-references-section)) (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\"))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\")) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count))) (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title))))) ;; 获得文件的修改时间. (cl-defmethod org-roam-node-date ((node org-roam-node)) (format-time-string \"%Y-%m-%d\" (org-roam-node-file-mtime node))) (setq org-roam-node-display-template (concat \"${type:4} ${backlinkscount:3} \" (propertize \"${doom-hierarchy:*}\" 'face 'org-level-3) (propertize \"${tags:20}\" 'face 'org-tag) \" \")) (setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"s\" \"sources\" plain \"%?\" :target (file+head \"sources/${slug}.org\" \"#+TITLE: ${title","date":"2023-02-26","objectID":"/posts/emacs/:9:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#consult-notes"},{"categories":null,"content":"org-roamreadinglog 和 reference 模板见 文件夹。 Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 ROAM_EXCLUDE 关键字或者使用 org-roam-db-node-include-function 函数。 (setq org-roam-db-node-include-function (lambda () (not (member \"ATTACH\" (org-get-tags))))) (use-package org-roam :commands org-roam-node-find :init (setq org-roam-directory (file-truename (expand-file-name \"roam\" my-galaxy))) :hook ((on-first-input . org-roam-db-autosync-mode) (org-mode . (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (org-roam-mode . hide-mode-line-mode)) :config (setq org-roam-database-connector 'sqlite) (setq org-roam-db-gc-threshold most-positive-fixnum) (setq org-roam-mode-sections '((org-roam-backlinks-section :unique t) org-roam-reflinks-section org-roam-unlinked-references-section)) (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\"))) (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\")) (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count))) (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title))))) ;; 获得文件的修改时间. (cl-defmethod org-roam-node-date ((node org-roam-node)) (format-time-string \"%Y-%m-%d\" (org-roam-node-file-mtime node))) (setq org-roam-node-display-template (concat \"${type:4} ${backlinkscount:3} \" (propertize \"${doom-hierarchy:*}\" 'face 'org-level-3) (propertize \"${tags:20}\" 'face 'org-tag) \" \")) (setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"s\" \"sources\" plain \"%?\" :target (file+head \"sources/${slug}.org\" \"#+TITLE: ${title","date":"2023-02-26","objectID":"/posts/emacs/:9:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-transclusion"},{"categories":null,"content":"dynamic org-agendavulpea to build dynamic agenda. ;; (autoload 'vulpea-buffer-tags-get \"vulpea\" \"\" t) ; ;; (autoload 'vulpea-buffer-tags-add \"vulpea\" \"\" t) ;; (autoload 'vulpea-buffer-tags-remove \"vulpea\" \"\" t) ;; (autoload 'vulpea-buffer-prop-set \"vulpea\" \"\" t) ;; (autoload 'vulpea-buffer-prop-get \"vulpea\" \"\" t) ;; (autoload 'vulpea-buffer-prop-set-list \"vulpea\" \"\" t) ;; (autoload 'vulpea-buffer-prop-get-list \"vulpea\" \"\" t) (use-package vulpea :after org-roam :config (defun vulpea-project-p () \"Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\" (seq-find ; (3) (lambda (type) (or (eq type 'todo) (eq type 'done))) (org-element-map ; (2) (org-element-parse-buffer 'headline) ; (1) 'headline (lambda (h) (org-element-property :todo-type h))))) (defun vulpea-buffer-p () \"Return non-nil if the currently visited buffer is a note.\" (and buffer-file-name (string-prefix-p (expand-file-name (file-name-as-directory org-roam-directory)) (file-name-directory buffer-file-name)))) (defun vulpea-project-update-tag () \"Update PROJECT tag in the current buffer.\" (when (and (not (active-minibuffer-window)) (vulpea-buffer-p)) (save-excursion (goto-char (point-min)) (let* ((tags (vulpea-buffer-tags-get)) (original-tags tags)) (if (vulpea-project-p) (setq tags (cons \"project\" tags)) (setq tags (remove \"project\" tags))) ;; cleanup duplicates (setq tags (seq-uniq tags)) ;; update tags if changed (when (or (seq-difference tags original-tags) (seq-difference original-tags tags)) (apply #'vulpea-buffer-tags-set tags)))))) (defun vulpea-project-files () \"Return a list of note files containing 'project' tag.\" ; (seq-uniq (seq-map #'car (org-roam-db-query [:select [nodes:file] :from tags :left-join nodes :on (= tags:node-id nodes:id) :where (like tag (quote \"%\\\"project\\\"%\"))])))) (defun vulpea-agenda-files-update (\u0026rest _) \"Update the value of `org-agenda-files'.\" (setq org-agenda-files (seq-uniq (append (vulpea-project-files) `(,(expand-file-name \"todos/gtd.org\" my-galaxy)))))) (add-hook 'find-file-hook #'vulpea-agenda-files-update) (advice-add 'org-agenda :before #'vulpea-agenda-files-update) (advice-add 'org-todo-list :before #'vulpea-agenda-files-update) (add-hook 'find-file-hook #'vulpea-project-update-tag) (add-hook 'before-save-hook #'vulpea-project-update-tag)) (defun my/gtd-file () (interactive) (find-file (expand-file-name \"todos/gtd.org\" my-galaxy))) (my/space-leader-def \"fog\" '(my/gtd-file :wk \"GTD file\")) (use-package org-agenda :after org :bind (\"\u003cf12\u003e\" . my/org-agenda) :hook (org-agenda-finalize . #'org-agenda-find-same-or-today-or-agenda) :init (setq org-agenda-files (directory-files-recursively (expand-file-name \"todos\" my-galaxy) \"org$\\\\|archive$\")) :config (setq org-agenda-dim-blocked-tasks t) (setq org-agenda-compact-blocks t) (setq org-agenda-window-setup 'other-tab) (setq org-agenda-align-tags-to-column -120) (setq org-agenda-custom-commands '((\"R\" \"Review projects\" tags-todo \"-CANCELLED/\" ((org-agenda-overriding-header \"Reviews Scheduled\") (org-agenda-skip-function 'org-review-agenda-skip) (org-agenda-cmp-user-defined 'org-review-compare))) (\"A\" \"Archive\" ((todo \"DONE|CNCL\" ((org-agenda-prefix-format \" %i\") (org-agenda-hide-tags-regexp \"project\") (org-agenda-overriding-header \"Archive\"))))) (\" \" \"GTD Lists: Daily agenda and tasks\" ((agenda \"\" ((org-agenda-span 2) (org-deadline-warning-days 3) (org-agenda-block-separator nil) (org-scheduled-past-days 365) (org-agenda-hide-tags-regexp \"project\") (org-agenda-day-face-function (lambda (date) 'org-agenda-date)) (org-agenda-format-date \"%A %-e %B %Y\") (org-agenda-prefix-format \" %i %?-12t% s\") (org-agenda-overriding-header \"Today's agenda\"))) (tags-todo \"*\" ((org-agenda-skip-function `(org-agenda-skip-entry-if 'deadline 'schedule 'timestamp 'notregexp ,(format \"\\\\[#%s\\\\]\" (char-to-string org-priority-highest)))) (org-agenda-hide-tags-regexp \"project\") (org-agenda","date":"2023-02-26","objectID":"/posts/emacs/:9:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#dynamic-org-agenda"},{"categories":null,"content":"calendar and appt(use-package calendar :commands calendar :config (setq calendar-view-diary-initially-flag t) (setq calendar-mark-diary-entries-flag t) (setq calendar-mode-line-format nil) (setq calendar-date-style 'iso) (setq calendar-date-display-form calendar-iso-date-display-form) (setq calendar-time-display-form '(24-hours \":\" minutes (when time-zone (format \"(%s)\" time-zone)))) (setq diary-date-forms diary-iso-date-forms) :hook (calendar-today-visible . #'calendar-mark-today)) (my/comma-leader-def \"c\" '(calendar :wk \"Calendar\")) (use-package appt :after calendar :config (setq appt-display-diary nil) (setq appt-disp-window-function #'appt-disp-window) (setq appt-display-mode-line t) (setq appt-display-interval 3) (setq appt-audible nil) (setq appt-warning-time-regexp \"appt \\\\([0-9]+\\\\)\") (setq appt-message-warning-time 6) (add-hook 'diary-mode-hook #'appt-activate)) Use diary-lib to write diary. 关于这个的使用可以见：Emacs: Diary and Calendar - YouTube (use-package diary-lib :after calendar :config (add-hook 'diary-list-entries-hook #'diary-sort-entries) (add-hook 'diary-mode-hook #'goto-address-mode) (setq diary-display-function #'diary-fancy-display) (setq diary-header-line-format nil) (setq diary-list-include-blanks nil) (setq diary-abbreviated-year-flag nil) (setq diary-number-of-entries 7) (setq diary-comment-start \");;\") (setq diary-comment-end \"\") (setq diary-nonmarking-symbol \"!\") (setq diary-file (expand-file-name \"diary/diary.org\" my-galaxy))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#calendar-and-appt"},{"categories":null,"content":"ZenZen Mode 或者叫禅模式，其目的是为了降低不相关因素对于心智的干挠。将自己的视野集中于可见的区域，不需要移动脑袋。 在 Emacs 上有两个相关的包，一个是 olivetti, 另外一个是 writeroom-mode. olivetti 的功能更单一一些，但是足够使用。 (use-package olivetti :commands olivetti-mode) (with-eval-after-load 'evil (evil-define-key 'nromal 'org-mode-map \"zw\" 'olivetti-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#zen"},{"categories":null,"content":"TOC在 Org 文件的顶部生成目录。snosov1/toc-org: toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub) 需要在文件的头部新建一个 heading 并加上 tag：toc. (use-package toc-org :hook (org-mode . toc-org-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#toc"},{"categories":null,"content":"org-super-starintegral-dw/org-superstar-mode: Make org-mode stars a little more super (use-package org-superstar :hook (org-mode . org-superstar-mode) :config (setq org-superstar-headline-bullets-list '(\"❶\" \"❷\" \"❸\" \"❹\" \"❺\" \"❻\" \"❼\")) ;; (setq org-superstar-headline-bullets-list '(\"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")) ;; (setq org-superstar-headline-bullets-list '(\"①\" \"②\" \"③\" \"④\" \"⑤\" \"⑥\")) (setq org-hide-leading-stars t)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:8","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-super-star"},{"categories":null,"content":"org-download用于管理图片。 (use-package org-download :commands org-download-enable :hook (org-mode . org-download-enable) :config (setq org-download-image-dir (expand-file-name \"pictures\" my-galaxy)) (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME: fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\"))) (my/space-leader-def \"od\" '(:ignore t :wk \"Download\") \"odc\" '(org-download-clipboard :wk \"Download Clipboard\") \"ody\" '(org-download-yank :wk \"Download Yank\") \"odr\" '(org-download-rename-last-file :wk \"Rename last file\") \"odR\" '(org-download-rename-at-point :wk \"Rename point\")) ","date":"2023-02-26","objectID":"/posts/emacs/:9:9","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-download"},{"categories":null,"content":"org-appear在 org 中经常使用链接，使 Org 元素的不可见部分显示为可见。结合 Evil 使用，对于链接的编辑很方便。 (use-package org-appear :config (setq org-appear-autolinks t) (setq org-appear-trigger 'manual) :hook ((org-mode . (lambda () (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t) (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t))) (org-mode . org-appear-mode))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:10","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-appear"},{"categories":null,"content":"math-preview(use-package math-preview :commands (math-preview-all math-preview-at-point) :config (setq math-preview-scale 1.1) (setq math-preview-raise 0.3) (setq math-preview-margin '(1 . 0))) (my/space-leader-def \"mpa\" '(math-preview-all :wk \"All\") \"mpA\" '(math-preview-clear-all :wk \"Clear All\") \"mpp\" '(math-preview-at-point :wk \"Point\") \"mpP\" '(math-preview-clear-at-point :wk \"Clear Point\") \"mpr\" '(math-preview-region :wk \"Region\") \"mpR\" '(math-preview-clear-region :wk \"Clear Region\")) ","date":"2023-02-26","objectID":"/posts/emacs/:9:11","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#math-preview"},{"categories":null,"content":"plantuml(use-package plantuml :commands (plantuml-org-to-mindmap-open plantuml-org-to-wbs-open) :hook (org-mode . (lambda () (require 'plantuml))) :config (setq plantuml-jar-path (concat (string-trim (shell-command-to-string \"readlink -f $(brew --prefix plantuml)\")) \"/libexec/plantuml.jar\"))) (my/space-leader-def \"op\" '(:ignore t :wk \"Plantuml\") \"opm\" '(plantuml-org-to-mindmap-open :wk \"Mindmap\") \"ops\" '(plantuml-org-to-wbs-open :wk \"Work Breakdown Structure\")) ","date":"2023-02-26","objectID":"/posts/emacs/:9:12","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#plantuml"},{"categories":null,"content":"org-rainbow-tags(use-package org-rainbow-tags :hook (org-mode . org-rainbow-tags-mode)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:13","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-rainbow-tags"},{"categories":null,"content":"alarm-clock如其名，在 Emacs 中设置闹钟的。 (use-package alarm-clock :commands (alarm-clock-set alarm-clock-list-view) :config (setq alarm-clock-cache-file (expand-file-name \"var/.alarm-clock.cache\" user-emacs-directory))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:14","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#alarm-clock"},{"categories":null,"content":"pommEmacs 中执行 Pomodoro 哲学。 (use-package pomm :commands pomm :config (setq pomm-state-file-location (expand-file-name \"pomm\" no-littering-var-directory)) (pomm-mode-line-mode 1)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:15","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#pomm"},{"categories":null,"content":"Pandoc将 org 文档转换为 word 文档，仅支持简单的文档，过于复杂的文档不行。 (defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template/template.docx\" user-emacs-directory))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ox-pandoc 增加 org-export 的选项。不过 ox-pandoc 己经不怎么更新。 此外还有一个 pandoc-mode, 初步尝试后感觉还可以。. Pandoc 不怎么使用，时间长了就忘记 pandoc 的使用方法。 ;; First, install pandoc with `brew install pandoc'. ;; Only for simple file, no cite info, no latex formular. ;; Image file has to be absolute path, relative path do not work! (setq org-pandoc-menu-entry '((?m \"as md.\" org-pandoc-export-as-commonmark) (?M \"to md and open.\" org-pandoc-export-to-commonmark-and-open) (?x \"to docx.\" org-pandoc-export-to-docx) (?X \"to docx and open.\" org-pandoc-export-to-docx-and-open) (?e \"to epub.\" org-pandoc-export-to-epub) (?E \"to epub and open.\" org-pandoc-export-to-epub-and-open) (?3 \"to epub3.\" org-pandoc-export-to-epub3) (?£ \"to epub3 and open.\" org-pandoc-export-to-epub3-and-open) (?j \"as json.\" org-pandoc-export-as-json) (?J \"to json and open.\" org-pandoc-export-to-json-and-open) (?r \"as rst.\" org-pandoc-export-as-rst) (?R \"to rst and open.\" org-pandoc-export-to-rst-and-open))) (setq org-pandoc-options '((standalone . t) (mathjax . t) (wrap . \"preserve\"))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:16","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#pandoc"},{"categories":null,"content":"beancount-modeBeancount has more plugin than ledger-cli. (use-package beancount :mode (\".bean\" . beancount-mode) :hook ((beancount-mode . (lambda () (setq-local electric-indent-chars nil))) (beancount-mode . outline-minor-mode)) :config (evil-define-key 'normal 'beancount-mode-map \"zf\" 'beancount-fava) ;; insert whole transaction instead of only insert date. (defun my/beancount-insert-transaction (\u0026optional days) \"Start a new timestamped directive with date shifted by DAYS from today.\" (interactive \"P\") (unless (bolp) (newline)) (insert (beancount--shift-current-date days) \" * \\\"\\\" \\\"\\\"\") (evil-backward-char 3) (evil-insert 0)) (advice-add 'beancount-insert-date :override 'my/beancount-insert-transaction) ;; Auto open browser after beancount-fava started. (defun my/browser-beancount-fava () (if beancount--fava-process (browse-url \"http://127.0.0.1:5000\"))) (advice-add 'beancount-fava :after 'my/browser-beancount-fava) ;; auto align transaction before save file. (defun my/beancount-align-transaction () \"Align visible region in current buffer.\" (save-excursion (indent-region (window-start) (window-end)))) (add-hook 'before-save-hook (lambda () (if (eq major-mode 'beancount-mode) (my/beancount-align-transaction)))) ;; If cursor in \"\", activate input method rime. (defun my/beancount-activate-input-method () (when (eq major-mode 'beancount-mode) (if (not (bounds-of-thing-at-point 'whitespace)) (if (bounds-of-thing-at-point 'string) (activate-input-method \"rime\"))))) (add-hook 'evil-insert-state-entry-hook #'my/beancount-activate-input-method)) ","date":"2023-02-26","objectID":"/posts/emacs/:9:17","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#beancount-mode"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#bibtex-management"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-cite"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#citar"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#citar-org-roam"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#bibtex-completion"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#org-roam-bibtex"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ebib"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#scihub"},{"categories":null,"content":"Bibtex management文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。 Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar org-citeOrg-cite 目前是 org 内置的进行文献引用的包。 关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 Citations in org-mode: Org-cite and Citar | Kristoffer Balintona. 己经说的比较详细。 (use-package oc :after org :config (setq org-cite-global-bibliography `(,(concat my-galaxy \"/bibtexs/References.bib\")))) citar为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。 我通常使用 citar-open-files / SPC n r p 来打开想要阅读的文献 PDF 文件。 阅读文献使用的是 pdf-tools ，更好用的是 emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs. eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。 (use-package citar :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links :config (setq citar-bibliography org-cite-global-bibliography) (setq citar-notes-paths `(,(expand-file-name \"roam/ref\" my-galaxy))) (setq citar-library-file-extensions '(\"pdf\" \"jpg\" \"epub\")) (setq citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\"))) (setq citar-symbol-separator \" \") (setq citar-file-additional-files-separator \"-\") (setq citar-at-point-function 'embark-act)) (use-package citar :after all-the-icons :config (setq citar-symbols `((file ,(all-the-icons-faicon \"file-pdf-o\" :face 'all-the-icons-dred :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))) (use-package citar-capf :hook ((LaTeX-mode . citar-capf-setup) (org-mode . citar-capf-setup))) (use-package citar-org :config (setq org-cite-insert-processor 'citar) (setq org-cite-follow-processor 'citar) (setq org-cite-activate-processor 'citar) (with-eval-after-load 'citar-org (define-key citar-org-citation-map (kbd \"RET\") 'org-open-at-point))) (use-package citar-embark :commands citar-embark-mode :hook (org-mode . citar-embark-mode)) (my/space-leader-def \"re\" '(citar-open-entry :wk \"Open entry\") \"rp\" '(citar-open-files :wk \"Open files\") \"ri\" '(citar-insert-citation :wk \"Insert citation\") \"rn\" '(citar-open-notes :wk \"Open/Create note\") \"rl\" '(citar-open-links :wk \"Open links\")) citar-org-roam这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。 目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam–create-capture-note 函数。 (use-package citar-org-roam :commands (citar-org-roam-mode citar-org-roam-cited) :hook (org-roam-mode . citar-org-roam-mode) :config (setq citar-org-roam-subdir \"ref\") (setq citar-org-roam-note-title-template \"${title}\") ;; Temporarily work, wait citar-org-roam update to support capture with template. (defun my/citar-org-roam--create-capture-note (citekey entry) \"Open or create org-roam node for CITEKEY and ENTRY.\" ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d (let ((title (citar-format--entry citar-org-roam-note-title-template entry))) (org-roam-capture- :templates '((\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :if-new ;; Change \"%?\" to a template file. (file+head \"%(concat (when citar-org-roam-subdir (concat citar-org-roam-subdir \\\"/\\\")) \\\"${citekey}.org\\\")\" \"#+title: ${title}\\n\") :immediate-finish t :unnarrowed t)) :info (list :citekey citekey) :node (org-roam-node-create :title title) :props '(:finalize find-file)) (org-roam-ref-add (concat \"@\" citekey)))) (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note)) (my/space-leader-def \"rc\" '(citar-org-roam-cited :wk \"Cited Roam Node\")) bibtex-completionbibtex-completion 这个包是 org-roam-bibtex 的依赖。 (use-package bibtex-completion :after org-roam-bibtex :config (setq bibtex-completion-bibliography org-cite-global-bibliography) (setq bibtex-completion-notes-p","date":"2023-02-26","objectID":"/posts/emacs/:9:18","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#biblio"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#latex"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#auctex"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#fontification"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#cdlatex"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#reftex"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ox-latex"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#auctex-latexmk"},{"categories":null,"content":"latex参考资料：fast latex input. Latex 可以结合 eglot 使用，有多个 server 可以使用， digestif 和 =texlab=，我使用前者。 AuctexAuctex 若通过源文件安装，需要先将其克隆到本地，然后执行： ./autogen.sh ./configure make sudo make install emacs 上有 latex-mode 和 LaTeX-mode 两个，使用哪个取决于是否安装了 auctex 这个包。若有，使用 LaTex-mode 就好。 (use-package tex :mode (\".tex\" . LaTeX-mode) :init (load \"auctex.el\" nil t t) (load \"preview-latex.el\" nil t t) :config (setq TeX-auto-save t) (setq TeX-parse-self t) (setq TeX-save-query nil) (setq TeX-electric-sub-and-superscript t) (setq TeX-auto-local \".auctex-auto\") (setq TeX-style-local \".auctex-style\") (setq TeX-source-correlate-mode t) (setq TeX-source-correlate-method 'synctex) (setq TeX-source-correlate-start-server nil) (setq-default TeX-master t) (add-to-list 'TeX-command-list '(\"XeLaTeX\" \"%`xelatex%(mode)%' %t\" TeX-run-TeX nil t)) (add-to-list 'TeX-view-program-selection '(output-pdf \"PDF Tools\")) (add-to-list 'TeX-view-program-list '(\"PDF Tools\" TeX-pdf-tools-sync-view)) (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)) (use-package latex :bind (:map LaTeX-mode-map (\"C-c h\" . TeX-doc))) fontificationmacros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange. (use-package font-latex :after tex :config (setq font-latex-match-reference-keywords '(;; BibLaTeX. (\"printbibliography\" \"[{\") (\"addbibresource\" \"[{\") ;; Standard commands. (\"cite\" \"[{\") (\"citep\" \"[{\") (\"citet\" \"[{\") (\"Cite\" \"[{\") (\"parencite\" \"[{\") (\"Parencite\" \"[{\") (\"footcite\" \"[{\") (\"footcitetext\" \"[{\") ;; Style-specific commands. (\"textcite\" \"[{\") (\"Textcite\" \"[{\") (\"smartcite\" \"[{\") (\"Smartcite\" \"[{\") (\"cite*\" \"[{\") (\"parencite*\" \"[{\") (\"supercite\" \"[{\") ;; Qualified citation lists. (\"cites\" \"[{\") (\"Cites\" \"[{\") (\"parencites\" \"[{\") (\"Parencites\" \"[{\") (\"footcites\" \"[{\") (\"footcitetexts\" \"[{\") (\"smartcites\" \"[{\") (\"Smartcites\" \"[{\") (\"textcites\" \"[{\") (\"Textcites\" \"[{\") (\"supercites\" \"[{\") ;; Style-independent commands. (\"autocite\" \"[{\") (\"Autocite\" \"[{\") (\"autocite*\" \"[{\") (\"Autocite*\" \"[{\") (\"autocites\" \"[{\") (\"Autocites\" \"[{\") ;; Text commands. (\"citeauthor\" \"[{\") (\"Citeauthor\" \"[{\") (\"citetitle\" \"[{\") (\"citetitle*\" \"[{\") (\"citeyear\" \"[{\") (\"citedate\" \"[{\") (\"citeurl\" \"[{\") ;; Special commands. (\"fullcite\" \"[{\") ;; Cleveref. (\"cref\" \"{\") (\"Cref\" \"{\") (\"cpageref\" \"{\") (\"Cpageref\" \"{\") (\"cpagerefrange\" \"{\") (\"Cpagerefrange\" \"{\") (\"crefrange\" \"{\") (\"Crefrange\" \"{\") (\"labelcref\" \"{\"))) (setq font-latex-match-textual-keywords '(;; BibLaTeX brackets. (\"parentext\" \"{\") (\"brackettext\" \"{\") (\"hybridblockquote\" \"[{\") ;; Auxiliary commands. (\"textelp\" \"{\") (\"textelp*\" \"{\") (\"textins\" \"{\") (\"textins*\" \"{\") ;; Subcaption. (\"subcaption\" \"[{\"))) (setq font-latex-match-variable-keywords '(;; Amsmath. (\"numberwithin\" \"{\") ;; Enumitem. (\"setlist\" \"[{\") (\"setlist*\" \"[{\") (\"newlist\" \"{\") (\"renewlist\" \"{\") (\"setlistdepth\" \"{\") (\"restartlist\" \"{\") (\"crefname\" \"{\")))) cdlatex(use-package cdlatex :hook ((LaTeX-mode . turn-on-cdlatex) (org-mode . org-cdlatex-mode))) ReftexHide mode line see hide-mode-line. (use-package reftex :hook ((LaTeX-mode . turn-on-reftex) (reftex-toc-mode . menu-bar--visual-line-mode-enable) (reftex-toc-mode . hide-mode-line-mode)) :config (setq reftex-toc-split-windows-horizontally t) (setq reftex-toc-split-windows-fraction 0.25)) ox-latex(use-package org :config (setq org-highlight-latex-and-related '(latex script))) (use-package ox-latex :defer 3 :config (setq org-latex-src-block-backend 'minted) (setq org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"artic","date":"2023-02-26","objectID":"/posts/emacs/:9:19","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ox-beamer"},{"categories":null,"content":"Blog使用 org-mode 写 blog 有两个方法，一个是使用 ox-hugo, 另外一个就是使用 org-publish. 这两个都可以基于 github 建立自己的博客。 使用 deft 管理自己的写作，原先想使用 denote 进行，但是 denote 创建的文件名过长，会导致 undo-fu-session 报 file name too long 的错误。 发现使用 consult-notes 比 deft 好用。Deft 默认创建的文件名是一串日期格式，没有直接使用 title 直观。虽然可以使用 deft 提供的界面查找文件，但是不能结合 vertico 直接使用拼音进行中文的检索。 ox-hugo(use-package ox-hugo :defer 3 :after ox) ox-html(use-package ox-html :after ox :config (setq org-html-preamble t) (setq org-html-preamble-format '((\"en\" \"\u003ca href=\\\"/index.html\\\" class=\\\"button\\\"\u003eHome\u003c/a\u003e \u003ca href=\\\"/notes/index.html\\\" class=\\\"button\\\"\u003eNotes\u003c/a\u003e \u003ca href=\\\"/engineering/index.html\\\" class=\\\"button\\\"\u003eEngineering\u003c/a\u003e \u003ca href=\\\"/movies/index.html\\\" class=\\\"button\\\"\u003eMovies\u003c/a\u003e \u003ca href=\\\"/books/index.html\\\" class=\\\"button\\\"\u003eBooks\u003c/a\u003e \u003ca href=\\\"/about.html\\\" class=\\\"button\\\"\u003eAbout\u003c/a\u003e \u003chr\u003e\"))) (setq org-html-postamble t) (setq org-html-postamble-format '((\"en\" \"\u003chr\u003e\u003cdiv class=\\\"generated\\\"\u003eCreated with %c on MacOS\u003c/div\u003e\"))) (setq org-html-head-include-default-style nil) (setq org-html-head \"\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"../css/style.css\\\" /\u003e\")) ox-publish(use-package ox-publish :after ox :config (defvar my/publish-directory \"~/shuyi.github.io\") (setq org-publish-project-alist `((\"site\" :base-directory ,website-directory :base-extension \"org\" :recursive nil :publishing-directory ,my/publish-directory :publishing-function org-html-publish-to-html) (\"notes\" :base-directory ,(expand-file-name \"notes\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"notes\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Notes\" :sitemap-sort-files anti-chronologically) (\"books\" :base-directory ,(expand-file-name \"books\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"books\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Books\" :sitemap-sort-files anti-chronologically) (\"movies\" :base-directory ,(expand-file-name \"movies\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"movies\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Movies\" :sitemap-sort-files anti-chronologically) (\"engineering\" :base-directory ,(expand-file-name \"engineering\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"engineering\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Engineering\" :sitemap-sort-files anti-chronologically) (\"static\" :base-directory ,website-directory :base-extension \"css\\\\|txt\\\\|jpg\\\\|gif\\\\|png\" :recursive t :publishing-directory ,my/publish-directory :publishing-function org-publish-attachment) (\"personal-website\" :components (\"site\" \"notes\" \"books\" \"movies\" \"engineering\" \"static\"))))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:20","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#blog"},{"categories":null,"content":"Blog使用 org-mode 写 blog 有两个方法，一个是使用 ox-hugo, 另外一个就是使用 org-publish. 这两个都可以基于 github 建立自己的博客。 使用 deft 管理自己的写作，原先想使用 denote 进行，但是 denote 创建的文件名过长，会导致 undo-fu-session 报 file name too long 的错误。 发现使用 consult-notes 比 deft 好用。Deft 默认创建的文件名是一串日期格式，没有直接使用 title 直观。虽然可以使用 deft 提供的界面查找文件，但是不能结合 vertico 直接使用拼音进行中文的检索。 ox-hugo(use-package ox-hugo :defer 3 :after ox) ox-html(use-package ox-html :after ox :config (setq org-html-preamble t) (setq org-html-preamble-format '((\"en\" \"Home Notes Engineering Movies Books About \"))) (setq org-html-postamble t) (setq org-html-postamble-format '((\"en\" \"Created with %c on MacOS\"))) (setq org-html-head-include-default-style nil) (setq org-html-head \"\")) ox-publish(use-package ox-publish :after ox :config (defvar my/publish-directory \"~/shuyi.github.io\") (setq org-publish-project-alist `((\"site\" :base-directory ,website-directory :base-extension \"org\" :recursive nil :publishing-directory ,my/publish-directory :publishing-function org-html-publish-to-html) (\"notes\" :base-directory ,(expand-file-name \"notes\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"notes\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Notes\" :sitemap-sort-files anti-chronologically) (\"books\" :base-directory ,(expand-file-name \"books\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"books\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Books\" :sitemap-sort-files anti-chronologically) (\"movies\" :base-directory ,(expand-file-name \"movies\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"movies\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Movies\" :sitemap-sort-files anti-chronologically) (\"engineering\" :base-directory ,(expand-file-name \"engineering\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"engineering\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Engineering\" :sitemap-sort-files anti-chronologically) (\"static\" :base-directory ,website-directory :base-extension \"css\\\\|txt\\\\|jpg\\\\|gif\\\\|png\" :recursive t :publishing-directory ,my/publish-directory :publishing-function org-publish-attachment) (\"personal-website\" :components (\"site\" \"notes\" \"books\" \"movies\" \"engineering\" \"static\"))))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:20","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ox-hugo"},{"categories":null,"content":"Blog使用 org-mode 写 blog 有两个方法，一个是使用 ox-hugo, 另外一个就是使用 org-publish. 这两个都可以基于 github 建立自己的博客。 使用 deft 管理自己的写作，原先想使用 denote 进行，但是 denote 创建的文件名过长，会导致 undo-fu-session 报 file name too long 的错误。 发现使用 consult-notes 比 deft 好用。Deft 默认创建的文件名是一串日期格式，没有直接使用 title 直观。虽然可以使用 deft 提供的界面查找文件，但是不能结合 vertico 直接使用拼音进行中文的检索。 ox-hugo(use-package ox-hugo :defer 3 :after ox) ox-html(use-package ox-html :after ox :config (setq org-html-preamble t) (setq org-html-preamble-format '((\"en\" \"Home Notes Engineering Movies Books About \"))) (setq org-html-postamble t) (setq org-html-postamble-format '((\"en\" \"Created with %c on MacOS\"))) (setq org-html-head-include-default-style nil) (setq org-html-head \"\")) ox-publish(use-package ox-publish :after ox :config (defvar my/publish-directory \"~/shuyi.github.io\") (setq org-publish-project-alist `((\"site\" :base-directory ,website-directory :base-extension \"org\" :recursive nil :publishing-directory ,my/publish-directory :publishing-function org-html-publish-to-html) (\"notes\" :base-directory ,(expand-file-name \"notes\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"notes\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Notes\" :sitemap-sort-files anti-chronologically) (\"books\" :base-directory ,(expand-file-name \"books\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"books\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Books\" :sitemap-sort-files anti-chronologically) (\"movies\" :base-directory ,(expand-file-name \"movies\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"movies\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Movies\" :sitemap-sort-files anti-chronologically) (\"engineering\" :base-directory ,(expand-file-name \"engineering\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"engineering\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Engineering\" :sitemap-sort-files anti-chronologically) (\"static\" :base-directory ,website-directory :base-extension \"css\\\\|txt\\\\|jpg\\\\|gif\\\\|png\" :recursive t :publishing-directory ,my/publish-directory :publishing-function org-publish-attachment) (\"personal-website\" :components (\"site\" \"notes\" \"books\" \"movies\" \"engineering\" \"static\"))))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:20","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ox-html"},{"categories":null,"content":"Blog使用 org-mode 写 blog 有两个方法，一个是使用 ox-hugo, 另外一个就是使用 org-publish. 这两个都可以基于 github 建立自己的博客。 使用 deft 管理自己的写作，原先想使用 denote 进行，但是 denote 创建的文件名过长，会导致 undo-fu-session 报 file name too long 的错误。 发现使用 consult-notes 比 deft 好用。Deft 默认创建的文件名是一串日期格式，没有直接使用 title 直观。虽然可以使用 deft 提供的界面查找文件，但是不能结合 vertico 直接使用拼音进行中文的检索。 ox-hugo(use-package ox-hugo :defer 3 :after ox) ox-html(use-package ox-html :after ox :config (setq org-html-preamble t) (setq org-html-preamble-format '((\"en\" \"Home Notes Engineering Movies Books About \"))) (setq org-html-postamble t) (setq org-html-postamble-format '((\"en\" \"Created with %c on MacOS\"))) (setq org-html-head-include-default-style nil) (setq org-html-head \"\")) ox-publish(use-package ox-publish :after ox :config (defvar my/publish-directory \"~/shuyi.github.io\") (setq org-publish-project-alist `((\"site\" :base-directory ,website-directory :base-extension \"org\" :recursive nil :publishing-directory ,my/publish-directory :publishing-function org-html-publish-to-html) (\"notes\" :base-directory ,(expand-file-name \"notes\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"notes\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Notes\" :sitemap-sort-files anti-chronologically) (\"books\" :base-directory ,(expand-file-name \"books\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"books\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Books\" :sitemap-sort-files anti-chronologically) (\"movies\" :base-directory ,(expand-file-name \"movies\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"movies\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Movies\" :sitemap-sort-files anti-chronologically) (\"engineering\" :base-directory ,(expand-file-name \"engineering\" website-directory) :base-extension \"org\" :publishing-directory ,(expand-file-name \"engineering\" my/publish-directory) :publishing-function org-html-publish-to-html :auto-sitemap t :sitemap-filename \"index.org\" :sitemap-title \"Engineering\" :sitemap-sort-files anti-chronologically) (\"static\" :base-directory ,website-directory :base-extension \"css\\\\|txt\\\\|jpg\\\\|gif\\\\|png\" :recursive t :publishing-directory ,my/publish-directory :publishing-function org-publish-attachment) (\"personal-website\" :components (\"site\" \"notes\" \"books\" \"movies\" \"engineering\" \"static\"))))) ","date":"2023-02-26","objectID":"/posts/emacs/:9:20","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#ox-publish"},{"categories":null,"content":"Applications","date":"2023-02-26","objectID":"/posts/emacs/:10:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#applications"},{"categories":null,"content":"Browser;; eww ;; Install readability first. ;; npm install -g readability-cli ;; (setq eww-retrieve-command '(\"readable\")) ;; Another choice `websearch'. ;; Search engine (use-package engine-mode :hook (on-first-input . engine-mode) :config (defengine google \"https://google.com/search?q=%s\" :keybinding \"g\" :docstring \"Search Google.\") (defengine wikipedia \"https://en.wikipedia.org/wiki/Special:Search?search=%s\" :keybinding \"w\" :docstring \"Search Wikipedia.\") (defengine github \"https://github.com/search?ref=simplesearch\u0026q=%s\" :keybinding \"h\" :docstring \"Search GitHub.\") (defengine youtube \"http://www.youtube.com/results?aq=f\u0026oq=\u0026search_query=%s\" :keybinding \"y\" :docstring \"Search YouTube.\") (defengine moviedouban \"https://search.douban.com/movie/subject_search?search_text=%s\" :keybinding \"m\" :docstring \"Search Moive DouBan.\") (defengine bookdouban \"https://search.douban.com/book/subject_search?search_text=%s\" :keybinding \"b\" :docstring \"Search Book DouBan.\") (defengine zhihu \"https://www.zhihu.com/search?type=content\u0026q=%s\" :keybinding \"z\" :docstring \"Search Zhihu.\")) (my/comma-leader-def \"s\" '(:ignore t :wk \"Search\") \"sb\" '(engine/search-bookdouban :wk \"Book DouBan\") \"ss\" '(engine/search-google :wk \"Google\") \"sg\" '(engine/search-github :wk \"Github\") \"sy\" '(engine/search-youtube :wk \"Youtube\") \"sw\" '(engine/search-wikipedia :wk \"Wikipedia\") \"sm\" '(engine/search-moviedouban :wk \"Movie DouBan\") \"sz\" '(engine/search-zhihu :wk \"Zhihu\") \"sr\" '(rg :wk \"rg\") \"sl\" '(consult-git-log-grep :wk \"Git Log Grep\")) xuchunyang/grab-mac-link.el: Grab link from Mac Apps and insert it into Emacs. 很方便的在文件中增加当前浏览网页的链接，我使用 MacOS, 常用的是 Safari 浏览器。 (use-package grab-mac-link :commands grab-mac-link-dwim :preface (defun my/link-grab () (interactive) (grab-mac-link-dwim 'safari)) :bind (\"\u003cf8\u003e\" . my/link-grab)) ","date":"2023-02-26","objectID":"/posts/emacs/:10:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#browser"},{"categories":null,"content":"Elfeedhttps://github.com/skeeto/elfeed (use-package elfeed :bind (\"C-c , r\" . elfeed) :preface (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) :config (setq elfeed-show-entry-switch #'elfeed-display-buffer)) (my/comma-leader-def \"r\" '(elfeed-summary :wk \"Elfeed\")) elfeed-orgremyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file 通过 org 集中管理 elfeed 源。 (use-package elfeed-org :after elfeed :init (setq rmh-elfeed-org-files `(,(concat my-galaxy \"/rss/elfeed.org\")))) (defun my/rss-source () \"Open elfeed config file.\" (interactive) (find-file (car rmh-elfeed-org-files))) (my/space-leader-def \"foe\" '(my/rss-source :wk \"Elfeed file\")) elfeed-summarySqrtMinusOne/elfeed-summary: Feed summary interface for elfeed (use-package elfeed-summary :bind (\"C-c , r\" . elfeed-summary) :config (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"科技\") (:elements (query . (and tec (not emacs) (not blogs))) (group (:title . \"Emacs\") (:elements (query . emacs)) (:face . org-level-1)) (group (:title . \"Blogs\") (:elements (query . blogs))))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))) (group (:title . \"Finance\") (:elements (query . finance))) (group (:title . \"Youtube\") (:elements (query . video))))) (advice-add 'elfeed-summary :after 'elfeed-summary-update) (advice-add 'elfeed-summary :before 'elfeed-org)) karthink/elfeed-tube: Youtube integration for Elfeed, the feed reader for Emacs 不知道为什么不能更新 RSS. 暂时停用了。 (with-eval-after-load 'elfeed (require 'elfeed-tube) (elfeed-tube-setup) (define-key elfeed-show-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-show-mode-map [remap save-buffer] 'elfeed-tube-save) (define-key elfeed-search-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-search-mode-map [remap save-buffer] 'elfeed-tube-save) (require-package 'elfeed-tube-mpv) (with-eval-after-load 'elfeed (require 'elfeed-tube-mpv) (define-key elfeed-show-mode-map (kbd \"C-c C-f\") 'elfeed-tube-mpv-follow-mode) (define-key elfeed-show-mode-map (kbd \"C-c C-w\") 'elfeed-tube-mpv-where))) ","date":"2023-02-26","objectID":"/posts/emacs/:10:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#elfeed"},{"categories":null,"content":"Elfeedhttps://github.com/skeeto/elfeed (use-package elfeed :bind (\"C-c , r\" . elfeed) :preface (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) :config (setq elfeed-show-entry-switch #'elfeed-display-buffer)) (my/comma-leader-def \"r\" '(elfeed-summary :wk \"Elfeed\")) elfeed-orgremyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file 通过 org 集中管理 elfeed 源。 (use-package elfeed-org :after elfeed :init (setq rmh-elfeed-org-files `(,(concat my-galaxy \"/rss/elfeed.org\")))) (defun my/rss-source () \"Open elfeed config file.\" (interactive) (find-file (car rmh-elfeed-org-files))) (my/space-leader-def \"foe\" '(my/rss-source :wk \"Elfeed file\")) elfeed-summarySqrtMinusOne/elfeed-summary: Feed summary interface for elfeed (use-package elfeed-summary :bind (\"C-c , r\" . elfeed-summary) :config (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"科技\") (:elements (query . (and tec (not emacs) (not blogs))) (group (:title . \"Emacs\") (:elements (query . emacs)) (:face . org-level-1)) (group (:title . \"Blogs\") (:elements (query . blogs))))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))) (group (:title . \"Finance\") (:elements (query . finance))) (group (:title . \"Youtube\") (:elements (query . video))))) (advice-add 'elfeed-summary :after 'elfeed-summary-update) (advice-add 'elfeed-summary :before 'elfeed-org)) karthink/elfeed-tube: Youtube integration for Elfeed, the feed reader for Emacs 不知道为什么不能更新 RSS. 暂时停用了。 (with-eval-after-load 'elfeed (require 'elfeed-tube) (elfeed-tube-setup) (define-key elfeed-show-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-show-mode-map [remap save-buffer] 'elfeed-tube-save) (define-key elfeed-search-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-search-mode-map [remap save-buffer] 'elfeed-tube-save) (require-package 'elfeed-tube-mpv) (with-eval-after-load 'elfeed (require 'elfeed-tube-mpv) (define-key elfeed-show-mode-map (kbd \"C-c C-f\") 'elfeed-tube-mpv-follow-mode) (define-key elfeed-show-mode-map (kbd \"C-c C-w\") 'elfeed-tube-mpv-where))) ","date":"2023-02-26","objectID":"/posts/emacs/:10:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#elfeed-org"},{"categories":null,"content":"Elfeedhttps://github.com/skeeto/elfeed (use-package elfeed :bind (\"C-c , r\" . elfeed) :preface (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) :config (setq elfeed-show-entry-switch #'elfeed-display-buffer)) (my/comma-leader-def \"r\" '(elfeed-summary :wk \"Elfeed\")) elfeed-orgremyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file 通过 org 集中管理 elfeed 源。 (use-package elfeed-org :after elfeed :init (setq rmh-elfeed-org-files `(,(concat my-galaxy \"/rss/elfeed.org\")))) (defun my/rss-source () \"Open elfeed config file.\" (interactive) (find-file (car rmh-elfeed-org-files))) (my/space-leader-def \"foe\" '(my/rss-source :wk \"Elfeed file\")) elfeed-summarySqrtMinusOne/elfeed-summary: Feed summary interface for elfeed (use-package elfeed-summary :bind (\"C-c , r\" . elfeed-summary) :config (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"科技\") (:elements (query . (and tec (not emacs) (not blogs))) (group (:title . \"Emacs\") (:elements (query . emacs)) (:face . org-level-1)) (group (:title . \"Blogs\") (:elements (query . blogs))))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))) (group (:title . \"Finance\") (:elements (query . finance))) (group (:title . \"Youtube\") (:elements (query . video))))) (advice-add 'elfeed-summary :after 'elfeed-summary-update) (advice-add 'elfeed-summary :before 'elfeed-org)) karthink/elfeed-tube: Youtube integration for Elfeed, the feed reader for Emacs 不知道为什么不能更新 RSS. 暂时停用了。 (with-eval-after-load 'elfeed (require 'elfeed-tube) (elfeed-tube-setup) (define-key elfeed-show-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-show-mode-map [remap save-buffer] 'elfeed-tube-save) (define-key elfeed-search-mode-map (kbd \"F\") 'elfeed-tube-fetch) (define-key elfeed-search-mode-map [remap save-buffer] 'elfeed-tube-save) (require-package 'elfeed-tube-mpv) (with-eval-after-load 'elfeed (require 'elfeed-tube-mpv) (define-key elfeed-show-mode-map (kbd \"C-c C-f\") 'elfeed-tube-mpv-follow-mode) (define-key elfeed-show-mode-map (kbd \"C-c C-w\") 'elfeed-tube-mpv-where))) ","date":"2023-02-26","objectID":"/posts/emacs/:10:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#elfeed-summary"},{"categories":null,"content":"Readerpdf-tools升级 pdf-tools 后要重新生成 epdfinfo 文件，最好的方式就是重装 pdf-tools，以免有问题。 (use-package pdf-tools :hook ((doc-view-mode . pdf-tools-install) (dirvish-setup . pdf-tools-install) (pdf-tools-enabled . pdf-view-themed-minor-mode))) (use-package pdf-view :mode (\"\\\\.[pP][dD][fF]\\\\'\" . pdf-view-mode) :magic (\"%PDF\" . pdf-view-mode) :config (pdf-tools-install t nil t nil) (evil-declare-key 'normal pdf-view-mode-map \"gh\" 'pdf-annot-add-highlight-markup-annotation \"ga\" 'pdf-annot-add-text-annotation \"gd\" 'pdf-annot-delete) :init (setq pdf-view-display-size 'fit-width) (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil)) (use-package pdf-occur :hook (pdf-view-mode . pdf-occur-global-minor-mode)) (use-package pdf-history :hook (pdf-view-mode . pdf-history-minor-mode)) (use-package pdf-links :hook (pdf-view-mode . pdf-links-minor-mode)) (defun my/get-file-name () \"Copy pdf file name.\" (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (use-package pdf-outline :hook ((pdf-view-mode . pdf-outline-minor-mode) (pdf-outline-buffer-mode . hide-mode-line-mode)) :bind (:map pdf-outline-buffer-mode-map (\"RET\" . pdf-outline-follow-link-and-quit))) (use-package pdf-annot :hook (pdf-view-mode . pdf-annot-minor-mode) :bind (:map pdf-annot-edit-contents-minor-mode-map (\"\u003creturn\u003e\" . pdf-annot-edit-contents-commit) (\"\u003cS-return\u003e\" . newline))) (use-package pdf-sync :hook (pdf-view-mode . pdf-sync-minor-mode)) (use-package pdf-cache :after pdf-view :config (define-pdf-cache-function pagelabels)) (use-package pdf-misc :after pdf-view :config (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support.\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) :bind (:map pdf-view-mode-map ([remap pdf-misc-print-document] . mrb/pdf-misc-print-pages))) (defun my/pdf-extract-highlight () \"Extract highlight to plain text. When it finised, it will jump to note file.\" (interactive) (let* ((pdf-filename (buffer-name)) (txt-filename (make-temp-name \"/tmp/annot-\")) (org-file (read-file-name \"Save extracted highlights to org file: \" (expand-file-name \"roam/ref/\" my-galaxy))) (org-heading \"Highlights\") (process (start-process-shell-command \"pdfannots\" nil (format \"python3 ~/pdfannots/pdfannots.py \\\"%s\\\" -o \\\"%s\\\"\" pdf-filename txt-filename)))) (set-process-sentinel process (lambda (process _event) (when (eq (process-status process) 'exit) (find-file org-file) (goto-char (point-min)) (if (re-search-forward (format \"^* %s\" org-heading) nil t) (progn (end-of-line) (insert \"\\n\") (insert-file-contents txt-filename) (delete-file txt-filename) (message \"PDF highlights added to org heading '%s'\" org-heading)) (message \"Org heading '%s' not found\" org-heading))))))) (my/comma-leader-def \"h\" '(my/pdf-extract-highlight :wk \"Extract highlight\")) (defun my/dired-pdf-to-png () (interactive) (let* ((filename (dired-get-filename))) (if (string-match \"\\.pdf\" filename) (let* ((pdf-base-name (file-name-sans-extension (file-name-nondirectory filename))) (png (concat pdf-base-name \".png\")) (pdf-info (shell-command-to-string (format \"pdfinfo %s | grep Pages | awk '{print $2}'\" filename))) (pdf-pages (string-to-number pdf-info))) (when (file-exists-p png) (delete-file png)) (if (= pdf-pages 1) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -singlefile -r 600 %s %s -png\" filename pdf-base-name)) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -r 600 %s %s -png\" filename p","date":"2023-02-26","objectID":"/posts/emacs/:10:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#reader"},{"categories":null,"content":"Readerpdf-tools升级 pdf-tools 后要重新生成 epdfinfo 文件，最好的方式就是重装 pdf-tools，以免有问题。 (use-package pdf-tools :hook ((doc-view-mode . pdf-tools-install) (dirvish-setup . pdf-tools-install) (pdf-tools-enabled . pdf-view-themed-minor-mode))) (use-package pdf-view :mode (\"\\\\.[pP][dD][fF]\\\\'\" . pdf-view-mode) :magic (\"%PDF\" . pdf-view-mode) :config (pdf-tools-install t nil t nil) (evil-declare-key 'normal pdf-view-mode-map \"gh\" 'pdf-annot-add-highlight-markup-annotation \"ga\" 'pdf-annot-add-text-annotation \"gd\" 'pdf-annot-delete) :init (setq pdf-view-display-size 'fit-width) (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil)) (use-package pdf-occur :hook (pdf-view-mode . pdf-occur-global-minor-mode)) (use-package pdf-history :hook (pdf-view-mode . pdf-history-minor-mode)) (use-package pdf-links :hook (pdf-view-mode . pdf-links-minor-mode)) (defun my/get-file-name () \"Copy pdf file name.\" (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (use-package pdf-outline :hook ((pdf-view-mode . pdf-outline-minor-mode) (pdf-outline-buffer-mode . hide-mode-line-mode)) :bind (:map pdf-outline-buffer-mode-map (\"RET\" . pdf-outline-follow-link-and-quit))) (use-package pdf-annot :hook (pdf-view-mode . pdf-annot-minor-mode) :bind (:map pdf-annot-edit-contents-minor-mode-map (\"\" . pdf-annot-edit-contents-commit) (\"\" . newline))) (use-package pdf-sync :hook (pdf-view-mode . pdf-sync-minor-mode)) (use-package pdf-cache :after pdf-view :config (define-pdf-cache-function pagelabels)) (use-package pdf-misc :after pdf-view :config (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support.\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) :bind (:map pdf-view-mode-map ([remap pdf-misc-print-document] . mrb/pdf-misc-print-pages))) (defun my/pdf-extract-highlight () \"Extract highlight to plain text. When it finised, it will jump to note file.\" (interactive) (let* ((pdf-filename (buffer-name)) (txt-filename (make-temp-name \"/tmp/annot-\")) (org-file (read-file-name \"Save extracted highlights to org file: \" (expand-file-name \"roam/ref/\" my-galaxy))) (org-heading \"Highlights\") (process (start-process-shell-command \"pdfannots\" nil (format \"python3 ~/pdfannots/pdfannots.py \\\"%s\\\" -o \\\"%s\\\"\" pdf-filename txt-filename)))) (set-process-sentinel process (lambda (process _event) (when (eq (process-status process) 'exit) (find-file org-file) (goto-char (point-min)) (if (re-search-forward (format \"^* %s\" org-heading) nil t) (progn (end-of-line) (insert \"\\n\") (insert-file-contents txt-filename) (delete-file txt-filename) (message \"PDF highlights added to org heading '%s'\" org-heading)) (message \"Org heading '%s' not found\" org-heading))))))) (my/comma-leader-def \"h\" '(my/pdf-extract-highlight :wk \"Extract highlight\")) (defun my/dired-pdf-to-png () (interactive) (let* ((filename (dired-get-filename))) (if (string-match \"\\.pdf\" filename) (let* ((pdf-base-name (file-name-sans-extension (file-name-nondirectory filename))) (png (concat pdf-base-name \".png\")) (pdf-info (shell-command-to-string (format \"pdfinfo %s | grep Pages | awk '{print $2}'\" filename))) (pdf-pages (string-to-number pdf-info))) (when (file-exists-p png) (delete-file png)) (if (= pdf-pages 1) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -singlefile -r 600 %s %s -png\" filename pdf-base-name)) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -r 600 %s %s -png\" filename p","date":"2023-02-26","objectID":"/posts/emacs/:10:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#pdf-tools"},{"categories":null,"content":"Readerpdf-tools升级 pdf-tools 后要重新生成 epdfinfo 文件，最好的方式就是重装 pdf-tools，以免有问题。 (use-package pdf-tools :hook ((doc-view-mode . pdf-tools-install) (dirvish-setup . pdf-tools-install) (pdf-tools-enabled . pdf-view-themed-minor-mode))) (use-package pdf-view :mode (\"\\\\.[pP][dD][fF]\\\\'\" . pdf-view-mode) :magic (\"%PDF\" . pdf-view-mode) :config (pdf-tools-install t nil t nil) (evil-declare-key 'normal pdf-view-mode-map \"gh\" 'pdf-annot-add-highlight-markup-annotation \"ga\" 'pdf-annot-add-text-annotation \"gd\" 'pdf-annot-delete) :init (setq pdf-view-display-size 'fit-width) (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil)) (use-package pdf-occur :hook (pdf-view-mode . pdf-occur-global-minor-mode)) (use-package pdf-history :hook (pdf-view-mode . pdf-history-minor-mode)) (use-package pdf-links :hook (pdf-view-mode . pdf-links-minor-mode)) (defun my/get-file-name () \"Copy pdf file name.\" (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (use-package pdf-outline :hook ((pdf-view-mode . pdf-outline-minor-mode) (pdf-outline-buffer-mode . hide-mode-line-mode)) :bind (:map pdf-outline-buffer-mode-map (\"RET\" . pdf-outline-follow-link-and-quit))) (use-package pdf-annot :hook (pdf-view-mode . pdf-annot-minor-mode) :bind (:map pdf-annot-edit-contents-minor-mode-map (\"\" . pdf-annot-edit-contents-commit) (\"\" . newline))) (use-package pdf-sync :hook (pdf-view-mode . pdf-sync-minor-mode)) (use-package pdf-cache :after pdf-view :config (define-pdf-cache-function pagelabels)) (use-package pdf-misc :after pdf-view :config (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support.\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) :bind (:map pdf-view-mode-map ([remap pdf-misc-print-document] . mrb/pdf-misc-print-pages))) (defun my/pdf-extract-highlight () \"Extract highlight to plain text. When it finised, it will jump to note file.\" (interactive) (let* ((pdf-filename (buffer-name)) (txt-filename (make-temp-name \"/tmp/annot-\")) (org-file (read-file-name \"Save extracted highlights to org file: \" (expand-file-name \"roam/ref/\" my-galaxy))) (org-heading \"Highlights\") (process (start-process-shell-command \"pdfannots\" nil (format \"python3 ~/pdfannots/pdfannots.py \\\"%s\\\" -o \\\"%s\\\"\" pdf-filename txt-filename)))) (set-process-sentinel process (lambda (process _event) (when (eq (process-status process) 'exit) (find-file org-file) (goto-char (point-min)) (if (re-search-forward (format \"^* %s\" org-heading) nil t) (progn (end-of-line) (insert \"\\n\") (insert-file-contents txt-filename) (delete-file txt-filename) (message \"PDF highlights added to org heading '%s'\" org-heading)) (message \"Org heading '%s' not found\" org-heading))))))) (my/comma-leader-def \"h\" '(my/pdf-extract-highlight :wk \"Extract highlight\")) (defun my/dired-pdf-to-png () (interactive) (let* ((filename (dired-get-filename))) (if (string-match \"\\.pdf\" filename) (let* ((pdf-base-name (file-name-sans-extension (file-name-nondirectory filename))) (png (concat pdf-base-name \".png\")) (pdf-info (shell-command-to-string (format \"pdfinfo %s | grep Pages | awk '{print $2}'\" filename))) (pdf-pages (string-to-number pdf-info))) (when (file-exists-p png) (delete-file png)) (if (= pdf-pages 1) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -singlefile -r 600 %s %s -png\" filename pdf-base-name)) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -r 600 %s %s -png\" filename p","date":"2023-02-26","objectID":"/posts/emacs/:10:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#nov"},{"categories":null,"content":"Readerpdf-tools升级 pdf-tools 后要重新生成 epdfinfo 文件，最好的方式就是重装 pdf-tools，以免有问题。 (use-package pdf-tools :hook ((doc-view-mode . pdf-tools-install) (dirvish-setup . pdf-tools-install) (pdf-tools-enabled . pdf-view-themed-minor-mode))) (use-package pdf-view :mode (\"\\\\.[pP][dD][fF]\\\\'\" . pdf-view-mode) :magic (\"%PDF\" . pdf-view-mode) :config (pdf-tools-install t nil t nil) (evil-declare-key 'normal pdf-view-mode-map \"gh\" 'pdf-annot-add-highlight-markup-annotation \"ga\" 'pdf-annot-add-text-annotation \"gd\" 'pdf-annot-delete) :init (setq pdf-view-display-size 'fit-width) (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t) (setq pdf-view-use-imagemagick nil) (setq pdf-annot-activate-created-annotations nil)) (use-package pdf-occur :hook (pdf-view-mode . pdf-occur-global-minor-mode)) (use-package pdf-history :hook (pdf-view-mode . pdf-history-minor-mode)) (use-package pdf-links :hook (pdf-view-mode . pdf-links-minor-mode)) (defun my/get-file-name () \"Copy pdf file name.\" (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (use-package pdf-outline :hook ((pdf-view-mode . pdf-outline-minor-mode) (pdf-outline-buffer-mode . hide-mode-line-mode)) :bind (:map pdf-outline-buffer-mode-map (\"RET\" . pdf-outline-follow-link-and-quit))) (use-package pdf-annot :hook (pdf-view-mode . pdf-annot-minor-mode) :bind (:map pdf-annot-edit-contents-minor-mode-map (\"\" . pdf-annot-edit-contents-commit) (\"\" . newline))) (use-package pdf-sync :hook (pdf-view-mode . pdf-sync-minor-mode)) (use-package pdf-cache :after pdf-view :config (define-pdf-cache-function pagelabels)) (use-package pdf-misc :after pdf-view :config (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support.\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) :bind (:map pdf-view-mode-map ([remap pdf-misc-print-document] . mrb/pdf-misc-print-pages))) (defun my/pdf-extract-highlight () \"Extract highlight to plain text. When it finised, it will jump to note file.\" (interactive) (let* ((pdf-filename (buffer-name)) (txt-filename (make-temp-name \"/tmp/annot-\")) (org-file (read-file-name \"Save extracted highlights to org file: \" (expand-file-name \"roam/ref/\" my-galaxy))) (org-heading \"Highlights\") (process (start-process-shell-command \"pdfannots\" nil (format \"python3 ~/pdfannots/pdfannots.py \\\"%s\\\" -o \\\"%s\\\"\" pdf-filename txt-filename)))) (set-process-sentinel process (lambda (process _event) (when (eq (process-status process) 'exit) (find-file org-file) (goto-char (point-min)) (if (re-search-forward (format \"^* %s\" org-heading) nil t) (progn (end-of-line) (insert \"\\n\") (insert-file-contents txt-filename) (delete-file txt-filename) (message \"PDF highlights added to org heading '%s'\" org-heading)) (message \"Org heading '%s' not found\" org-heading))))))) (my/comma-leader-def \"h\" '(my/pdf-extract-highlight :wk \"Extract highlight\")) (defun my/dired-pdf-to-png () (interactive) (let* ((filename (dired-get-filename))) (if (string-match \"\\.pdf\" filename) (let* ((pdf-base-name (file-name-sans-extension (file-name-nondirectory filename))) (png (concat pdf-base-name \".png\")) (pdf-info (shell-command-to-string (format \"pdfinfo %s | grep Pages | awk '{print $2}'\" filename))) (pdf-pages (string-to-number pdf-info))) (when (file-exists-p png) (delete-file png)) (if (= pdf-pages 1) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -singlefile -r 600 %s %s -png\" filename pdf-base-name)) (start-process-shell-command \"pdf-to-png\" nil (format \"pdftoppm -r 600 %s %s -png\" filename p","date":"2023-02-26","objectID":"/posts/emacs/:10:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#calibredb"},{"categories":null,"content":"vterm使用akermu/emacs-libvterm: Emacs libvterm integration 替代了内置的 eshell. (use-package vterm :bind (\"C-c , v\" . toggle-vterm) :config (setq vterm-kill-buffer-on-exit t) (setq vterm-max-scrollback 5000) (add-to-list 'display-buffer-alist '(\"\\\\*vterm\\\\*\" (display-buffer-in-side-window) (window-height . 0.35) (side . bottom) (slot . -1))) (defun toggle-vterm () \"Toggle vterm on or off.\" (interactive) (if (get-buffer-window \"*vterm*\") (delete-window (get-buffer-window \"*vterm*\")) (progn (vterm) (evil-insert 1))))) (my/comma-leader-def \"v\" '(toggle-vterm :wk \"vterm\")) ","date":"2023-02-26","objectID":"/posts/emacs/:10:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#vterm"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#mail"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#personal-info"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#message"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#mu4e"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#mu4e-actions"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#icons"},{"categories":null,"content":"MailPersonal Info(setq user-full-name \"Duan Ning\") (setq user-mail-address \"duan_n@outlook.com\") Message(setq message-sendmail-envelope-from 'header) (setq message-kill-buffer-query nil) (setq message-sendmail-extra-arguments '(\"-a\" \"outlook\")) (setq message-send-mail-function 'sendmail-send-it) Mu4e在 MacOS 上配置 mu 和 mu4e 的教程见：Email setup in Emacs with Mu4e on macOS | macOS \u0026 (open-source) Software. 上述的教程写的很详细，按照步骤进行一定会成功。 配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误： error in process sentinel: mu4e–server-sentinel: Mu server process ended with exit code 1 error in process sentinel: Mu server process ended with exit code 1 这时需要在终端下执行以下的命令来恢复 mu 的状态。 mu init --maildir=~/.maildir --my-address=your_email_account \u0026\u0026 mu index 启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。 (add-to-list 'load-path \"/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e\") (unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background))) 这里有个 rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs) 看着很好看，但是不实用，不要再尝试。 (with-eval-after-load 'mu4e (setq mail-user-agent 'mu4e-user-agent) (setq mu4e-mu-binary (executable-find \"mu\")) (setq mu4e-update-interval (* 15 60)) (setq mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-index-update-in-background t) (setq mu4e-index-update-error-warning t) (setq mu4e-index-update-error-warning nil) (setq mu4e-index-cleanup t) (setq mu4e-view-show-images t) (setq mu4e-view-image-max-width 800) (setq mu4e-view-show-addresses t) (setq mu4e-confirm-quit nil) (setq mu4e-context-policy 'pick-first) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (setq mu4e-view-prefer-html nil) (setq mu4e-html2text-command 'mu4e-shr2text) (setq mu4e-main-hide-personal-addresses t) (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 4) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) (setq mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (setq mu4e-compose-format-flowed nil) (setq mu4e-compose-signature-auto-include nil) (setq mu4e-compose-dont-reply-to-self t)) 若要把 mail 和 org 笔记相结合，可以使用 org-store-link 和 org-insert-link 给合使用，在 org 文件中插入 mail 的链接。 (with-eval-after-load 'mu4e (define-key mu4e-headers-mode-map (kbd \"C-c l\") 'org-store-link)) (my/comma-leader-def \"e\" '(mu4e :wk \"MAIL\")) mu4e-actionsSave mail to pdf as backup. (defun extra-email-to-pdf (msg \u0026optional args) \"Pdf temp file MSG to a new name with ARGS ignored.\" (let* ((async-shell-command-display-buffer nil) (temp (format-time-string (expand-file-name \"%Y-%m-%dT%H:%M.pdf\" mail-source-directory))) (name (read-string \"File name: \" temp)) (html (replace-regexp-in-string (regexp-quote \"file://\") \"\" msg t t))) (if args (message \"Additional optional argument was ignored when saving to PDF.\")) (async-shell-command (concat \"pandoc \" html \" -o \" name)))) (defun extra-print-email-to-pdf (msg \u0026optional skip-headers) \"Save current MSG as a pdf if it includes an HTML-part. If SKIP-HEADERS is set, do not show include message headers.\" (let* ((browse-url-browser-function 'extra-email-to-pdf)) (mu4e-action-view-in-browser msg skip-headers))) (with-eval-after-load 'mu4e (add-to-list 'mu4e-view-actions '(\"pri","date":"2023-02-26","objectID":"/posts/emacs/:10:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#send-mail"},{"categories":null,"content":"Report我使用 Calibredb 管理书籍，使用 org-roam 下的 books 文件夹管理读书笔记内容。凡是读书必建立对应的笔记内容，在笔记内容中会使用 org-clock 的功能记录读书的时长。 读书笔记通过 org-roam-capture 中的 books 一项创建。 然后在读书记录笔记中可以通过 org report 功能生成一年的读书记录。 #+BEGIN: clocktable :scope my/reading-list :maxlevel 9 :emphasize t :fileskip0 t :hidefiles t :block 2023 #+END: clocktable 中的 scope 可以是自定义的函数，下面的函数将 books 下的所有读书笔记纳入统计范围。生成的表格中包括了书名及阅读本书所花的时间。 ;; Get reading list from books directory for org-clock report. ;; The org-clock report scope can be a function. (defun my/reading-list () \"Get reading list.\" (let (reading-list) (append reading-list (file-expand-wildcards (expand-file-name \"roam/books/*.org\" my-galaxy))))) ","date":"2023-02-26","objectID":"/posts/emacs/:10:6","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#report"},{"categories":null,"content":"Achive(use-package achive :commands achive :config (setq achive-language 'zh) (setq achive-cache-path (expand-file-name \".achive\" no-littering-var-directory))) (my/comma-leader-def \"a\" '(achive :wk \"A-share\")) (with-eval-after-load 'evil-collection (evil-collection-define-key 'normal 'achive-visual-mode-map \"q\" 'quit-window)) ","date":"2023-02-26","objectID":"/posts/emacs/:10:7","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#achive"},{"categories":null,"content":"Easy use, Code snippets","date":"2023-02-26","objectID":"/posts/emacs/:11:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#easy-use-code-snippets"},{"categories":null,"content":"Open APP within Emacs该配置来源：[技巧分享] 在 Emacs mini buffer 中选择并打开其他 App【macOS only】 - Emacs-general - Emacs China (defun mac-launchpad/string-ends-with (s ending) \"Return non-nil if string S ends with ENDING.\" (cond ((\u003e= (length s) (length ending)) (let ((elength (length ending))) (string= (substring s (- 0 elength)) ending))) (t nil))) (defun mac-launchpad/find-mac-apps (folder) (let* ((files (directory-files folder)) (without-dots (cl-delete-if (lambda (f) (or (string= \".\" f) (string= \"..\" f))) files)) (all-files (mapcar (lambda (f) (file-name-as-directory (concat (file-name-as-directory folder) f))) without-dots)) (result (cl-delete-if-not (lambda (s) (mac-launchpad/string-ends-with s \".app/\")) all-files))) result)) (defun mac-launchpad () (interactive) (let* ((apps (mac-launchpad/find-mac-apps \"/Applications\")) (to-launch (completing-read \"launch: \" apps))) (shell-command (format \"defaults read \\\"%s\\\"Contents/Info.plist CFBundleIdentifier | xargs open -b\" to-launch)))) (my/comma-leader-def \"j\" '(mac-launchpad :wk \"Jump to App\")) ","date":"2023-02-26","objectID":"/posts/emacs/:11:1","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#open-app-within-emacs"},{"categories":null,"content":"Open file with system file manager(defun xah-show-in-desktop () \"Show current file in desktop. This command can be called when in a file buffer or in `dired'.\" (interactive) (let (($path (if (buffer-file-name) (buffer-file-name) default-directory))) (cond ((string-equal system-type \"windows-nt\") (shell-command (format \"PowerShell -Command Start-Process Explorer -FilePath %s\" (shell-quote-argument default-directory)))) ((string-equal system-type \"darwin\") (if (eq major-mode 'dired-mode) (let (($files (dired-get-marked-files ))) (if (eq (length $files) 0) (shell-command (concat \"open \" (shell-quote-argument (expand-file-name default-directory )))) (shell-command (concat \"open -R \" (shell-quote-argument (car (dired-get-marked-files ))))))) (shell-command (concat \"open -R \" (shell-quote-argument $path))))) ((string-equal system-type \"gnu/linux\") (let ((process-connection-type nil) (openFileProgram (if (file-exists-p \"/usr/bin/gvfs-open\") \"/usr/bin/gvfs-open\" \"/usr/bin/xdg-open\"))) (start-process \"\" nil openFileProgram (shell-quote-argument $path))))))) (my/space-leader-def \"fd\" '(xah-show-in-desktop :wk \"Open in Finder\")) ","date":"2023-02-26","objectID":"/posts/emacs/:11:2","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#open-file-with-system-file-manager"},{"categories":null,"content":"Remove link下面的配置来源：dotemacs/jf-org-mode.el at main · jeremyf/dotemacs. 作用是移除 org 文件中的链接，仅保留链接的描述内容。 (defun jf/org-link-remove-link () \"Remove the link part of an `org-mode'link at point and keep only the description.\" (interactive) (let ((elem (org-element-context))) (when (eq (car elem) 'link) (let* ((content-begin (org-element-property :contents-begin elem)) (content-end (org-element-property :contents-end elem)) (link-begin (org-element-property :begin elem)) (link-end (org-element-property :end elem))) (when (and content-begin content-end) (let ((content (buffer-substring-no-properties content-begin content-end))) (delete-region link-begin link-end) (insert content))))))) (with-eval-after-load 'evil (evil-declare-key 'normal 'global \"gX\" 'jf/org-link-remove-link)) ","date":"2023-02-26","objectID":"/posts/emacs/:11:3","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#remove-link"},{"categories":null,"content":"Add timestamps to youtube links此配置来源：Marcin Borkowski: 2022-10-10 Adding timestamps to youtube links. 这个函数的作用是在 youtube 链接中增加时间，这样可以进行视频内容的精准跳转，当你看了一部份视频内容时记录时间等后期接着看。 (defun yt-set-time (time) \"Set TIME in the YouTube link at point.) TIME is number of seconds if called from Lisp, and a string if called interactively. Supported formats: - seconds - minutes:seconds - number of seconds with the \\\"s\\\" suffix.\" (interactive (list (if current-prefix-arg (prefix-numeric-value current-prefix-arg) (read-string \"Time: \")))) (let ((url (thing-at-point-url-at-point))) (if (and url (string-match (format \"^%s\" (regexp-opt '(\"https://www.youtube.com/\" \"https://youtu.be/\") \"\\\\(?:\"))) url)) (let* ((bounds (thing-at-point-bounds-of-url-at-point)) (time-present-p (string-match \"t=[0-9]+\" url)) (question-mark-present-p (string-search \"?\" url)) (seconds (cond ((numberp time) time) ((string-match \"^\\\\([0-9]+\\\\):\\\\([0-9]\\\\{2\\\\}\\\\)$\" time) (+ (* 60 (string-to-number (match-string 1 time))) (string-to-number (match-string 2 time)))) ((string-match \"^\\\\([0-9]+\\\\)s?$\" time) (string-to-number (match-string 1 time))) (t (error \"Wrong argument format\")))) (new-url (if time-present-p (replace-regexp-in-string \"t=[0-9]+\" (format \"t=%i\" seconds) url) (concat url (if question-mark-present-p \"\u0026\" \"?\") (format \"t=%i\" seconds))))) (delete-region (car bounds) (cdr bounds)) (insert new-url)) (error \"Not on a Youtube link\"))) (my/space-leader-def \"lt\" '(yt-set-time :wk \"Set Youtube link time\")) ","date":"2023-02-26","objectID":"/posts/emacs/:11:4","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#add-timestamps-to-youtube-links"},{"categories":null,"content":"self define function(defun switch-to-message () \"Quick switch to `*Message*'buffer.\" (interactive) (switch-to-buffer \"*Messages*\")) (defun switch-to-scratch () \"Quick switch to `*Scratch*'buffer.\" (interactive) (switch-to-buffer \"*scratch*\")) (my/space-leader-def \"bs\" '(switch-to-scratch :wk \"Swtich to scratch\") \"bm\" '(switch-to-message :wk \"Swtich to message\")) (defun my/inbox-file () \"Open inbox file.\" (interactive) (find-file (expand-file-name \"inbox/inbox.org\" my-galaxy))) (defun my/plan-file () \"Open plan file.\" (interactive) (find-file (expand-file-name \"inbox/plan.org\" my-galaxy))) (defun my/index-file () (interactive) (find-file (expand-file-name \"roam/main/index.org\" my-galaxy))) (defun my/reflection-file () (interactive) (find-file (expand-file-name \"roam/main/reflection.org\" my-galaxy))) (defun my/finance-file () \"Open finance file.\" (interactive) (find-file (expand-file-name \"finance/finance.bean\" my-galaxy))) (defun my/reading-record () \"Open reading record file.\" (interactive) (find-file (expand-file-name \"roam/main/reading-record.org\" my-galaxy))) (my/space-leader-def \"fo\" '(:ignore t :wk \"Open file\") \"fob\" '(my/reading-record :wk \"Reading record\") \"foi\" '(my/inbox-file :wk \"Inbox file\") \"foI\" '(my/index-file :wk \"Index file\") \"fop\" '(my/plan-file :wk \"Plan file\") \"fof\" '(my/finance-file :wk \"Finance file\") \"for\" '(my/reflection-file :wk \"Reflection file\") \"fog\" '(my/gtd-file :wk \"GTD file\")) (defun my/start-server () (interactive) (if (not (server-running-p)) (server-start)) (message \"Server has started\")) (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) ","date":"2023-02-26","objectID":"/posts/emacs/:11:5","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#self-define-function"},{"categories":null,"content":"End;;; init.el ends here. ","date":"2023-02-26","objectID":"/posts/emacs/:12:0","series":null,"tags":["Emacs"],"title":"Personal emacs configuration","uri":"/posts/emacs/#end"},{"categories":null,"content":"Naiveproxy 是一种科学上网方式，但是其没有合适的客户端可用。虽然可以使用 qv2ray 然后使用 naive 的插件方式进行，但是我个人觉得其有点过于笨重，导致我不怎么想使用 qv2ray。 如果不使用 qv2ray，那只能使用 Terminal 开启以下的命令来进行科学上网。 cd ~/naive ./naive config.json 以上命令执行完并不能使你的 Safari 科学浏览网页。 如果你不使用 Safari 浏览器而是 Chrome 或者 Firefox，那么可以使用 Switchyomega 这个插件，关于它的具体使用方法可以参见 Switchyomega 主页，这里不详述。 那么要怎么才能使 Safari 也可以正常的科学上网呢？答案是使用 MacOS 自带的 Proxies 设置。 Figure 1: Proxies 设置界面 我设置的 naiveproxy 工作在 1080 端口，在上面的 Proxies 界面中，我尝试使用了 http 和 https 两种设置，但是都不能使 Safari 正常的工作。后来看到有 Automatic proxy configuration 这个选项，其要求是使用 pac 文件来进行科学上网。 Pac 文件怎么获取呢？我目前的方式是使用 Switchyomega 这个插件导出了一份 proxy.pac 文件来使用。暂时不知道如何不使用它来获取一份 proxy.pac 文件，或者我给你一份我使用的？ 那么有了 proxy.pac 文件，需要将其放置到下面的位置当中。 cp proxy.pac /Library/WebServer/Documents/ 你还需要确认你的 macos 上是否开启了 apache 服务器。 sudo apachectl start 若返回下面的，则开启成功。 /System/Library/LaunchDaemons/org.apache.httpd.plist: service already loaded Load failed: 37: Operation already in progress 在 Proxies 界面中将 proxy.pac 的地址填进去，则可以使 Safari 正常上网。若遇到不能开启科学上网的网页，则需要根据 proxy.pac 的规则，更新 proxy.pac 文件。 走到这一步，己经完成了一大半。至于为什么我不使用 Chrome 浏览器，有两个原因，一个我使用 Bitwarden 管理自己的密码，在 Chrome 上使用该插件不能结合 MacOS 的指纹硬件开启，需要自己手动输入 Master password。或者需要在后台开启 Bitwarden 的桌面客户端。另外一个 Chrome 上的网页翻译没有 Safari 的好用，经常有时候开启了翻译没有反应。 己经可以使浏览器正常使用，但是 Terminal 终端还是不能进行代理上网。我根据 Mac 终端代理设置 这篇文章进行了相应的设置，使得 Terminal 终端也可以正常代理上网。 需要在终端中执行： export http_proxy='http://localhost:8118' export https_proxy='http://localhost:8118' 若要取消使用终端代理： unset http_proxy unset https_proxy 或者可以使用下面的设置，更方便一些： # proxy on proxy () { echo \"start use privoxy proxy\" brew services start privoxy export no_proxy=localhost,127.0.0.0,127.0.0.1,127.0.1.1,local.home export http_proxy=http://localhost:8118 export https_proxy=http://localhost:8118 } # no privoxy noproxy () { echo \"stop use privoxy proxy\" brew services stop privoxy export http_proxy= export https_proxy= } 至此，Safari 和 Terminal 都可以正常科学上网。 ","date":"2023-02-15","objectID":"/posts/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-naiveproxy-%E5%8F%8A%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/:0:0","series":null,"tags":null,"title":"Mac 上使用 naiveproxy 及代理配置","uri":"/posts/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-naiveproxy-%E5%8F%8A%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/#"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件，毕竟使用自己的配置，会很容易改，而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。MacOS 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2023-01-31","objectID":"/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":null,"title":"Emacs: org-mode 文档转 latex 简明教程","uri":"/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置，将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2023-01-31","objectID":"/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":null,"title":"Emacs: org-mode 文档转 latex 简明教程","uri":"/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#emacs-配置"},{"categories":null,"content":"2023-01-31 Emacs 29 上己内置了 sqlite，Org-roam 的安装己较容易进行。我己较长时间没有在 win 上使用 Emacs，以下步骤仅供参考。 Emacs 和 org-roam 在 Linux 和 Mac 系统上没有什么问题，但是在 Windows 上略有点麻烦。 Win 上可以使用 Scoop 安装相关软件。具体流程如下： 安装 emacs scoop install emacs 安装 gcc scoop install gcc 理想是很好，但是在这一步，会出错，提示 404错误（2022-07-25）。https://github.com/ScoopInstaller/Scoop/issues/4250 一个临时的解决方式是替换 gcc.json 中的网址到mirrors.huaweicloud.com. 相关讨论见https://github.com/ScoopInstaller/Main/issues/1752#issuecomment-778569708 open the \u003cscoopdir\u003e/buckets/main/gcc.json replace http://repo.msys2.org/ to http://mirrors.huaweicloud.com/msys2/ 安装 make scoop install make ","date":"2023-01-31","objectID":"/posts/org-roam-%E5%9C%A8-windows-%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":null,"title":"Org-roam 在 windows 上的安装","uri":"/posts/org-roam-%E5%9C%A8-windows-%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/#"},{"categories":null,"content":"之前在知乎上看到一个问题是：有没有一个All in One的笔记系统?。我在下面的回答中提供了一个方案就是使用 Emacs。 那么现在说说怎么使用 Emacs 进行笔记的管理，如何做到 all-in-one。 在上面的提问中，提问者列出了自己关于all-in-one笔记的系统的几点要求。笔记记的是什么内容呢，初步列举如下： ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:0:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#"},{"categories":null,"content":"笔记内容","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记内容"},{"categories":null,"content":"文本+格式笔记肯定第一位的就是需要记录大量的文本内容。那么文本只能是汉字、英文、字母吗？当然不是，文本也有格式，如对文本进行加粗、斜体、引用、列表等等。文本+格式只要是个笔记软件应该都能提供（window 上的 txt 记事本不行，过于简陋）。 但是文本与格式分离，这不是哪个软件都能做好的。如 word 就很难做到样式和内容的分离，以我的经验，它可以做到但是很难，你需要对word 有充分的了解。Latex 就很容易做到文本与样式的分离，但是它难在非所见即所得。（有什么软件你需要深度使用，但是可以对其不需要了解的吗？没有什么是纯傻瓜式的。） ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:1","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#文本-plus-格式"},{"categories":null,"content":"图表我认为表格只是文本内容呈现的另一种方式，笔记系统中不需要使用过于复杂的表格。 这里要提到 onenote 笔记软件，这个软件我很多次都想利用起来，但是最终都没能。现在想来，它就像一个画板，做笔记像画画，内容超出屏幕范围时，很难对内容有个全局的了解。相对应的是幕布类的大纲式的软件（有了解没用过，不评价）。Onenote软件作的笔记如果想要内容很规整，一个方法就是嵌套使用表格（可以很漂亮，但是不推荐）。 图是笔记系统中一个很重要的组成部分。笔记系统中插入图我想有两种方式，一种是如word ，印象笔记的方式。一种是类似org-mode, markdown这种方式，以链接的方式插入到笔记当中。我选择第二种。 图直接插入到笔记当中的方式，往往是专有格式的软件。这类笔记系统对于软件本体依赖过高，不利于笔记在不同系统中的转移。图直接插入到笔记当中，会导致单个笔记的体积很大，而且很难在不同的笔记中进行复用。相应的使用图片链接的方式就没有上述的问题。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:2","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#图表"},{"categories":null,"content":"公式公式我只推荐使用 latex ，以文本的方式进行管理。如 Word 上使用 mathtype 进行公式的输入非常差，难以编排，交叉引用。 如果你认为latex 输入公式很慢，不直观，是大概率你没有使用合适的方法。你需要的是快速输入的方法以及公式预览。Latex公式的效果看看这个demo。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:3","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#公式"},{"categories":null,"content":"文献管理文献管理软件有很多，如zotero，endnote，mendeley，jabref等等。笔记系统中我推荐使用zotero，其他都不做推荐。我更喜欢的方式是直接管理bibtex文件，zotero只是我用来收集bib的工具。 此外，还应关注的是文献文件的格式，大部份应该都是pdf 文件。 如果是caj等格式，那么推荐你使用tampermonkey在知网上下载pdf 格式的，而不是caj格式的（我讨厌caj）。 如果你看的是出版物，网上有很多提供的epub格式。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:4","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#文献管理"},{"categories":null,"content":"音频和视频这里不过多写，我没这个需求。对此没什么实践。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:1:5","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#音频和视频"},{"categories":null,"content":"笔记的原则","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:2:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记的原则"},{"categories":null,"content":"笔记本身 不分来源，不分重要性，只要是自己关心、想记录下来的内容，都可以一点一滴地写在笔记本上。《如何有效整理信息》 记笔记很难的一点在于归类，以什么主题进行记录。如何有效整理信息一书的作者提出的不分来源，不分重要性，只要是自己关心的都可以记录下来。 这样也可以解决一个问题，记笔记有什么用？笔记记录的作用不一定在当下，有可能在以后，当你需要的时候有一个系统可以供你查询。关于笔记的主题或者分类我的关点就是不分类，或者只是给一个大类而不具体的进行区分，当相关的笔记积累了足够多的内容再进行整理与归类。不依赖分类，取而代之的是建立以搜索为基础的笔记管理方法。 笔记的原则关于笔记本身：记什么？记你关心的内容！怎么分类？不分类！ ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:2:1","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记本身"},{"categories":null,"content":"笔记工具传统的笔记工具以纸笔为载体，各种手账、剪纸等，以纸笔为载体是纸媒时代的最有效的进行笔记管理的方式，如何有效整理信息这本书的作者就提出了一元化的笔记方法，作者本人也积累了大量的笔记本。个人很配服他的这种毅力，平常人很难一以贯之的坚持进行笔记的记录。 但是我个人不怎么喜欢这种基于纸笔的笔记管理方式，当前是网络时代，我们有太多的信息是基于网站等获取的，我们身处于电子时代，我认为笔记的最终去处是电子化。出门不一定会携带纸笔，但是一定会带上手机，部份情况下不适合使用电子设备进行笔记的记录也可以暂时的使用纸笔进行记录，事后再进行电子化。 现在电子笔记软件有太多的可选项，Onenote 、印象笔记、Roam Research 、Notion 等等。可选择的太多有很多人就有了困难选择症，在多种尝试之后我的选择是以基于 org-mode, 以 Emacs 文本编辑器为载体的笔记管理。 笔记原则之笔记工具：以电子笔记为主，辅之纸笔。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:2:2","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记工具"},{"categories":null,"content":"笔记的流程在 How to take smart notes 中作者提出了如下的笔记流程。这个流程是关于记笔记的终极答案，但是个人觉得这样的笔记方式对于笔记的记录是一件很耗费精神的事情，由其是在把临时笔记和文学笔记转化为永久笔记的过程中，所以个人认为这一步可以简化。 Make fleeting notes 做临时笔记 Make literature notes 做文学笔记 Whenever you read something, make notes about the content. Make permanent notes 将临时笔记和文学笔记转化成永久笔记 think about how they relate to what is relevant for your own research, thinking or interests. gone note for each idea Add new permanent notes to the slip-box 将永久笔记保存到slipbox中 新建一个pages. Adding links to related notes. Make sure notes can be found with links or gindex. Develop topic, questions and research project bottom up from within the system. 基于slipbox探索论点，提出问题，确定研究项目。 gHow to outline a article with roam research Decide on a topic to write about 确定topic Based on what you have, not based on an unfounded idea about what the literature you are about to read might provide. Turn your notes into a rough draft. 将笔记整理成草稿 Edit and proofread your manuscript. 修定草稿整理成最终稿 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:3:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记的流程"},{"categories":null,"content":"笔记体系 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:4:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记体系"},{"categories":null,"content":"笔记软件选取原则 本地管理 这一点排除了一堆以云端存储笔记的软件，如Onenote 、Notion 、印象笔记等。不使用 Onenote 是因为它的同步实在是一个问题，其他的软件不是很信任。比知这个：https://www.zhihu.com/question/521826071/answer/2579062261 本地管理不意味着笔记软件不能进行同步管理，可以使用Onedrive 、icloud 或者自建同步软件进行笔记同步。也可以使用 git 进行版本管理。 纯文本格式 纯文本意味着脱离软件本体同样可以使用其他的软件打开，它的本质只是文本，不像Word 、Onenote 等属于富文本文档。富文本文档当脱离软件之后其他的软件是不能进行编辑的。有太多的笔记软件不支持导出或者不支持特定格式的文本导出，有些软件刚开始支持导出，后来又不支持导出，使用这类软件风险太高。(3 封私信) 有道云笔记等笔记软件不支持笔记批量导出，算是垄断吗？ - 知乎 、(3 封私信) 使用goodnotes导出文件太大不能导出怎样解决？ - 知乎 太多的问题自己查询。 使用基于 markdown 或者 org-mode 的纯文本就没有以上的问题，它们都可以使用 pandoc 导出为其他的格式的文本。Org 在导出这一块比 markdown 要强上很多。 非商业软件 商业软件的支持由于商业的本性，当不能给团队带来收入，它的可持续性是很大的问题。 当前比较火的 Obsidian 就是商业软件，你的笔记不能记录任何与工作相关的内容，否则是需要购买授权的。能免费用不代表它不是商业软件。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:5:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记软件选取原则"},{"categories":null,"content":"Emacs 如何实现上述的笔记管理Emacs 中进行笔记写作依赖的是 org-mode，关于 org-mode 的介绍可以见其官方网站，网上也有很人写了介绍。 Figure 2: 笔记界面 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:6:0","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#emacs-如何实现上述的笔记管理"},{"categories":null,"content":"笔记界面Emacs 上想要实现笔记还需要依赖其他的包，好在这些都是开源的，你不需要担心其突然就不能用的问题。 文本记录需要用到 org-mode + org-roam，org-roam 是链式笔记，对此可以知乎上搜zettelkasten。有人对此有不同的意见。我的意见是，你可以用也可以不用。好处是可以保持笔记的原子化，便于复用。 org-mode 自带表格功能，简单的矩阵式表格使用自带的即可。如果是要实现复杂的表格，那么在org-mode 中插入 Latex 表格即可。 图表的功能，以文件链接的方式插入。好处是org-mode 中可以直接切换是否在当前文档中显示图片。 公式那么直接使用 latex 语法就可以啦，预览可以使用自带的功能，我推荐使用 math-preveiw这个包，输入的话开启cdlatex的功能，那么输入各种公式符号都很方便。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1354/:6:1","series":null,"tags":["笔记体系"],"title":"All-in-one 笔记系统","uri":"/posts/2023-01-19t1354/#笔记界面"},{"categories":null,"content":"之前写过一篇关于使用 Emacs 进行文献管理的文章，有人询问能否写一篇详细的教程。 这篇文章就更新下我目前的关于文献管理及笔记记录的相关流程，更多的是关于术的使用，道的部份还得每个人深思。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:0:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#"},{"categories":null,"content":"Zotero首先是文献管理的基本软件。 我曾经使用过的有 Endnote、Mendeley、Zotero、Jabref、Ebib 等等，其中Endnote 是最早使用的，但是一直都没觉得它有多么的好用，可能最早就它和 Word 结合使用的体验较好而己。Mendeley 己经很久没有使用过了，使用它的时间比 Endnote 长一些，它需要在线使用更新文献等，没有黑科技使用起来并不是很好。Jabref 的优点在于开源，以及使用 plain entry 的功能自动生成文献题录。 Zotero 的优势在于收集文献，我的基本使用流程是使用 Google scholar 跟踪最新的文献，通过邮箱订阅一周会定时收到几篇文献，打开文献阅读的时候，然后使用 zotero 保存到数据库当中。Zotero 有个插件 Better bibtex for zotero，使用该插件可以自动的更新数据库中的文献到 Reference.bib 文件，这个文件记录了所有的文献引文，该文件可以在Emacs 中调用。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:1:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#zotero"},{"categories":null,"content":"Emacs 中文献的管理在 Emacs 中有多个包可以进行文献的管理与阅读工作，具体的可以通过 melpa.org 这个网战查询。我目前使用的是 Ebib、Bibtex-completion、Citar、org-cite 以及 org-roam-bibtex 这几个。 Ebib 是类似 zotero 的文献管理包，可以进行文献的收索、查询、笔记的记录等工作，但是我仅用它来进行文献的过滤查找，简单的查找用使用 citar 进行。 我的配置文件见.emacs.d/init-bibtex.el at master · Jousimies/.emacs.d。 这个过程的难点在于 Emacs 的配置，配置好之后在 Emacs 中可以通过 citar 打开文献文件、引文或者文献引用等都比较简单。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:2:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#emacs-中文献的管理"},{"categories":null,"content":"PDF 阅读软件我通常只保存 PDF 文件，知网上的 CAJ 文件我会通过 Tempermonkey 这个软件来下载 PDF 文件，我不喜欢 CAJ 格式文件，在 Mac 上打开非常的慢，体验很差。 在 Mac 上一个比较好用的独立于 Emacs 的 PDF 阅读器是 sioyek。如果你使用付费软件有其他可选，自己找吧。 基于 Emacs 的目前就两个选择，一个是 pdf-tools，一个是 eaf-pdf-viewer ，关于 eaf-pdf-viewer 的使用见我的另一篇文章。如果你使用 Mac 或 Linux 系统两个都可以使用，Mac 上使用 eaf-pdf-viewer 目前需要 Emacs 版本为 28.2，29及以上的版本使用存在一些问题。 如果是 Windows 系统还是使用独立于 Emacs 的 PDF 阅读器更好。 Figure 1: eaf-pdf-viewer ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:3:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#pdf-阅读软件"},{"categories":null,"content":"文献阅读笔记我在 Emacs 中使用 org-roam 进行笔记的记录，相关的内容可以见我的文章，All-in-one 笔记系统。 说一说我的基本使用流程。 我会通过 citar-open-note 开始进行文献笔记的记录，这个会自动的调用 org-roam 中设置的 template。可根据自己的需要修改模板的内容。 在生成的笔记文件当中包含了 :ID: :ROAM_REFS: 这两项，通过 ID 可以使用 org-roam 提供的检索功能 org-roam-ref-find 进行文献笔记的查找，这个与 org-roam-node-find 区分普通笔记和文献笔记。 有了 ROAM_REFS 这一项就可以在笔记中打开对应的 PDF 文件，我设置的是 zm 调用 orb-note-actions，回车即可。这个 orb-note-actions 还有其他的功能，我不怎么使用，感兴趣的可以自己去探索。 阅读文献的时候会进行 highlight 的标注，然后通过 pdfannot 这个第三方的程序将 highlight 抽取到文献笔记当中。（这个过程原来是通过一致的 bibtex key 进行，当前我更改了文件保存的文件名，导致这个过程目前不可用，相关代码就不放出来了。感兴趣的去我过往的文章中找找代码。） 至于具体的文献阅读的过程可以在知乎上搜索，有很多的个人经验可以参考，这里就不赘述了。 需要指出的是这只是单篇文献的阅读，还需要争对同类型的文献进行整理，需要另外建立笔记然后在其中对需要的文献进行引用({Timothy Johnson}, 2022)。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:4:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#文献阅读笔记"},{"categories":null,"content":"TODO基于 Emacs 的 latex 文献引用当需要投稿的时候，使用期刊提供的 Latex 模板可以很容易的引用文献，相比较于 Word 处理文献要容易的很多。 但是面临的一个问题是，zotero 管理的是所有的文献，投稿时并不需要提供所有的文献只需要提供引用的那些文献，怎么办呢？ 第一种是从主 bibtex 文件中将所需的的复制出来。这个方法可行，但是显的有些笨拙。 第二种方法是使用 Emacs 中的 ebib 这个包提取所需要的文献。 首先使用 ebib-dependent-create-dependent 在你的 latex 文档处创建 Reference.bib 文件以供引用。然后通过 ebib-dependent-add-entry 将需要引用的文献加入到 Reference.bib 文件中即可。 在 Emacs 中进行 latex 的写作还是很方便的，通过 Reftex 这个包提供的 reftex-citation 就可以插入文献啦。 在 Emacs 中使用 bibtex 文件需要对此先进行编译，通常需要三步， bibtex-\u003elatex-\u003elatex 。在 Emacs 中使用 C-c C-c 进行，还是很方便的。 ","date":"2023-01-19","objectID":"/posts/2023-01-19t1606/:5:0","series":null,"tags":["Emacs","文献阅读"],"title":"基于 Emacs 的文献阅读方法","uri":"/posts/2023-01-19t1606/#基于-emacs-的-latex-文献引用"},{"categories":null,"content":"今天在知乎上看到一篇文章是在本地使用 roam research，不连网使用就不需要交费，所以就尝试了下。想要尝试使用看这。 Roam research 这类大纲类软件的 daily note 功能相比 org-roam 要好用，但是创建页面笔记的时候还是有很多的不适应感，有可能是因为我用习惯了基于 Emacs 的 org-roam 笔记。 首先不能根据上下文的环境自动的切换输入法，这个给我带来了很大的不确定感，需要不停的使用 Shift 在中英文之间进行切换。虽然我使用 Evil 需要在 insert 和 normal 模式之间进行切换，但是这种形为是明确的，而在 RR 中输入法的切换是不明确的，需要自己明确当前的输入法状态。比如在一个词条上我要创建页面引用，我会选中词条然后通过输入[[进行，但是如果当前输入法是中文的状态就会出现【覆盖当前的词条，很不爽。 创建 alias 不是很方便，没有 org-roam 好用。有 pomodoro 的功能，但是很简陋，不能创建多个。不能进行计时。 RR 比较强的一方面在于文章的组织，当建立了较好的笔记库后，新建一篇文章复制可拖动 block 即可。在 org-roam 当中需要使用 org-transclusion，相较于直接拖动的操作这个会麻烦一些。 不能方便的进行文献的引用，结合 zotero 进行文献的管理很差，但是也不是不能使用，我无感。想要使用 zotero 的可以看看这篇文章，Zotero and Roam Research，该文中需要的 zotero translator 的内容如下： { \"translatorID\":\"dda092d2-a257-46af-b9a3-2f04a55cb04f\", \"translatorType\":2, \"label\":\"Roam Metadata Export\", \"creator\":\"Lukas Kawerau\", \"target\":\"md\", \"minVersion\":\"2.0\", \"maxVersion\":\"\", \"priority\":200, \"configOptions\": { \"getCollections\": \"true\", \"dataMode\": \"rdf/xml\" }, \"inRepository\":false, \"lastUpdated\":\"2020-11-24 - 07:30\" } function doExport() { var item; while (item = Zotero.nextItem()) { var creatorsS = item.creators[0].lastName; if (item.creators.length\u003e2) { creatorsS += \" et al.\"; } else if (item.creators.length==2) { creatorsS += \" \u0026 \" + item.creators[1].lastName; } var citationKey = (item.citationKey) ? item.citationKey : \"(bib citkey missing)\"; Zotero.write('[[' + item.citationKey + ']]\\n'); Zotero.write(' author:: '); for (author in item.creators){ if (item.creators[author].firstName !== undefined) { Zotero.write('[[' + item.creators[author].firstName + ' ' + item.creators[author].lastName + ']] '); } else { Zotero.write('[[' + item.creators[author].lastName + ']] '); } } Zotero.write('\\n'); var titleS = (item.title) ? item.title : \"(no title)\"; Zotero.write(' title:: ') Zotero.write('[[' + titleS + ']]\\n') var date = Zotero.Utilities.strToDate(item.date); var dateS = (date.year) ? date.year : item.date; Zotero.write(' year:: ') Zotero.write('[[' + dateS + ']]\\n') if (item.url !== undefined) { Zotero.write(' url:: [') Zotero.write(creatorsS) Zotero.write(' (' + dateS + '). ') Zotero.write(titleS + '.') if(item.publicationTitle !== undefined) { Zotero.write(' ' + item.publicationTitle) } Zotero.write('](' + item.url + ')\\n') } var library_id = item.libraryID ? item.libraryID : 0; var itemLink = 'zotero://select/items/' + library_id + '_' + item.key; Zotero.write(' Zotero link:: ') Zotero.write('[Zotero Link](' + itemLink + ')\\n') Zotero.write(' topics:: \\n') Zotero.write(' reading status:: [[to read]]\\n') Zotero.write(' citation graph:: {{[[query]]: {and: [[quote]] [[citing]] [['+citationKey+']] {not: [[query]]}}}}\\n') } } 下载了 RR 之后，我又下载了 logseq ，两者好像啊！ 综上，这两个软件都不错，颜值高，但是不是我的菜，还是使用 org-roam 比较带劲，Emacs 的生态更好，颜值差些。 ","date":"2022-12-10","objectID":"/posts/2022-12-10/:0:0","series":null,"tags":["project"],"title":"Roam research","uri":"/posts/2022-12-10/#"},{"categories":["Philosophy"],"content":"It's a descript","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/"},{"categories":["Philosophy"],"content":"哲学的定义哲学是研究自然、社会和思维的最一般规律的科学。 “哲学”一词的本义，西方人通常指“爱智慧”或“智慧之学”，中国人解释为通晓事理、使人聪明的学问。 哲学是关于世界观的学问，是理论化和系统化的世界观，任何哲学都是世界观和方法论的统一。 根据对思维与存在、精神与物质的关系的认识，哲学可分为唯物主义和唯心主义两大派别。 认识论是哲学的一个组成部分。 冯友兰说：“哲学的作用有两方面，一是锻炼、发展人的理论思维的能力，一是丰富、提高人的精神境界。” 人生处处不无哲学的影响。 王国维在《静庵文集·自序二》中写道:“哲学上之说，大都可爱者不可信，可信者不可爱。余知真理，余又爱其谬误。” ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:1:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#哲学的定义"},{"categories":["Philosophy"],"content":"方法论 Youtube The Active Learning Method 方法论，就是关于人们认识世界、改造世界的方法的理论。它是人们用什么样的方式、方法来观察事物和处理问题。 方法论主要说明 怎么办 的问题。 方法论是一种以解决问题为目标的理论体系或系统，通常涉及对问题阶段、任务、工具、方法技巧的论述。方法论会对一系列具体的方法进行分析研究、系统总结并最终提出较为一般性的原则。 方法论也是一个哲学概念。人们关于“世界是什么、怎么样”的根本观点是世界观。用这种观点作指导去认识世界和改造世界，就成了方法论。 方法论是普遍适用于各门具体社会科学并起指导作用的范畴、原则、理论、方法和手段的总和。 方法论=逻辑+环境变量 —- 底层逻辑(刘润, 2021) ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:2:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#方法论"},{"categories":["Philosophy"],"content":"哲学和逻辑 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。—- 苏珊哈克 ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:3:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#哲学和逻辑"},{"categories":["Philosophy"],"content":"思维更清晰，表达更顺畅：书单 逻辑学入门:清晰思考，理性生活的88个逻辑学常识 帮助读者轻松地了解逻辑学常识和概念，辨别语言陷阱，认识逻辑谬误，学会用清晰理性的方式思考问题。 沟通力就是思维力 格局 这本书不是讲思维能力的，但是提供了提高思维能力的一种很有效的方式，那就是格局。 作者说人生的格局就在你怎么看自己，你所认识的人，你说过的话，你给人的感觉，你做事的态度，你所经历的遭遇，你的每个念头，以及你的所作所为。当你把这些都想清楚了，你的格局提高了，思维能力自然而然会上升一个层次。 一本小小的红色写作书 麦肯锡教我的写作武器 金字塔原理 非暴力沟通 态度改变与社会影响 远见 系统之美 我们如何思维 ","date":"2022-10-25","objectID":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/:4:0","series":null,"tags":["哲学","逻辑","思维"],"title":"哲学、逻辑和思维","uri":"/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/#思维更清晰-表达更顺畅-书单"},{"categories":null,"content":"今天看到一篇好的介绍算法的文章。此文总结了六种算法思想。此处做些记录，留待以后慢慢补充。 递归算法 递归算法是一种直接或者间接调用自身函数或者方法的算法。 递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。 分治算法 分治，顾名思义就是将一个复杂的问题分成两个或多个相似的子问题，再把子问题分成更小的子问题，直到更小的子问题可以简单求解，原问题的解则为子问题解的合集。 贪心算法 贪心算法总是做出当前的最优选择，即期望通过局部的最优选择获得整体的最优选择。它做出的选择仅是某种意义上的局部最优，但是贪心算法在很多问题上还是可以获得最优解或较优解。 回溯算法 回溯算法是一种搜索法，试探法，它会在每一步做出选择，一旦发现这个选择无法得到期望结果，就回溯回去，重新做出选择。 深度优先搜索利用的就是回溯算法思想。 动态规划 动态规划也是将复杂问题分解成小问题求解的策略，与分治算法不同，动态规划各子问题是相互关联的。动态规划适用于子问题重叠的情况，即不同的子问题具有公共的子子问题。 枚举算法 将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适。 ","date":"2022-07-05","objectID":"/posts/%E7%AE%97%E6%B3%95/:0:0","series":null,"tags":null,"title":"算法","uri":"/posts/%E7%AE%97%E6%B3%95/#"},{"categories":null,"content":"Org 转 latex 的自用基本配置，日常使用","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:1:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:2:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#emacs-配置"},{"categories":null,"content":"Org 编译 PDF 的一般流程 导言区内容 一篇 PDF 的样式，取决于此处的设置。日常配置好两个常用的模板即可处理大部分的文档写作工作。目前，我还没有配置 report 类型的模板。有时间的时候，处理一下。 这部分的内容，见第四部分的说明，己包含常用的配置。在 Emacs 中可以将它们组合后，制作成模板，当需要的时候，插入即可，很方便。 yasnippet 和 tempel 这两个包都很好用。 正文具体内容的写作。 内容这部分是一篇文章的主要部分，需要花大量的时间和精力进行。写本文的目的也就将除此之外的部分简化，减少程序性的事务消消耗的精力。 通过 C-c C-e l o 编译 pdf 文件，并打开预览。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:3:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-编译-pdf-的一般流程"},{"categories":null,"content":"Org 文件头部内容配置","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-文件头部内容配置"},{"categories":null,"content":"documentclass Figure 1: documentclass 其中 #+title: 是文章的名字。如果需要不输出 title ，增加下面一行说明，输出 pdf 的时候就不会生成标题。 #+LATEX_CLASS 有默认值，可以见 org-latex-default-class ，默认使用 article 。 #+LATEX_CLASS 还有 article ， book 等，可以查看 org-latex-classes 这个值。 OPTIONS: 中可以指定是否输出目录，日期，作者。 #+LATEX_CLASS_OPTIONS 设置 documentclass 中的可选参数。如 [UTF8,a4paper,12pt] 。其他的参数看手册。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:1","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#documentclass"},{"categories":null,"content":"页面布局 Figure 2: 文档布局 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:2","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页面布局"},{"categories":null,"content":"字体大小和类型 Figure 3: 字体 这个根据需要自己配吧。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:3","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#字体大小和类型"},{"categories":null,"content":"页眉和页脚 Figure 4: 页眉和页脚 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:4","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页眉和页脚"},{"categories":null,"content":"目录通过 secnumdepth 控制目录的深度，根据需要来设置就好。 Figure 5: 目录 当使用 article 这个样式的时候，目录这两个字不会居中。当使用 book 的时候，会居中。 book 这个样式中有 chapter 这一个控制， chapter 是设置为居中显示的，相应的目录这两个字也是居中显示。 后期研究下，怎么单独设置某一级标题居中显示。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:5","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#目录"},{"categories":null,"content":"标题主要是使用了 titlesec 这个包，设置了 titleformat 和 titlespace 这两个参数，分别控制着标题的样式和标题前后的行间距。不设置这个值的话，当使用 book 这个样式时，行间距会很难看。 titleformat 中可以设置字体的大小和类型。 Figure 6: 标题 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:6","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#标题"},{"categories":null,"content":"图形图形的话，就是使用 graphicx 和 subfigure 这两个包。 Figure 7: 图形 在 org-mode 中我使用 org-download 这个包进行图片的管理，通过 org-download-clipboard 将图片复制到 org 文档中。当需要插入己有图片时，我会使用 org-insert-link 插入 file 类型的文件。 图形环境中 placement 这个参数有五个选项 !htbp ，分别对应的是 here,top,bottom,page of float, 当图形位置不在文本附近时或者你需要强制图形在文本附近，可以加入 ! 来强制实现。一般情况下，使用 htbp 基本上能满足需要了。 当一行只有一张图时，使用 org-download-clipboard 产生的配置如图 \\ref{org-mode 图形配置} 所示： Figure 8: org-mode 图形配置 图中 #+NAME 当需要引用时，可以通过在正文中使用 ref{} 来实现引用。 #+CAPTION 是图片的标签，一般居于图片的下方。 #+ATTR_LATEX 可以控制图片在文章中的大小，单张图设置 :width 8cm 即可。 当一行有两张图时，我会插入模板，如下： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\centering \\caption{fig:} \\end{figure} 当有四张图时，我会使用下面的配置： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\centering \\caption{fig:} \\end{figure} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:7","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图形"},{"categories":null,"content":"图表这里的问题还很大，得好好琢磨一下。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:8","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图表"},{"categories":null,"content":"数学公式一般有行内公式和行间公式两种。在 org 中的语法很简单，分别使用 $$ 或者 \\[\\]\\ 。 如果需要设置数学字体的话，需要如下配置，见图 \\ref{数学字体配置}： Figure 9: 数学字体配置 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:9","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#数学公式"},{"categories":null,"content":"代码环境Org-mode 中的代码环境可以使用 listings 和 minted 这两种方式。目前使用推荐使用 minted 这种方式，比较新。 minted 需要安装 pygemnts 这个包，终端执行下面的命令。 pip3 install pygments 别外，编译时需要加入 eshell-escape 这个命令参数，见上方 Emacs 中的配置。这个很重要，否则当编译的时候会报错。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:10","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#代码环境"},{"categories":null,"content":"参考文献 Figure 10: 参考文献 org 9.5.2 己经内置了 org-cite 。参考文献的格式设置见 cite_export 。我一般使用 chinese-gb7714 这个，具体的文件可以去 zotero 的官网下载。 设置 UNNUMBERED 这个 property ，目录中就会不显示参考文献这个标题，通常也不需要显示。 默认的参考文献间距过大，使用 #+LATEX_HEADER: \\usepackage{bibspacing} 这个文件，此文件用内容是网上抄来的一段代码，具体的内容如下，使用时将下面的内容保存到 bibspacing.sty 中，将该文件放到 /usr/local/texlive/2021/texmf-dist/tex/latex/bibspacing 文件夹中，然后执行 sudo texhash 即可： \\newdimen\\bibindent \\setlength\\bibindent{1.5em} \\newdimen\\bibspacing \\setlength\\bibspacing\\z@ \\renewenvironment{thebibliography}[1]{% \\section*{\\refname \\@mkboth{\\MakeUppercase\\refname}{\\MakeUppercase\\refname}}% \\list{\\@biblabel{\\@arabic\\c@enumiv}}% {\\settowidth\\labelwidth{\\@biblabel{#1}}% \\leftmargin\\labelwidth \\advance\\leftmargin\\labelsep \\itemsep\\z@skip % should this be commented out? \\parsep\\z@skip % should this be commented out? \\@openbib@code \\usecounter{enumiv}% \\let\\p@enumiv\\@empty \\renewcommand\\theenumiv{\\@arabic\\c@enumiv}}% \\sloppy\\clubpenalty4000\\widowpenalty4000% \\sfcode`\\.\\@m} {\\def\\@noitemerr {\\@latex@warning{Empty `thebibliography' environment}}% \\endlist} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:11","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#参考文献"},{"categories":["Emacs"],"content":"统一 workflow ，减少在程序性事务上清耗精力","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/"},{"categories":["Emacs"],"content":"最近配置了自己的 blog(我的 hugo 配置记录)， 目前写 blog 的流程有三种方式： ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:0:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#"},{"categories":["Emacs"],"content":"写在一个统一的文件中这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。 如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。 虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:1:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#写在一个统一的文件中"},{"categories":["Emacs"],"content":"使用 easy-hugoeasy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下： (defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/blog/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-org-header t) 我使用 easy-hugo 的流程很简单，通过 easy-hugo-new-post 创建新的文章 ，写文章， easy-hugo-magit 提交到仓库。看下图中 easy-hugo 提供了很多人命令，但是使用的很少。 Figure 1: easy-hugo menu ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:2:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#使用-easy-hugo"},{"categories":["Emacs"],"content":"在 org-roam 笔记系统中进行今天想到我使用 org-roam 管理自己的笔记，那么在本地是否可以结合 org-roam 进行 blog 的写作呢？实践证明是可以的。这篇文章就是在 org-roam 中写的。 这种的优势是，每一篇 post 都是 org-roam 中的一个 node ；结合 org-roam 的方式使得自己对于写作的 workflow 更统一。 相对第一种写在 all-posts.org 中的这种创作方式，不再每次写都要先打开 all-posts 这个文档，在其中创建新的结点，直接使用 org-roam-node-find 创建新的结点写 post 即可。 post 和其他笔记之间的区别仅在于我是否选择将其 export 到 blog 这个项目文件中。相对于第二种使用 easy-hugo 的方式，可以更大化的利用 org-roam 这个包的基础功能。 easy-hugo 中毕竟就使用了两个命令而己，完全可以被 org-roam 替代。 使用 easy-hugo 如果选择 org 作为文档的格式，那么不会将文档转换成 md 文档。使用 all-posts.org 或者是 org-roam 中的节点都可以将 org 文档转换成 md 文件。虽然 hugo 支持解析 org 文档，但是我看对 md 的解析更快一些。那么使用 org-roam 管理自己的 posts 看起来就有了优势。 一个统一的流程，可以显著减少自己在无关程序性的事务上清耗的精力。 Org-roam 中关于图片的管理也很方便，当 export 到 blog 用项目仓库时，图片会自动 export 到 hugo-source 项目仓库中的 staic/ox-hugo 文件夹中。不用使用 easy-hugo-put-image 这个功能。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:3:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#在-org-roam-笔记系统中进行"}]