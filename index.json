[{"categories":null,"content":"Org 转 latex 的自用基本配置，日常使用","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:1:0","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:2:0","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#emacs-配置"},{"categories":null,"content":"Org 编译 PDF 的一般流程 导言区内容 一篇 PDF 的样式，取决于此处的设置。日常配置好两个常用的模板即可处理大部分的文档写作工作。目前，我还没有配置 report 类型的模板。有时间的时候，处理一下。 这部分的内容，见第四部分的说明，己包含常用的配置。在 Emacs 中可以将它们组合后，制作成模板，当需要的时候，插入即可，很方便。 yasnippet 和 tempel 这两个包都很好用。 正文具体内容的写作。 内容这部分是一篇文章的主要部分，需要花大量的时间和精力进行。写本文的目的也就将除此之外的部分简化，减少程序性的事务消消耗的精力。 通过 C-c C-e l o 编译 pdf 文件，并打开预览。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:3:0","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-编译-pdf-的一般流程"},{"categories":null,"content":"Org 文件头部内容配置","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:0","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-文件头部内容配置"},{"categories":null,"content":"documentclass Figure 1: documentclass 其中 #+title: 是文章的名字。如果需要不输出 title ，增加下面一行说明，输出 pdf 的时候就不会生成标题。 #+LATEX_CLASS 有默认值，可以见 org-latex-default-class ，默认使用 article 。 #+LATEX_CLASS 还有 article ， book 等，可以查看 org-latex-classes 这个值。 OPTIONS: 中可以指定是否输出目录，日期，作者。 #+LATEX_CLASS_OPTIONS 设置 documentclass 中的可选参数。如 [UTF8,a4paper,12pt] 。其他的参数看手册。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:1","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#documentclass"},{"categories":null,"content":"页面布局 Figure 2: 文档布局 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:2","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页面布局"},{"categories":null,"content":"字体大小和类型 Figure 3: 字体 这个根据需要自己配吧。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:3","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#字体大小和类型"},{"categories":null,"content":"页眉和页脚 Figure 4: 页眉和页脚 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:4","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页眉和页脚"},{"categories":null,"content":"目录通过 secnumdepth 控制目录的深度，根据需要来设置就好。 Figure 5: 目录 当使用 article 这个样式的时候，目录这两个字不会居中。当使用 book 的时候，会居中。 book 这个样式中有 chapter 这一个控制， chapter 是设置为居中显示的，相应的目录这两个字也是居中显示。 后期研究下，怎么单独设置某一级标题居中显示。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:5","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#目录"},{"categories":null,"content":"标题主要是使用了 titlesec 这个包，设置了 titleformat 和 titlespace 这两个参数，分别控制着标题的样式和标题前后的行间距。不设置这个值的话，当使用 book 这个样式时，行间距会很难看。 titleformat 中可以设置字体的大小和类型。 Figure 6: 标题 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:6","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#标题"},{"categories":null,"content":"图形图形的话，就是使用 graphicx 和 subfigure 这两个包。 Figure 7: 图形 在 org-mode 中我使用 org-download 这个包进行图片的管理，通过 org-download-clipboard 将图片复制到 org 文档中。当需要插入己有图片时，我会使用 org-insert-link 插入 file 类型的文件。 图形环境中 placement 这个参数有五个选项 !htbp ，分别对应的是 here,top,bottom,page of float, 当图形位置不在文本附近时或者你需要强制图形在文本附近，可以加入 ! 来强制实现。一般情况下，使用 htbp 基本上能满足需要了。 当一行只有一张图时，使用 org-download-clipboard 产生的配置如图 \\ref{org-mode 图形配置} 所示： Figure 8: org-mode 图形配置 图中 #+NAME 当需要引用时，可以通过在正文中使用 ref{} 来实现引用。 #+CAPTION 是图片的标签，一般居于图片的下方。 #+ATTR_LATEX 可以控制图片在文章中的大小，单张图设置 :width 8cm 即可。 当一行有两张图时，我会插入模板，如下： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\centering \\caption{fig:} \\end{figure} 当有四张图时，我会使用下面的配置： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\centering \\caption{fig:} \\end{figure} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:7","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图形"},{"categories":null,"content":"图表这里的问题还很大，得好好琢磨一下。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:8","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图表"},{"categories":null,"content":"数学公式一般有行内公式和行间公式两种。在 org 中的语法很简单，分别使用 $$ 或者 \\[\\]\\ 。 如果需要设置数学字体的话，需要如下配置，见图 \\ref{数学字体配置}： Figure 9: 数学字体配置 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:9","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#数学公式"},{"categories":null,"content":"代码环境Org-mode 中的代码环境可以使用 listings 和 minted 这两种方式。目前使用推荐使用 minted 这种方式，比较新。 minted 需要安装 pygemnts 这个包，终端执行下面的命令。 pip3 install pygments 别外，编译时需要加入 eshell-escape 这个命令参数，见上方 Emacs 中的配置。这个很重要，否则当编译的时候会报错。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:10","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#代码环境"},{"categories":null,"content":"参考文献 Figure 10: 参考文献 org 9.5.2 己经内置了 org-cite 。参考文献的格式设置见 cite_export 。我一般使用 chinese-gb7714 这个，具体的文件可以去 zotero 的官网下载。 设置 UNNUMBERED 这个 property ，目录中就会不显示参考文献这个标题，通常也不需要显示。 默认的参考文献间距过大，使用 #+LATEX_HEADER: \\usepackage{bibspacing} 这个文件，此文件用内容是网上抄来的一段代码，具体的内容如下，使用时将下面的内容保存到 bibspacing.sty 中，将该文件放到 /usr/local/texlive/2021/texmf-dist/tex/latex/bibspacing 文件夹中，然后执行 sudo texhash 即可： \\newdimen\\bibindent \\setlength\\bibindent{1.5em} \\newdimen\\bibspacing \\setlength\\bibspacing\\z@ \\renewenvironment{thebibliography}[1]{% \\section*{\\refname \\@mkboth{\\MakeUppercase\\refname}{\\MakeUppercase\\refname}}% \\list{\\@biblabel{\\@arabic\\c@enumiv}}% {\\settowidth\\labelwidth{\\@biblabel{#1}}% \\leftmargin\\labelwidth \\advance\\leftmargin\\labelsep \\itemsep\\z@skip % should this be commented out? \\parsep\\z@skip % should this be commented out? \\@openbib@code \\usecounter{enumiv}% \\let\\p@enumiv\\@empty \\renewcommand\\theenumiv{\\@arabic\\c@enumiv}}% \\sloppy\\clubpenalty4000\\widowpenalty4000% \\sfcode`\\.\\@m} {\\def\\@noitemerr {\\@latex@warning{Empty `thebibliography' environment}}% \\endlist} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:11","series":null,"tags":null,"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#参考文献"},{"categories":null,"content":"统一 workflow ，减少在程序性事务上清耗精力","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/","series":null,"tags":["Emacs"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/"},{"categories":null,"content":"最近配置了自己的 blog， 目前写 blog 的流程有三种方式： ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:0:0","series":null,"tags":["Emacs"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#"},{"categories":null,"content":"写在一个统一的文件中这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。 如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。 虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:1:0","series":null,"tags":["Emacs"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#写在一个统一的文件中"},{"categories":null,"content":"使用 easy-hugoeasy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下： (defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/blog/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-org-header t) 我使用 easy-hugo 的流程很简单，通过 easy-hugo-new-post 创建新的文章 ，写文章， easy-hugo-magit 提交到仓库。看下图中 easy-hugo 提供了很多人命令，但是使用的很少。 Figure 1: easy-hugo menu ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:2:0","series":null,"tags":["Emacs"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#使用-easy-hugo"},{"categories":null,"content":"在 org-roam 笔记系统中进行今天想到我使用 org-roam 管理自己的笔记，那么在本地是否可以结合 org-roam 进行 blog 的写作呢？实践证明是可以的。这篇文章就是在 org-roam 中写的。 这种的优势是，每一篇 post 都是 org-roam 中的一个 node ；结合 org-roam 的方式使得自己对于写作的 workflow 更统一。 相对第一种写在 all-posts.org 中的这种创作方式，不再每次写都要先打开 all-posts 这个文档，在其中创建新的结点，直接使用 org-roam-node-find 创建新的结点写 post 即可。 post 和其他笔记之间的区别仅在于我是否选择将其 export 到 blog 这个项目文件中。相对于第二种使用 easy-hugo 的方式，可以更大化的利用 org-roam 这个包的基础功能。 easy-hugo 中毕竟就使用了两个命令而己，完全可以被 org-roam 替代。 使用 easy-hugo 如果选择 org 作为文档的格式，那么不会将文档转换成 md 文档。使用 all-posts.org 或者是 org-roam 中的节点都可以将 org 文档转换成 md 文件。虽然 hugo 支持解析 org 文档，但是我看对 md 的解析更快一些。那么使用 org-roam 管理自己的 posts 看起来就有了优势。 一个统一的流程，可以显著减少自己在无关程序性的事务上清耗的精力。 Org-roam 中关于图片的管理也很方便，当 export 到 blog 用项目仓库时，图片会自动 export 到 hugo-source 项目仓库中的 staic/ox-hugo 文件夹中。不用使用 easy-hugo-put-image 这个功能。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:3:0","series":null,"tags":["Emacs"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#在-org-roam-笔记系统中进行"},{"categories":null,"content":"Interface Show ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:1:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#interface-show"},{"categories":null,"content":"Introduction The Borg assimilate Emacs packages as Git submodules. 我使用 borg 进行 Emacs 包的管理，详细的使用见 borg 官方手册。 使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 左右（ Arch Emacs 27.2 ）。 使用 org-mode 对 Emacs 的配置文件进行管理（见文学编程）， org-auto-tangle 自动将配置文件 tangle 到 init.el 文件中。默认会解析到 init.el 文件中，如果有不想解析或解析到其他文件的，在 src block 中加上 :tangle no 或 :tangle other.el 。 一个 init.el 文件，不需要分离配置，管理起来，没什么 STRESS. ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:2:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#introduction"},{"categories":null,"content":"Why Emacs对于一个非专业的程序员，使用此文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME 。 Emacs 具有强大的生态，可以进行文件管理，财务管理，事务管理，邮件管理，还可以用来听音乐，看视频。 ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:2:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#why-emacs"},{"categories":null,"content":"About other note taking software我使用过的笔记软件有很多，在遇到 Emacs 前，尝试过的有 PKM 软件， Mediawiki ， Tiddly wiki ， Onenote ，印象笔记，蚂蚁笔记， Simplenote ， Joplin 等等。当然也尝试过 markdown 。 我为什么不使用类似 onenote ，印象笔记等软件？ Onenote 是私有格式，意味着当我需要夸平台时，其专有格式会给我带来麻烦。印象笔记也是如此，而且印象笔记的付费一言难尽。以上尝试的软件都没能长久使用，或多或少的存在痛点。 更重要的是不符合我关于笔记是 ​本地可控，纯文本​ 的需求。 ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:2:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#about-other-note-taking-software"},{"categories":null,"content":"Acknowledgements If I have seen further, it is by standing on the shoulders of giants. —- Sir Isaac Newton 谢谢以下配置的作者，从他们那学到了很多关于 Emacs 的知识。排名不分先后。 https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:2:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#acknowledgements"},{"categories":null,"content":"Rudimentary configurationMake this file run (slightly) faster with lexical binding (see Blog). ;; init.el --- My personal emacs configuration -*- lexical-binding: t; -*- ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rudimentary-configuration"},{"categories":null,"content":"Early Init;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; NOTE: early-init.el is now generated from readme.org. Please edit that file instead ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6) ;; In Emacs 27+, package initialization occurs before `user-init-file' is ;; loaded, but after `early-init-file'. Doom handles package initialization, so ;; we must prevent Emacs from doing it early! (setq package-enable-at-startup nil) ;; Do not allow loading from the package cache (same reason). (setq package-quickstart nil) ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (setq inhibit-startup-message t) (setq inhibit-splash-screen t) (push '(menu-bar-lines . 0) default-frame-alist) (push '(tool-bar-lines . 0) default-frame-alist) (push '(vertical-scroll-bars) default-frame-alist) ;; Resizing the Emacs frame can be a terribly expensive part of changing the ;; font. By inhibiting this, we easily halve startup times with fonts that are ;; larger than the system default. (setq frame-inhibit-implied-resize t) (setq inhibit-compacting-font-caches t) (setq use-file-dialog nil) ;; Make the initial buffer load faster by setting its mode to fundamental-mode ;; (setq initial-major-mode 'fundamental-mode) ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are ;; compiled ahead-of-time when they are installed and site files are compiled ;; when gccemacs is installed. (setq comp-deferred-compilation nil) ;; Disable mode-line, It's uglily after theme changed (setq-default mode-line-format nil) ;;; early-init.el ends here ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#early-init"},{"categories":null,"content":"Borg - Package manageUpdate:2022-03-06. 目前我使用 borg 和 leaf 管现我的 Emacs 配置文件， borg 很好的替代了 git submodule ，不用终端直接进行 Emacs 包的管理。 leaf 目前是作为 use-package 的替代品使用，其他的还有 setup.el ，但是目前没有深入的去探索。 Update:2022-03-07 能否剥离 leaf ？目前己全删除 leaf 相关包. (add-to-list 'load-path (expand-file-name \"packages/borg\" user-emacs-directory)) (eval-and-compile (require 'borg) (borg-initialize)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#borg-package-manage"},{"categories":null,"content":"Start and close emacsSpeedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) gcmh(gcmh-mode) restart-emacsNever exit Emacs ！！！ 防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。 (global-set-key (kbd \"C-x C-c\") 'restart-emacs) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#start-and-close-emacs"},{"categories":null,"content":"Start and close emacsSpeedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) gcmh(gcmh-mode) restart-emacsNever exit Emacs ！！！ 防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。 (global-set-key (kbd \"C-x C-c\") 'restart-emacs) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#speedup"},{"categories":null,"content":"Start and close emacsSpeedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) gcmh(gcmh-mode) restart-emacsNever exit Emacs ！！！ 防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。 (global-set-key (kbd \"C-x C-c\") 'restart-emacs) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#gcmh"},{"categories":null,"content":"Start and close emacsSpeedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) gcmh(gcmh-mode) restart-emacsNever exit Emacs ！！！ 防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。 (global-set-key (kbd \"C-x C-c\") 'restart-emacs) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#restart-emacs"},{"categories":null,"content":"Personal information(setq user-full-name \"DN\" user-mail-address \"duan_n@outlook.com\") (setq auth-sources '(\"~/.authinfo\")) ;; auth-source-cache-expiry nil) ;; (setq auth-sources '(macos-keychain-generic)) ;; (setq auth-sources (quote (macos-keychain-internet macos-keychain-generic))) (setq epa-pinentry-mode 'loopback) (pinentry-start) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#personal-information"},{"categories":null,"content":"Variables自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。 folder(defvar dn-cloud \"~/Nextcloud\" \"This folder is My cloud.\") (defvar dn-galaxy (expand-file-name \"L.Personal.Galaxy\" dn-cloud) \"This folder stores all the plain text files of my life.\") (defvar dn-roam (expand-file-name \"roam\" dn-galaxy) \"This is the org-roam folder.\") (defvar dn-finance (expand-file-name \"finance\" dn-galaxy) \"This folder stores all my finance files.\") (defvar dn-finance-year (expand-file-name (format-time-string \"%Y\") dn-finance) \"This folder stores all my finance files of current year.\") (defvar dn-pdf-storage (expand-file-name \"storage/pdf\" dn-galaxy) \"This folder stores all the pdf files.\") (defvar dn-cache-directory \"~/.cache/emacs\" \"This folder stores all EMACS cache file.\") (defvar dn-template-directory (expand-file-name \"template\" (file-truename user-emacs-directory))) (defvar default-search-engine-url '(\"Google\" \"www.google.com\")) system type(defvar sys-linux (and (eq system-type 'gnu/linux) (null (getenv \"ANDROID_ROOT\"))) \"GNU Emacs is running on Linux, not termux.\") (defvar sys-winp (eq system-type 'windows-nt) \"Are we running on a WinTel system?\") (defvar sys-macp (eq system-type 'darwin) \"Are we running on a mac system\") (defvar sys-wslp (and (eq system-type 'gnu/linux) (string-match \"-[Mm]icrosoft\" operating-system-release)) \"Are we running on a GNU/Linux system?\") (defvar sys-termuxp (and (eq system-type 'gnu/linux) (not (null (getenv \"ANDROID_ROOT\")))) \"GNU Emacs is running on Termux, not Linux system.\") ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#variables"},{"categories":null,"content":"Variables自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。 folder(defvar dn-cloud \"~/Nextcloud\" \"This folder is My cloud.\") (defvar dn-galaxy (expand-file-name \"L.Personal.Galaxy\" dn-cloud) \"This folder stores all the plain text files of my life.\") (defvar dn-roam (expand-file-name \"roam\" dn-galaxy) \"This is the org-roam folder.\") (defvar dn-finance (expand-file-name \"finance\" dn-galaxy) \"This folder stores all my finance files.\") (defvar dn-finance-year (expand-file-name (format-time-string \"%Y\") dn-finance) \"This folder stores all my finance files of current year.\") (defvar dn-pdf-storage (expand-file-name \"storage/pdf\" dn-galaxy) \"This folder stores all the pdf files.\") (defvar dn-cache-directory \"~/.cache/emacs\" \"This folder stores all EMACS cache file.\") (defvar dn-template-directory (expand-file-name \"template\" (file-truename user-emacs-directory))) (defvar default-search-engine-url '(\"Google\" \"www.google.com\")) system type(defvar sys-linux (and (eq system-type 'gnu/linux) (null (getenv \"ANDROID_ROOT\"))) \"GNU Emacs is running on Linux, not termux.\") (defvar sys-winp (eq system-type 'windows-nt) \"Are we running on a WinTel system?\") (defvar sys-macp (eq system-type 'darwin) \"Are we running on a mac system\") (defvar sys-wslp (and (eq system-type 'gnu/linux) (string-match \"-[Mm]icrosoft\" operating-system-release)) \"Are we running on a GNU/Linux system?\") (defvar sys-termuxp (and (eq system-type 'gnu/linux) (not (null (getenv \"ANDROID_ROOT\")))) \"GNU Emacs is running on Termux, not Linux system.\") ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#folder"},{"categories":null,"content":"Variables自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。 folder(defvar dn-cloud \"~/Nextcloud\" \"This folder is My cloud.\") (defvar dn-galaxy (expand-file-name \"L.Personal.Galaxy\" dn-cloud) \"This folder stores all the plain text files of my life.\") (defvar dn-roam (expand-file-name \"roam\" dn-galaxy) \"This is the org-roam folder.\") (defvar dn-finance (expand-file-name \"finance\" dn-galaxy) \"This folder stores all my finance files.\") (defvar dn-finance-year (expand-file-name (format-time-string \"%Y\") dn-finance) \"This folder stores all my finance files of current year.\") (defvar dn-pdf-storage (expand-file-name \"storage/pdf\" dn-galaxy) \"This folder stores all the pdf files.\") (defvar dn-cache-directory \"~/.cache/emacs\" \"This folder stores all EMACS cache file.\") (defvar dn-template-directory (expand-file-name \"template\" (file-truename user-emacs-directory))) (defvar default-search-engine-url '(\"Google\" \"www.google.com\")) system type(defvar sys-linux (and (eq system-type 'gnu/linux) (null (getenv \"ANDROID_ROOT\"))) \"GNU Emacs is running on Linux, not termux.\") (defvar sys-winp (eq system-type 'windows-nt) \"Are we running on a WinTel system?\") (defvar sys-macp (eq system-type 'darwin) \"Are we running on a mac system\") (defvar sys-wslp (and (eq system-type 'gnu/linux) (string-match \"-[Mm]icrosoft\" operating-system-release)) \"Are we running on a GNU/Linux system?\") (defvar sys-termuxp (and (eq system-type 'gnu/linux) (not (null (getenv \"ANDROID_ROOT\")))) \"GNU Emacs is running on Termux, not Linux system.\") ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#system-type"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#better-defaults"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#system-code-type"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dialog-box"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#define-fringe-bitmap"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#hide-mouse"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#builtin-modes"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#large-file"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#custom-file"},{"categories":null,"content":"Better defaults(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) (setq help-window-select t) (setq ring-bell-function 'ignore) ;; Do not saves duplicates in kill-ring (customize-set-variable 'kill-do-not-save-duplicates t) system code type(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) dialog boxNever popup dialog box. (setq use-dialog-box nil) define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) hide mouseBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) builtin modesEmacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 paren (setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) elec-pair (electric-pair-mode) linum (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) simple ;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) bookmark (setq bookmark-default-file (expand-file-name \"storage/bookmarks\" dn-galaxy)) autorevert (global-auto-revert-mode) subword (global-subword-mode) winner (setq winner-dont-bind-my-keys nil) (winner-mode) server According to this blog, use server-process instead of server-ruanning-p 。 (unless (bound-and-true-p server-process) (server-start)) prettify-symbols-mode (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) so-long (global-so-long-mode) delsel (delete-selection-mode) webjump 基本用不上，我使用 google-this 这个包。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) large file(setq large-file-warning-threshold nil) Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) ;; (load custom-file t) Private file私有配置不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#private-file"},{"categories":null,"content":"User interface2022-03-07 目前我喜欢极简的界面。 ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#user-interface"},{"categories":null,"content":"FontsUpdate:2022-03-07 很想把 sarasa 这个字体去掉，但是目前还不知道怎么配置，主要是在 org-table 中要能实现中英文的等宽。另处我不想使用 cnfonts 或 valign 此类包。 Update:2022-03-08 仅在 org-table 中使用 sarasa 字根。目前没什么好的能够替代 sarasa 的字体。 (set-face-attribute 'default nil :family \"Sarasa Mono SC\" :weight 'regular :height 160) (set-fontset-font t 'han (font-spec :name \"Source Han Serif SC\" :size 16)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fonts"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion(all-the-icons-completion-mode) kind-icon(require 'kind-icon) (setq kind-icon-default-face 'corfu-default) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#icon"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion(all-the-icons-completion-mode) kind-icon(require 'kind-icon) (setq kind-icon-default-face 'corfu-default) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#all-the-icons"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion(all-the-icons-completion-mode) kind-icon(require 'kind-icon) (setq kind-icon-default-face 'corfu-default) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#all-the-icons-completion"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion(all-the-icons-completion-mode) kind-icon(require 'kind-icon) (setq kind-icon-default-face 'corfu-default) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#kind-icon"},{"categories":null,"content":"Cursor(blink-cursor-mode -1) (setq-default cursor-in-non-selected-windows nil) 我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。 cursor color(setq im-cursor-color \"Red\") (cursor-chg-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor"},{"categories":null,"content":"Cursor(blink-cursor-mode -1) (setq-default cursor-in-non-selected-windows nil) 我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。 cursor color(setq im-cursor-color \"Red\") (cursor-chg-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor-color"},{"categories":null,"content":"Themes我的默认主题是 modus-themes ，这个包的自定义性特别高，有黑白配色两套。 搭配 circadian 使用，可实现自动切换主题。 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(accented intense) modus-themes-paren-match '(intense) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction free搭配 centaur-tabs 使用，默认的 tab bar 主题是灰度的，我不喜欢，我把它修改成了与主题色相配的黑白色。 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#F2F0EF\") (bg-dim . \"#F2F0EF\") ;; (bg-hl-line . \"#F2F0EF\") ;; (bg-active . \"#F2F0EF\") ;; (bg-inactive . \"#ffffff\") ;; (bg-tab-bar . \"#F2F0EF\") ;; (bg-tab-active . \"#F2F0EF\") ;; (bg-tab-inactive . \"#F2F0EF\") ;; (blue . \"#252321\") (magenta-nuanced-bg . \"#FFFFFF\") )) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#252321\") (bg-dim . \"#252321\") ;; (bg-hl-line . \"#252321\") ;; (bg-active . \"#252321\") ;; (bg-inactive . \"#615F5D\") ;; (bg-tab-bar . \"#252321\") ;; (bg-tab-active . \"#252321\") ;; (bg-tab-inactive . \"#252321\") ;; (blue . \"#F2F0EF\") (magenta-nuanced-bg . \"#615F5D\") )) Theme auto change Theme change (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#themes"},{"categories":null,"content":"Themes我的默认主题是 modus-themes ，这个包的自定义性特别高，有黑白配色两套。 搭配 circadian 使用，可实现自动切换主题。 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(accented intense) modus-themes-paren-match '(intense) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction free搭配 centaur-tabs 使用，默认的 tab bar 主题是灰度的，我不喜欢，我把它修改成了与主题色相配的黑白色。 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#F2F0EF\") (bg-dim . \"#F2F0EF\") ;; (bg-hl-line . \"#F2F0EF\") ;; (bg-active . \"#F2F0EF\") ;; (bg-inactive . \"#ffffff\") ;; (bg-tab-bar . \"#F2F0EF\") ;; (bg-tab-active . \"#F2F0EF\") ;; (bg-tab-inactive . \"#F2F0EF\") ;; (blue . \"#252321\") (magenta-nuanced-bg . \"#FFFFFF\") )) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#252321\") (bg-dim . \"#252321\") ;; (bg-hl-line . \"#252321\") ;; (bg-active . \"#252321\") ;; (bg-inactive . \"#615F5D\") ;; (bg-tab-bar . \"#252321\") ;; (bg-tab-active . \"#252321\") ;; (bg-tab-inactive . \"#252321\") ;; (blue . \"#F2F0EF\") (magenta-nuanced-bg . \"#615F5D\") )) Theme auto change Theme change (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#override-color-for-distraction-free"},{"categories":null,"content":"Themes我的默认主题是 modus-themes ，这个包的自定义性特别高，有黑白配色两套。 搭配 circadian 使用，可实现自动切换主题。 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(accented intense) modus-themes-paren-match '(intense) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction free搭配 centaur-tabs 使用，默认的 tab bar 主题是灰度的，我不喜欢，我把它修改成了与主题色相配的黑白色。 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#F2F0EF\") (bg-dim . \"#F2F0EF\") ;; (bg-hl-line . \"#F2F0EF\") ;; (bg-active . \"#F2F0EF\") ;; (bg-inactive . \"#ffffff\") ;; (bg-tab-bar . \"#F2F0EF\") ;; (bg-tab-active . \"#F2F0EF\") ;; (bg-tab-inactive . \"#F2F0EF\") ;; (blue . \"#252321\") (magenta-nuanced-bg . \"#FFFFFF\") )) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#252321\") (bg-dim . \"#252321\") ;; (bg-hl-line . \"#252321\") ;; (bg-active . \"#252321\") ;; (bg-inactive . \"#615F5D\") ;; (bg-tab-bar . \"#252321\") ;; (bg-tab-active . \"#252321\") ;; (bg-tab-inactive . \"#252321\") ;; (blue . \"#F2F0EF\") (magenta-nuanced-bg . \"#615F5D\") )) Theme auto change Theme change (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#theme-auto-change"},{"categories":null,"content":"Dashboard(setq dashboard-startup-banner \"~/.emacs.d/banner.txt\" dashboard-center-content t dashboard-set-init-info t dashboard-set-file-icons t dashboard-modify-heading-icons '((recents . \"file-text\") (bookmarks . \"book\")) dashboard-items '((recents . 5) (bookmarks . 5) (agenda . 5) (registers . 5))) (setq dashboard-set-navigator t) (set-fontset-font t '(#xe03d . #xe03d) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe051 . #xe051) (font-spec :family \"Material Icons\")) (setq dashboard-navigator-buttons `( ((,(all-the-icons-octicon \"mark-github\" :height 1 :v-adjust 0.0) \"Homepage\" \"Browse homepage\" (lambda (\u0026rest _) (browse-url \"https://github.com/Jousimies/.emacs.d\"))) (,(all-the-icons-octicon \"tools\" :height 1 :v-adjust 0.0) \"Settings\" \"Open README file\" (lambda (\u0026rest _) (find-file \"~/.emacs.d/README.org\"))) (,(all-the-icons-faicon \"sitemap\" :height 1 :v-adjust 0.0) \"Blog\" \"Browse Blog\" (lambda (\u0026rest _) (browse-url \"https://jousimies.github.io\"))) (,(all-the-icons-material \"queue_music\" :height 1 :v-adjust -0.2) \"Music\" \"Netease cloud music\" (lambda (\u0026rest _) (netease-cloud-music)))))) (setq dashboard-footer-icon (all-the-icons-octicon \"dashboard\" :height 1.1 :v-adjust -0.05 :face 'font-lock-keyword-face)) (setq dashboard-footer-messages `(,(concat \"Happy hacking, jousimies - Emacs \" (all-the-icons-octicon \"heart\" :height 1.1 :v-adjust -0.05) \" you!\"))) (dashboard-setup-startup-hook) (global-set-key (kbd \"\u003cf5\u003e\") 'dashboard-refresh-buffer) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dashboard"},{"categories":null,"content":"rainbow-mode(add-hook 'prog-mode-hook 'rainbow-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rainbow-mode"},{"categories":null,"content":"helpful(global-set-key [remap describe-function] 'helpful-callable) (global-set-key [remap describe-variable] 'helpful-variable) (global-set-key [remap describe-key] 'helpful-key) (global-set-key (kbd \"C-h F\") 'helpful-function) (global-set-key (kbd \"C-h C\") 'helpful-command) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:7","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#helpful"},{"categories":null,"content":"info-colors(add-hook 'Info-selection-hook 'info-colors-fontify-node) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:8","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#info-colors"},{"categories":null,"content":"goggles Goggles highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported. (setq-default goggles-pulse t) (add-hook 'prog-mode-hook 'goggles-mode) (add-hook 'text-mode-hook 'goggles-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:9","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#goggles"},{"categories":null,"content":"emojify(add-hook 'after-init-hook #'global-emojify-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:10","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emojify"},{"categories":null,"content":"svg将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！ svg-lib(setq svg-lib-icons-dir (expand-file-name \"svg-lib\" dn-cache-directory)) Define gtd keywords faces(defface gtd-next '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-wait '((((background light)) :foreground \"#dea32c\") (t :foreground \"#fcaf17\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-someday '((((background light)) :foreground \"#7d5886\") (t :foreground \"#c77eb5\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-cncl '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-a '((((background light)) :foreground \"#f05b72\") (t :foreground \"#f58f98\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-b '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-c '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) svg-tag-modesvg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。 (require 'svg-tag-mode) (defconst date-re \"[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\") (defconst time-re \"[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\") (defconst day-re \"[A-Za-z]\\\\{3\\\\}\") (defun svg-progress-count (value) (let* ((seq (mapcar #'string-to-number (split-string value \"/\"))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 2 :padding 2 :margin 1)) :ascent 'center))) (setq svg-tag-tags `((\"TODO\" . ((lambda (tag) (svg-tag-make \"TODO\" :face 'org-todo :inverse t :margin 0)))) (\"NEXT\" . ((lambda (tag) (svg-tag-make \"NEXT\" :face 'gtd-next :inverse t :margin 0)))) (\"WAIT\" . ((lambda (tag) (svg-tag-make \"WAIT\" :face 'gtd-wait :inverse t :margin 0)))) (\"SOMEDAY\" . ((lambda (tag) (svg-tag-make \"SOMEDAY\" :face 'gtd-someday :inverse t :margin 0)))) (\"CNCL\" . ((lambda (tag) (svg-tag-make \"CNCL\" :face 'gtd-cncl :inverse t :margin 0)))) (\"DONE\" . ((lambda (tag) (svg-tag-make \"DONE\" :face 'org-done :margin 0)))) (\"\\\\[#[A]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-a :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[B]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-b :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[C]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-c :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\" . ((lambda (tag) (svg-progress-count (substring tag 1 -1))))) )) (add-hook 'org-mode-hook 'svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag(advice-add 'modus-themes-toggle :after 'svg-tag-mode-on) (advice-add 'circadian-activate-latest-theme :after 'svg-tag-mode-on) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#svg"},{"categories":null,"content":"svg将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！ svg-lib(setq svg-lib-icons-dir (expand-file-name \"svg-lib\" dn-cache-directory)) Define gtd keywords faces(defface gtd-next '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-wait '((((background light)) :foreground \"#dea32c\") (t :foreground \"#fcaf17\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-someday '((((background light)) :foreground \"#7d5886\") (t :foreground \"#c77eb5\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-cncl '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-a '((((background light)) :foreground \"#f05b72\") (t :foreground \"#f58f98\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-b '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-c '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) svg-tag-modesvg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。 (require 'svg-tag-mode) (defconst date-re \"[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\") (defconst time-re \"[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\") (defconst day-re \"[A-Za-z]\\\\{3\\\\}\") (defun svg-progress-count (value) (let* ((seq (mapcar #'string-to-number (split-string value \"/\"))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 2 :padding 2 :margin 1)) :ascent 'center))) (setq svg-tag-tags `((\"TODO\" . ((lambda (tag) (svg-tag-make \"TODO\" :face 'org-todo :inverse t :margin 0)))) (\"NEXT\" . ((lambda (tag) (svg-tag-make \"NEXT\" :face 'gtd-next :inverse t :margin 0)))) (\"WAIT\" . ((lambda (tag) (svg-tag-make \"WAIT\" :face 'gtd-wait :inverse t :margin 0)))) (\"SOMEDAY\" . ((lambda (tag) (svg-tag-make \"SOMEDAY\" :face 'gtd-someday :inverse t :margin 0)))) (\"CNCL\" . ((lambda (tag) (svg-tag-make \"CNCL\" :face 'gtd-cncl :inverse t :margin 0)))) (\"DONE\" . ((lambda (tag) (svg-tag-make \"DONE\" :face 'org-done :margin 0)))) (\"\\\\[#[A]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-a :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[B]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-b :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[C]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-c :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\" . ((lambda (tag) (svg-progress-count (substring tag 1 -1))))) )) (add-hook 'org-mode-hook 'svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag(advice-add 'modus-themes-toggle :after 'svg-tag-mode-on) (advice-add 'circadian-activate-latest-theme :after 'svg-tag-mode-on) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#svg-lib"},{"categories":null,"content":"svg将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！ svg-lib(setq svg-lib-icons-dir (expand-file-name \"svg-lib\" dn-cache-directory)) Define gtd keywords faces(defface gtd-next '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-wait '((((background light)) :foreground \"#dea32c\") (t :foreground \"#fcaf17\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-someday '((((background light)) :foreground \"#7d5886\") (t :foreground \"#c77eb5\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-cncl '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-a '((((background light)) :foreground \"#f05b72\") (t :foreground \"#f58f98\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-b '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-c '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) svg-tag-modesvg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。 (require 'svg-tag-mode) (defconst date-re \"[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\") (defconst time-re \"[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\") (defconst day-re \"[A-Za-z]\\\\{3\\\\}\") (defun svg-progress-count (value) (let* ((seq (mapcar #'string-to-number (split-string value \"/\"))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 2 :padding 2 :margin 1)) :ascent 'center))) (setq svg-tag-tags `((\"TODO\" . ((lambda (tag) (svg-tag-make \"TODO\" :face 'org-todo :inverse t :margin 0)))) (\"NEXT\" . ((lambda (tag) (svg-tag-make \"NEXT\" :face 'gtd-next :inverse t :margin 0)))) (\"WAIT\" . ((lambda (tag) (svg-tag-make \"WAIT\" :face 'gtd-wait :inverse t :margin 0)))) (\"SOMEDAY\" . ((lambda (tag) (svg-tag-make \"SOMEDAY\" :face 'gtd-someday :inverse t :margin 0)))) (\"CNCL\" . ((lambda (tag) (svg-tag-make \"CNCL\" :face 'gtd-cncl :inverse t :margin 0)))) (\"DONE\" . ((lambda (tag) (svg-tag-make \"DONE\" :face 'org-done :margin 0)))) (\"\\\\[#[A]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-a :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[B]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-b :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[C]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-c :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\" . ((lambda (tag) (svg-progress-count (substring tag 1 -1))))) )) (add-hook 'org-mode-hook 'svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag(advice-add 'modus-themes-toggle :after 'svg-tag-mode-on) (advice-add 'circadian-activate-latest-theme :after 'svg-tag-mode-on) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#define-gtd-keywords-faces"},{"categories":null,"content":"svg将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！ svg-lib(setq svg-lib-icons-dir (expand-file-name \"svg-lib\" dn-cache-directory)) Define gtd keywords faces(defface gtd-next '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-wait '((((background light)) :foreground \"#dea32c\") (t :foreground \"#fcaf17\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-someday '((((background light)) :foreground \"#7d5886\") (t :foreground \"#c77eb5\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-cncl '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-a '((((background light)) :foreground \"#f05b72\") (t :foreground \"#f58f98\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-b '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-c '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) svg-tag-modesvg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。 (require 'svg-tag-mode) (defconst date-re \"[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\") (defconst time-re \"[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\") (defconst day-re \"[A-Za-z]\\\\{3\\\\}\") (defun svg-progress-count (value) (let* ((seq (mapcar #'string-to-number (split-string value \"/\"))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 2 :padding 2 :margin 1)) :ascent 'center))) (setq svg-tag-tags `((\"TODO\" . ((lambda (tag) (svg-tag-make \"TODO\" :face 'org-todo :inverse t :margin 0)))) (\"NEXT\" . ((lambda (tag) (svg-tag-make \"NEXT\" :face 'gtd-next :inverse t :margin 0)))) (\"WAIT\" . ((lambda (tag) (svg-tag-make \"WAIT\" :face 'gtd-wait :inverse t :margin 0)))) (\"SOMEDAY\" . ((lambda (tag) (svg-tag-make \"SOMEDAY\" :face 'gtd-someday :inverse t :margin 0)))) (\"CNCL\" . ((lambda (tag) (svg-tag-make \"CNCL\" :face 'gtd-cncl :inverse t :margin 0)))) (\"DONE\" . ((lambda (tag) (svg-tag-make \"DONE\" :face 'org-done :margin 0)))) (\"\\\\[#[A]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-a :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[B]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-b :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[C]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-c :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\" . ((lambda (tag) (svg-progress-count (substring tag 1 -1))))) )) (add-hook 'org-mode-hook 'svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag(advice-add 'modus-themes-toggle :after 'svg-tag-mode-on) (advice-add 'circadian-activate-latest-theme :after 'svg-tag-mode-on) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#svg-tag-mode"},{"categories":null,"content":"svg将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！ svg-lib(setq svg-lib-icons-dir (expand-file-name \"svg-lib\" dn-cache-directory)) Define gtd keywords faces(defface gtd-next '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-wait '((((background light)) :foreground \"#dea32c\") (t :foreground \"#fcaf17\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-someday '((((background light)) :foreground \"#7d5886\") (t :foreground \"#c77eb5\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-cncl '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-a '((((background light)) :foreground \"#f05b72\") (t :foreground \"#f58f98\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-b '((((background light)) :foreground \"#1d9537\") (t :foreground \"#007d65\")) \"GTD face.\" :group 'gtd-faces) (defface gtd-c '((((background light)) :foreground \"#999d9c\") (t :foreground \"#4f5555\")) \"GTD face.\" :group 'gtd-faces) svg-tag-modesvg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。 (require 'svg-tag-mode) (defconst date-re \"[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\") (defconst time-re \"[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\") (defconst day-re \"[A-Za-z]\\\\{3\\\\}\") (defun svg-progress-count (value) (let* ((seq (mapcar #'string-to-number (split-string value \"/\"))) (count (float (car seq))) (total (float (cadr seq)))) (svg-image (svg-lib-concat (svg-lib-progress-bar (/ count total) nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11) (svg-lib-tag value nil :stroke 2 :padding 2 :margin 1)) :ascent 'center))) (setq svg-tag-tags `((\"TODO\" . ((lambda (tag) (svg-tag-make \"TODO\" :face 'org-todo :inverse t :margin 0)))) (\"NEXT\" . ((lambda (tag) (svg-tag-make \"NEXT\" :face 'gtd-next :inverse t :margin 0)))) (\"WAIT\" . ((lambda (tag) (svg-tag-make \"WAIT\" :face 'gtd-wait :inverse t :margin 0)))) (\"SOMEDAY\" . ((lambda (tag) (svg-tag-make \"SOMEDAY\" :face 'gtd-someday :inverse t :margin 0)))) (\"CNCL\" . ((lambda (tag) (svg-tag-make \"CNCL\" :face 'gtd-cncl :inverse t :margin 0)))) (\"DONE\" . ((lambda (tag) (svg-tag-make \"DONE\" :face 'org-done :margin 0)))) (\"\\\\[#[A]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-a :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[B]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-b :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\[#[C]\\\\]\" . ( (lambda (tag) (svg-tag-make tag :face 'gtd-c :inverse t :beg 2 :end -1 :margin 0)))) (\"\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\" . ((lambda (tag) (svg-progress-count (substring tag 1 -1))))) )) (add-hook 'org-mode-hook 'svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag(advice-add 'modus-themes-toggle :after 'svg-tag-mode-on) (advice-add 'circadian-activate-latest-theme :after 'svg-tag-mode-on) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-update-svg-tag"},{"categories":null,"content":"lin(setq lin-face 'lin-blue) (setq lin-mode-hooks '(bongo-mode-hook dired-mode-hook elfeed-search-mode-hook elfeed-summary-mode-hook elfeed-show-mode-hook git-rebase-mode-hook grep-mode-hook ibuffer-mode-hook ilist-mode-hook pdf-outline-minor-mode-hook ledger-report-mode-hook log-view-mode-hook magit-log-mode-hook mu4e-headers-mode notmuch-search-mode-hook notmuch-tree-mode-hook occur-mode-hook elfeed-show-mode-hook org-agenda-mode-hook proced-mode-hook ebib-entry-mode-hook ebib-index-mode-hook netease-cloud-music-mode-hook tabulated-list-mode-hook)) (lin-global-mode 1) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:12","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#lin"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#frame-management"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fullscreen"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#quit-and-delete-window"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#scroll-other-window"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-src"},{"categories":null,"content":"Frame managementFullscreen我总是全屏使用 Emacs。 (toggle-frame-fullscreen) Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用。 (defun dn/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun dn/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'dn/scroll-other-windown) (global-set-key (kbd \"M-p\") 'dn/scroll-other-windown-down) Org-src默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。 (with-eval-after-load 'org (setq org-src-window-setup 'current-window)) display-buffer-alist我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。 one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-in-side-window) (side . right) (window-width . 0.5) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) org-roam buffer (add-to-list 'display-buffer-alist '(\"\\\\*org-roam\\\\*\" (display-buffer-in-direction) (direction . right) (window-width . 0.25) (window-height . fit-window-to-buffer) (window-parameters (mode-line-format . none) (tab-line-format . none)))) Ilist buffer (add-to-list 'display-buffer-alist '(\"*Ilist*\" (display-buffer-in-side-window) (side . right) (window-width . 0.3) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#display-buffer-alist"},{"categories":null,"content":"Awesome Tray(setq awesome-tray-active-modules '(\"input-method\" \"date\")) (awesome-tray-mode 1) awesome try \u0026\u0026 meow stateCopy from https://emacs-china.org/t/awesome-tray-emacs-mode-line/7250/148 (defun awesome-tray-module-meow-info () (string-trim (meow-indicator))) (add-to-list 'awesome-tray-module-alist '(\"meow\" . (awesome-tray-module-meow-info awesome-tray-module-evil-face))) (add-to-list 'awesome-tray-active-modules \"meow\") awesome tray \u0026\u0026 mu4e unread(with-eval-after-load 'mu4e-alert ;; Copied from mu4e-alert (defun mu4e-alert-enable-tray-display () \"Enable display of unread emails in mode-line.\" (interactive) (add-hook 'mu4e-index-updated-hook #'mu4e-alert-update-mail-count-modeline) (add-hook 'mu4e-message-changed-hook #'mu4e-alert-update-mail-count-modeline) (advice-add #'mu4e-context-switch :around #'mu4e-alert--context-switch) (mu4e-alert-update-mail-count-modeline)) (mu4e-alert-enable-tray-display) (defun awesome-tray-module-mail-info () (concat \"EMAIL:\" (substring mu4e-alert-mode-line 7 9))) (add-to-list 'awesome-tray-module-alist '(\"mail\" . (awesome-tray-module-mail-info awesome-tray-module-belong-face))) (add-to-list 'awesome-tray-active-modules \"mail\")) Update awesome tray statusEnable awesome tray when theme changed。 (defvar after-load-theme-hook nil \"Hook run after a color theme is loaded using `load-theme'.\") (defadvice load-theme (after run-after-load-theme-hook activate) \"Run `after-load-theme-hook'.\" (run-hooks 'after-load-theme-hook)) (add-hook 'after-load-theme-hook 'awesome-tray-enable t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-tray"},{"categories":null,"content":"Awesome Tray(setq awesome-tray-active-modules '(\"input-method\" \"date\")) (awesome-tray-mode 1) awesome try \u0026\u0026 meow stateCopy from https://emacs-china.org/t/awesome-tray-emacs-mode-line/7250/148 (defun awesome-tray-module-meow-info () (string-trim (meow-indicator))) (add-to-list 'awesome-tray-module-alist '(\"meow\" . (awesome-tray-module-meow-info awesome-tray-module-evil-face))) (add-to-list 'awesome-tray-active-modules \"meow\") awesome tray \u0026\u0026 mu4e unread(with-eval-after-load 'mu4e-alert ;; Copied from mu4e-alert (defun mu4e-alert-enable-tray-display () \"Enable display of unread emails in mode-line.\" (interactive) (add-hook 'mu4e-index-updated-hook #'mu4e-alert-update-mail-count-modeline) (add-hook 'mu4e-message-changed-hook #'mu4e-alert-update-mail-count-modeline) (advice-add #'mu4e-context-switch :around #'mu4e-alert--context-switch) (mu4e-alert-update-mail-count-modeline)) (mu4e-alert-enable-tray-display) (defun awesome-tray-module-mail-info () (concat \"EMAIL:\" (substring mu4e-alert-mode-line 7 9))) (add-to-list 'awesome-tray-module-alist '(\"mail\" . (awesome-tray-module-mail-info awesome-tray-module-belong-face))) (add-to-list 'awesome-tray-active-modules \"mail\")) Update awesome tray statusEnable awesome tray when theme changed。 (defvar after-load-theme-hook nil \"Hook run after a color theme is loaded using `load-theme'.\") (defadvice load-theme (after run-after-load-theme-hook activate) \"Run `after-load-theme-hook'.\" (run-hooks 'after-load-theme-hook)) (add-hook 'after-load-theme-hook 'awesome-tray-enable t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-try-and-and-meow-state"},{"categories":null,"content":"Awesome Tray(setq awesome-tray-active-modules '(\"input-method\" \"date\")) (awesome-tray-mode 1) awesome try \u0026\u0026 meow stateCopy from https://emacs-china.org/t/awesome-tray-emacs-mode-line/7250/148 (defun awesome-tray-module-meow-info () (string-trim (meow-indicator))) (add-to-list 'awesome-tray-module-alist '(\"meow\" . (awesome-tray-module-meow-info awesome-tray-module-evil-face))) (add-to-list 'awesome-tray-active-modules \"meow\") awesome tray \u0026\u0026 mu4e unread(with-eval-after-load 'mu4e-alert ;; Copied from mu4e-alert (defun mu4e-alert-enable-tray-display () \"Enable display of unread emails in mode-line.\" (interactive) (add-hook 'mu4e-index-updated-hook #'mu4e-alert-update-mail-count-modeline) (add-hook 'mu4e-message-changed-hook #'mu4e-alert-update-mail-count-modeline) (advice-add #'mu4e-context-switch :around #'mu4e-alert--context-switch) (mu4e-alert-update-mail-count-modeline)) (mu4e-alert-enable-tray-display) (defun awesome-tray-module-mail-info () (concat \"EMAIL:\" (substring mu4e-alert-mode-line 7 9))) (add-to-list 'awesome-tray-module-alist '(\"mail\" . (awesome-tray-module-mail-info awesome-tray-module-belong-face))) (add-to-list 'awesome-tray-active-modules \"mail\")) Update awesome tray statusEnable awesome tray when theme changed。 (defvar after-load-theme-hook nil \"Hook run after a color theme is loaded using `load-theme'.\") (defadvice load-theme (after run-after-load-theme-hook activate) \"Run `after-load-theme-hook'.\" (run-hooks 'after-load-theme-hook)) (add-hook 'after-load-theme-hook 'awesome-tray-enable t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-tray-and-and-mu4e-unread"},{"categories":null,"content":"Awesome Tray(setq awesome-tray-active-modules '(\"input-method\" \"date\")) (awesome-tray-mode 1) awesome try \u0026\u0026 meow stateCopy from https://emacs-china.org/t/awesome-tray-emacs-mode-line/7250/148 (defun awesome-tray-module-meow-info () (string-trim (meow-indicator))) (add-to-list 'awesome-tray-module-alist '(\"meow\" . (awesome-tray-module-meow-info awesome-tray-module-evil-face))) (add-to-list 'awesome-tray-active-modules \"meow\") awesome tray \u0026\u0026 mu4e unread(with-eval-after-load 'mu4e-alert ;; Copied from mu4e-alert (defun mu4e-alert-enable-tray-display () \"Enable display of unread emails in mode-line.\" (interactive) (add-hook 'mu4e-index-updated-hook #'mu4e-alert-update-mail-count-modeline) (add-hook 'mu4e-message-changed-hook #'mu4e-alert-update-mail-count-modeline) (advice-add #'mu4e-context-switch :around #'mu4e-alert--context-switch) (mu4e-alert-update-mail-count-modeline)) (mu4e-alert-enable-tray-display) (defun awesome-tray-module-mail-info () (concat \"EMAIL:\" (substring mu4e-alert-mode-line 7 9))) (add-to-list 'awesome-tray-module-alist '(\"mail\" . (awesome-tray-module-mail-info awesome-tray-module-belong-face))) (add-to-list 'awesome-tray-active-modules \"mail\")) Update awesome tray statusEnable awesome tray when theme changed。 (defvar after-load-theme-hook nil \"Hook run after a color theme is loaded using `load-theme'.\") (defadvice load-theme (after run-after-load-theme-hook activate) \"Run `after-load-theme-hook'.\" (run-hooks 'after-load-theme-hook)) (add-hook 'after-load-theme-hook 'awesome-tray-enable t) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#update-awesome-tray-status"},{"categories":null,"content":"Editor Enhancement – C.R.U.D编辑器的功能是为了更好的增删改查。 ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#editor-enhancement-c-dot-r-dot-u-dot-d"},{"categories":null,"content":"rime(setq rime-librime-root \"~/.emacs.d/librime/dist\" rime-emacs-module-header-root \"/opt/homebrew/opt/emacs-plus@28/include\" rime-user-data-dir \"~/Library/Rime/\" default-input-method \"rime\" rime-show-candidate nil) (setq rime-disable-predicates '(meow-normal-mode-p meow-motion-mode-p meow-keypad-mode-p rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (add-hook 'org-mode-hook (lambda () (set-input-method \"rime\"))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime"},{"categories":null,"content":"rime-regexp使用拼音进行中文的检索。 (rime-regexp-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime-regexp"},{"categories":null,"content":"autoinsert(define-auto-insert (cons \"init-.*\\\\.el\" \"Emacs Lisp Skeleton\") '(\"Emacs Configuration Description: \" \";;;; \" (file-name-nondirectory (buffer-file-name)) \" --- \" str (make-string (max 2 (- 80 (current-column) 27)) ?\\s) \"-*- lexical-binding: t; -*-\" '(setq lexical-binding t) \" ;; Copyright (C) \" (format-time-string \"%Y\") \" ;;; Commentary: ;; \" _ \" ;;; Code: (provide '\" (file-name-base (buffer-file-name)) \") ;;; \" (file-name-nondirectory (buffer-file-name)) \" ends here\\n\")) (auto-insert-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#autoinsert"},{"categories":null,"content":"embrace这个包很方便的对文本进行括号的增删改。 (require 'embrace) (set-face-attribute 'embrace-help-pair-face nil :inherit font-lock-function-name-face :inverse-video nil) (global-set-key (kbd \"C-,\") 'embrace-commander) (defun embrace-org-mode-hook () (dolist (lst '((?= \" =\" . \"= \") (?~ \" ~\" . \"~ \") (?/ \" /\" . \"/ \") (?* \" *\" . \"* \") (?_ \" _\" . \"_ \") (?+ \" +\" . \"+ \") (?k \"@@html:\u003ckbd\u003e@@\" . \"@@html:\u003c/kbd\u003e@@\"))) (embrace-add-pair (car lst) (cadr lst) (cddr lst)))) (add-hook 'org-mode-hook 'embrace-org-mode-hook) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embrace"},{"categories":null,"content":"recent file(add-hook 'after-init-hook #'recentf-mode) (add-hook 'kill-emacs-hook #'recentf-cleanup) (setq recentf-save-file \"/Users/duanning/.cache/emacs/recentf\" recentf-max-saved-items 1000 recentf-exclude '(\"[0-9]*-.*.org\" \"slipbox\" \"todos\" \"recentf\" \"M.Calibre\" \".elfeed\")) (setq recentf-auto-cleanup (if (daemonp) 300)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#recent-file"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-mode"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#files"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-x"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#diredfl"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#peep-dired"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-hide-dotfiles"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" dn-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" dn-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl(diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-git-info"},{"categories":null,"content":"hungry delete(require 'hungry-delete) (setq hungry-delete-chars-to-skip \" \\f\u000b\") (add-hook 'after-init-hook 'global-hungry-delete-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:7","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#hungry-delete"},{"categories":null,"content":"auto save(require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" dn-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:8","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-save"},{"categories":null,"content":"save place(setq save-place-file (expand-file-name \"saveplace\" dn-cache-directory)) (save-place-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:9","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-place"},{"categories":null,"content":"save hist(setq savehist-file (expand-file-name \"savehist\" dn-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) (savehist-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:10","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-hist"},{"categories":null,"content":"Undo(global-undo-fu-session-mode) (setq undo-fu-session-directory (expand-file-name \"undo-fu-session\" dn-cache-directory)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:11","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#undo"},{"categories":null,"content":"Vundo(require 'vundo) (setq vundo-glyph-alist vundo-unicode-symbols) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:12","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vundo"},{"categories":null,"content":"ctrlf;; (require 'ctrlf) (ctrlf-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:13","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ctrlf"},{"categories":null,"content":"google-this(google-this-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:14","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#google-this"},{"categories":null,"content":"vertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) (vertico-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:15","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vertico"},{"categories":null,"content":"marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) (marginalia-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:16","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#marginalia"},{"categories":null,"content":"consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:17","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult"},{"categories":null,"content":"consult-dir(require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:18","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult-dir"},{"categories":null,"content":"orderless(require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:19","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#orderless"},{"categories":null,"content":"corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"C-n\") 'corfu-next) (define-key corfu-map (kbd \"C-p\") 'corfu-previous) (define-key corfu-map (kbd \"\u003cescape\u003e\") 'corfu-quit)) (corfu-global-mode) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:20","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#corfu"},{"categories":null,"content":"corfu-doc(require 'corfu-doc) (add-hook 'corfu-mode-hook 'corfu-doc-mode) (setq corfu-doc-delay 0.5 corfu-doc-max-width 70 corfu-doc-max-height 20) (define-key corfu-map (kbd \"M-p\") 'corfu-doc-scroll-down) (define-key corfu-map (kbd \"M-n\") 'corfu-doc-scroll-up) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:21","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#corfu-doc"},{"categories":null,"content":"embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:22","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embark"},{"categories":null,"content":"prescient(require 'prescient) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:23","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#prescient"},{"categories":null,"content":"dabbrev(global-set-key (kbd \"M-/\") 'dabbrev-completion) (global-set-key (kbd \"C-M-/\") 'dabbrev-expand) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:24","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dabbrev"},{"categories":null,"content":"cape(require 'cape) (global-set-key (kbd \"C-c p p\") 'completion-at-point) (global-set-key (kbd \"C-c p t\") 'complete-tag) (global-set-key (kbd \"C-c p d\") 'cape-dabbrev) (global-set-key (kbd \"C-c p f\") 'cape-file) (global-set-key (kbd \"C-c p k\") 'cape-keyword) (global-set-key (kbd \"C-c p s\") 'cape-symbol) (global-set-key (kbd \"C-c p a\") 'cape-abbrev) (global-set-key (kbd \"C-c p i\") 'cape-ispell) (global-set-key (kbd \"C-c p l\") 'cape-line) (global-set-key (kbd \"C-c p w\") 'cape-dict) (global-set-key (kbd \"C-c p \\\\\") 'cape-tex) (global-set-key (kbd \"C-c p \u0026\") 'cape-sgml) (global-set-key (kbd \"C-c p r\") 'cape-rfc1345) (add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-tex) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-keyword) ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ;; (add-to-list 'completion-at-point-functions #'cape-dict) ;;(add-to-list 'completion-at-point-functions #'cape-symbol) ;;(add-to-list 'completion-at-point-functions #'cape-line) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:25","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cape"},{"categories":null,"content":"tempel(require 'tempel) (setq tempel-path \"~/.emacs.d/template/tempel\") (defun tempel-setup-capf () ;; Add the Tempel Capf to `completion-at-point-functions'. `tempel-expand' ;; only triggers on exact matches. Alternatively use `tempel-complete' if ;; you want to see all matches, but then Tempel will probably trigger too ;; often when you don't expect it. ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf, ;; such that it will be tried first. (setq-local completion-at-point-functions (cons #'tempel-expand completion-at-point-functions))) (add-hook 'text-mode-hook 'tempel-setup-capf) (global-set-key (kbd \"M-+\") 'tempel-complete) (global-set-key (kbd \"M-*\") 'tempel-insert) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:26","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tempel"},{"categories":null,"content":"Open in external apps有些时候需要使用外部应用打开相应的文件，比如打印文件的时候。目前还没有发现直接使用 Emacs 打印文件的方法。 这里只使用 safari 打开相应的文件，如需要使用其他的应用，可以参照博客。 (defun xah-html-open-in-safari () \"Open the current file or `dired'marked files in Mac's Safari browser. If the file is not saved, save it first. URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'Version 2018-02-26\" (interactive) (let* ( ($file-list (if (string-equal major-mode \"dired-mode\") (dired-get-marked-files) (list (buffer-file-name)))) ($do-it-p (if (\u003c= (length $file-list) 5) t (y-or-n-p \"Open more than 5 files? \")))) (when $do-it-p (cond ((string-equal system-type \"darwin\") (mapc (lambda ($fpath) (when (buffer-modified-p ) (save-buffer)) (shell-command (format \"open -a Safari.app \\\"%s\\\"\" $fpath))) $file-list)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:5:27","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#open-in-external-apps"},{"categories":null,"content":"Language configuration","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-configuration"},{"categories":null,"content":"LSP: Language service protocoleldoc(eldoc-mode) eglot(add-hook 'python-mode-hook 'eglot-ensure) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#lsp-language-service-protocol"},{"categories":null,"content":"LSP: Language service protocoleldoc(eldoc-mode) eglot(add-hook 'python-mode-hook 'eglot-ensure) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eldoc"},{"categories":null,"content":"LSP: Language service protocoleldoc(eldoc-mode) eglot(add-hook 'python-mode-hook 'eglot-ensure) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eglot"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-spell-check-and-translate"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ispell"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell-correct"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fanyi"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#powerthesaurus"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#smog"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#osx-dictionary"},{"categories":null,"content":"Language spell check and translateispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) fanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (require 'fanyi) (custom-set-variables '(fanyi-providers '( ;; fanyi-haici-provider fanyi-youdao-thesaurus-provider ;; fanyi-etymon-provider ;; fanyi-longman-provider ;; fanyi-libre-provider ))) Powerthesaurus(require 'powerthesaurus) Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (require 'smog) (setq smog-command \"style -L en\") osx-dictionary(require 'osx-dictionary) (setq osx-dictionary-use-chinese-text-segmentation t) go-translate此包可对整句进行翻译。 (require 'go-translate) (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#go-translate"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#program-language"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#markdown"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#beancount"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#csv"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#yaml"},{"categories":null,"content":"Program languageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) Beancount(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#python"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#organize-life-with-org-mode"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#better-default"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#packages-enhance-org"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#note-taking"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex-manage"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tasks-manage"},{"categories":null,"content":"Organize life with org-mode使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 Better Default(setq org-modules '() org-deadline-warning-days 7 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t org-treat-S-cursor-todo-selection-as-state-change nil) Word wrap 我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1) ;; (setq word-wrap-by-category t) todo keywords and faces If you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers (setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority (setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color (defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages 根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execute","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-export"},{"categories":null,"content":"LatexDefaults(setq org-highlight-latex-and-related '(latex script)) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (require 'ox-latex) (setq org-latex-listings 'minted) (setq org-export-latex-listings 'minted) ;; (add-to-list 'org-latex-packages-alist '(\"\" \"minted\")) ;; (setq org-latex-compiler \"xelatex\") (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) org-latex-impatient可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。 (require 'org-latex-impatient) (add-hook 'org-mode-hook 'org-latex-impatient-mode) (setq org-latex-impatient-tex2svg-bin \"~/node_modules/mathjax-node-cli/bin/tex2svg\") (setq org-latex-impatient-scale 3.0) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#latex"},{"categories":null,"content":"LatexDefaults(setq org-highlight-latex-and-related '(latex script)) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (require 'ox-latex) (setq org-latex-listings 'minted) (setq org-export-latex-listings 'minted) ;; (add-to-list 'org-latex-packages-alist '(\"\" \"minted\")) ;; (setq org-latex-compiler \"xelatex\") (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) org-latex-impatient可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。 (require 'org-latex-impatient) (add-hook 'org-mode-hook 'org-latex-impatient-mode) (setq org-latex-impatient-tex2svg-bin \"~/node_modules/mathjax-node-cli/bin/tex2svg\") (setq org-latex-impatient-scale 3.0) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#defaults"},{"categories":null,"content":"LatexDefaults(setq org-highlight-latex-and-related '(latex script)) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (require 'ox-latex) (setq org-latex-listings 'minted) (setq org-export-latex-listings 'minted) ;; (add-to-list 'org-latex-packages-alist '(\"\" \"minted\")) ;; (setq org-latex-compiler \"xelatex\") (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) org-latex-impatient可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。 (require 'org-latex-impatient) (add-hook 'org-mode-hook 'org-latex-impatient-mode) (setq org-latex-impatient-tex2svg-bin \"~/node_modules/mathjax-node-cli/bin/tex2svg\") (setq org-latex-impatient-scale 3.0) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-latex"},{"categories":null,"content":"LatexDefaults(setq org-highlight-latex-and-related '(latex script)) ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (require 'ox-latex) (setq org-latex-listings 'minted) (setq org-export-latex-listings 'minted) ;; (add-to-list 'org-latex-packages-alist '(\"\" \"minted\")) ;; (setq org-latex-compiler \"xelatex\") (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) org-latex-impatient可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。 (require 'org-latex-impatient) (add-hook 'org-mode-hook 'org-latex-impatient-mode) (setq org-latex-impatient-tex2svg-bin \"~/node_modules/mathjax-node-cli/bin/tex2svg\") (setq org-latex-impatient-scale 3.0) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-latex-impatient"},{"categories":null,"content":"Application","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#application"},{"categories":null,"content":"Calendar(require 'cal-china-x) (setq calendar-mode-line-format nil) (setq calendar-mark-holidays-flag t cal-china-x-important-holidays cal-china-x-chinese-holidays cal-china-x-general-holidays '((holiday-lunar 1 15 \"元宵节\") (holiday-lunar 7 7 \"七夕节\") (holiday-fixed 3 8 \"妇女节\") (holiday-fixed 3 12 \"植树节\") (holiday-fixed 5 4 \"青年节\") (holiday-fixed 6 1 \"儿童节\") (holiday-fixed 9 10 \"教师节\")) holiday-other-holidays '((holiday-fixed 2 14 \"情人节\") (holiday-fixed 4 1 \"愚人节\") (holiday-fixed 12 25 \"圣诞节\") (holiday-float 5 0 2 \"母亲节\") (holiday-float 6 0 3 \"父亲节\") (holiday-float 11 4 4 \"感恩节\")) calendar-holidays (append cal-china-x-important-holidays cal-china-x-general-holidays holiday-other-holidays)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#calendar"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\u003cRET\u003e\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003creturn\u003e\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003cS-return\u003e\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \u003e\" item) (princ (concat (replace-regexp-in-string \" \u003e\" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-reader"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-tools"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-print"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-key-settings"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-place"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (pdf-tools-install t nil t nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations t pdf-misc-print-program-executable \"/usr/bin/lp\") (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) save placesaveplace-pdf-view 可以保存 pdf 视图的位置。 (save-place-mode 1) (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-annotations"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" dn-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-stashes 'append)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" dn-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-stashes 'append)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#magit"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" dn-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-stashes 'append)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git-timemachine"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" dn-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-stashes 'append)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#browse-at-remote"},{"categories":null,"content":"Terminaleshell(global-set-key (kbd \"C-`\") 'eshell) (setq eshell-directory-name (expand-file-name \"eshell\" dn-cache-directory)) eshell-info-banner(add-hook 'eshell-banner-load-hook 'eshell-info-banner-update-banner) shell path(exec-path-from-shell-initialize) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#terminal"},{"categories":null,"content":"Terminaleshell(global-set-key (kbd \"C-`\") 'eshell) (setq eshell-directory-name (expand-file-name \"eshell\" dn-cache-directory)) eshell-info-banner(add-hook 'eshell-banner-load-hook 'eshell-info-banner-update-banner) shell path(exec-path-from-shell-initialize) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eshell"},{"categories":null,"content":"Terminaleshell(global-set-key (kbd \"C-`\") 'eshell) (setq eshell-directory-name (expand-file-name \"eshell\" dn-cache-directory)) eshell-info-banner(add-hook 'eshell-banner-load-hook 'eshell-info-banner-update-banner) shell path(exec-path-from-shell-initialize) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eshell-info-banner"},{"categories":null,"content":"Terminaleshell(global-set-key (kbd \"C-`\") 'eshell) (setq eshell-directory-name (expand-file-name \"eshell\" dn-cache-directory)) eshell-info-banner(add-hook 'eshell-banner-load-hook 'eshell-info-banner-update-banner) shell path(exec-path-from-shell-initialize) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#shell-path"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" dn-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" dn-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary(require 'elfeed-summary) (setq elfeed-summary-other-window t) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rss-management"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" dn-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" dn-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary(require 'elfeed-summary) (setq elfeed-summary-other-window t) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" dn-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" dn-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary(require 'elfeed-summary) (setq elfeed-summary-other-window t) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-org"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" dn-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" dn-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary(require 'elfeed-summary) (setq elfeed-summary-other-window t) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-score"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" dn-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" dn-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary(require 'elfeed-summary) (setq elfeed-summary-other-window t) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-summary"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#email"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-alert"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#sent-mail"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-column-faces"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t) ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe159 . #xe159) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe7f5 . #xe7f5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe5ca . #xe5ca) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe63f . #xe63f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe0e1 . #xe0e1) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe151 . #xe151) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe2bc . #xe2bc) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe3b5 . #xe3b5) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe153 . #xe153) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe15f . #xe15f) (font-spec :family \"Material Icons\")) (set-fontset-font t '(#xe92b . #xe92b) (font-spec :family \"Material Icons\")) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval 600 mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-headers-include-related t mu4e-headers-auto-update t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-headers-date-format \"%d/%m/%y\" mu4e-headers-time-format \"%H:%M\" mu4e-headers-fields '((:flags . 6) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20)) mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\") mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-msg"},{"categories":null,"content":"Telegaram非官方的 telegram 客户端。 (setq telega-server-libs-prefix \"~/td/tdlib\") (setq telega-proxies (list '(:server \"127.0.0.1\" :port 7891 :enable t :type (:@type \"proxyTypeSocks5\")))) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:7","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#telegaram"},{"categories":null,"content":"Calibrehttps://calibredb.hkvim.com (setq calibredb-root-dir \"~/Calibre Library\" calibredb-db-dir (expand-file-name \"metadata.db\" calibredb-root-dir)) (setq calibredb-format-all-the-icons t calibredb-title-width 80 calibredb-size-show t) (setq calibredb-fetch-metadata-source-list '(\"Google\" \"Amazon.com\")) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:8","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#calibre"},{"categories":null,"content":"Music2022-04-14 目前使用不己， API NULL。需要包作者进行更新。 (global-set-key (kbd \"\u003cf7\u003e\") 'netease-cloud-music) (setq request-storage-directory (expand-file-name \"request\" dn-cache-directory)) (setq netease-cloud-music-cache-directory (expand-file-name \"netease-cloud-music\" dn-cache-directory)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:7:9","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#music"},{"categories":null,"content":"Keybindings","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:0","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#keybindings"},{"categories":null,"content":"Keyfreq(keyfreq-mode 1) (keyfreq-autosave-mode 1) (setq keyfreq-file (expand-file-name \".emacs.keyfreq\" dn-cache-directory)) (setq keyfreq-excluded-commands '(self-insert-command forward-char backward-char previous-line next-line)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#keyfreq"},{"categories":null,"content":"Meow Meow is yet another modal editing mode for Emacs. (defun meow-setup () (meow-motion-overwrite-define-key '(\"j\" . meow-next) '(\"k\" . meow-prev)) (meow-leader-define-key ;; SPC j/k will run the original command in MOTION state. '(\"j\" . \"H-j\") '(\"k\" . \"H-k\") ;; Use SPC (0-9) for digit arguments. '(\"1\" . meow-digit-argument) '(\"2\" . meow-digit-argument) '(\"3\" . meow-digit-argument) '(\"4\" . meow-digit-argument) '(\"5\" . meow-digit-argument) '(\"6\" . meow-digit-argument) '(\"7\" . meow-digit-argument) '(\"8\" . meow-digit-argument) '(\"9\" . meow-digit-argument) '(\"0\" . meow-digit-argument) '(\"/\" . meow-keypad-describe-key) '(\"?\" . meow-cheatsheet)) (meow-normal-define-key '(\"0\" . meow-expand-0) '(\"9\" . meow-expand-9) '(\"8\" . meow-expand-8) '(\"7\" . meow-expand-7) '(\"6\" . meow-expand-6) '(\"5\" . meow-expand-5) '(\"4\" . meow-expand-4) '(\"3\" . meow-expand-3) '(\"2\" . meow-expand-2) '(\"1\" . meow-expand-1) '(\"-\" . negative-argument) '(\";\" . meow-reverse) '(\",\" . meow-inner-of-thing) '(\".\" . meow-bounds-of-thing) '(\"[\" . meow-beginning-of-thing) '(\"]\" . meow-end-of-thing) '(\"a\" . meow-append) '(\"A\" . meow-open-below) '(\"b\" . meow-back-word) '(\"B\" . meow-back-symbol) '(\"c\" . meow-change) '(\"d\" . meow-delete) '(\"D\" . meow-backward-delete) '(\"e\" . meow-next-word) '(\"E\" . meow-next-symbol) '(\"f\" . meow-find) '(\"g\" . meow-cancel-selection) '(\"G\" . meow-grab) '(\"h\" . meow-left) '(\"H\" . meow-left-expand) '(\"i\" . meow-insert) '(\"I\" . meow-open-above) '(\"j\" . meow-next) '(\"J\" . meow-next-expand) '(\"k\" . meow-prev) '(\"K\" . meow-prev-expand) '(\"l\" . meow-right) '(\"L\" . meow-right-expand) '(\"m\" . meow-join) '(\"n\" . meow-search) '(\"o\" . meow-block) '(\"O\" . meow-to-block) '(\"p\" . meow-yank) '(\"q\" . meow-quit) '(\"Q\" . meow-goto-line) '(\"r\" . meow-replace) '(\"R\" . meow-swap-grab) '(\"s\" . meow-kill) '(\"t\" . meow-till) '(\"u\" . undo) '(\"U\" . undo-redo) ;; '(\"u\" . meow-undo) ;; '(\"U\" . meow-undo-in-selection) '(\"v\" . meow-visit) '(\"w\" . meow-mark-word) '(\"W\" . meow-mark-symbol) '(\"x\" . meow-line) '(\"X\" . meow-goto-line) '(\"y\" . meow-save) '(\"Y\" . meow-sync-grab) '(\"z\" . meow-pop-selection) '(\"'\" . repeat) '(\"\u003cescape\u003e\" . mode-line-other-buffer))) (add-hook 'after-init-hook 'meow-setup) (meow-global-mode) (setq meow-use-clipboard t) (add-to-list 'meow-mode-state-list '(netease-cloud-music-mode . motion)) (add-to-list 'meow-mode-state-list '(osx-dictionary-mode . motion)) (add-to-list 'meow-mode-state-list '(stock-tracker-mode . motion)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#meow"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-bibtex"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-blog"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-org-download"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-language"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-file"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-directory"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-open-specific-file"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-org"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-org-transclusion"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-org-roam"},{"categories":null,"content":"One Key(require 'one-key) (setq one-key-popup-window nil) one key for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) one key for blog(one-key-create-menu \"BLOG\" '(((\"h\" . \"Easy hugo\") . easy-hugo) ((\"n\" . \"New post\") . easy-hugo-newpost) ((\"g\" . \"Magit\") . easy-hugo-magit) ((\"p\" . \"note\") . easy-hugo-preview) ((\"t\" . \"Tags\") . easy-hugo-complete-tags)) t) one key for org download(one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one key for language(one-key-create-menu \"LANGUAGE\" '(((\"t\" . \"Translate\") . gts-do-translate) ((\"f\" . \"Fanyi Point\") . fanyi-dwim2) ((\"F\" . \"Fanyi Input\") . fanyi-dwim) ((\"d\" . \"Dictionary Point\") . osx-dictionary-search-pointer) ((\"D\" . \"Dictionary Input\") . osx-dictionary-search-input) ((\"p\" . \"Powerthesaurus\") . powerthesaurus-lookup-dwim) ((\"s\" . \"Style region\") . smog-check) ((\"S\" . \"Style buffer\") . smog-check-buffer)) t) one key for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) one key for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) one key for open specific file(one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" dn-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" dn-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" dn-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" dn-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" dn-finance))))) t) one key for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Clock\") . one-key-menu-org-clock) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . org-gtd-process-inbox) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"ID\") . org-id-get-create)) t) org-clock (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one key for org transclusion(one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one key for org roam(one-key-create-menu \"ROAM\" '(((\"a\" . \"Alias\") . one-key-menu-roam-alias) ((\"b\" . \"Roam Buffer\") . org-roam-buffer-toggle) ((\"c\" . \"Roam capture\") . org-roam-capture) ((\"d\" . \"Dailies\") . one-key-menu-roam-dailies) ((\"f\" . \"Node find\") . org-roam-node-find) ((\"i\" . \"Node insert\") . org-roam-node-insert) ((\"s\" . \"Search content\") . bms/org-roam-rg-search) ((\"t\" . \"Tags\") . one-key-menu-roam-tags) ((\"r\" . \"Ref\") . one-key-menu-roam-ref)) t) (one-key-create-menu \"ROAM-ALIAS\" '(((\"a\" . \"Add\") . org-roam-alias-add) ((\"r\" . \"Remove\") . org-roam-alias-remove))","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-window-frame"},{"categories":null,"content":"Bind meow leader with one-key-menu不要绑定在 c m g 上，这几个键在 Meow 中被使用。 (meow-leader-define-key '(\"a\" . my/org-agenda) '(\"SPC\" . meow-M-x) '(\"b\" . one-key-menu-bibtex) '(\"B\" . one-key-menu-blog) '(\"d\" . one-key-menu-directory) '(\"f\" . one-key-menu-file) '(\"i\" . my/org-capture-inbox) '(\"l\" . one-key-menu-language) '(\"r\" . one-key-menu-roam) '(\"o\" . one-key-menu-org) '(\"s\" . eshell) '(\"t\" . one-key-menu-transclusion) '(\"w\" . one-key-menu-windows)) ","date":"2022-04-25","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":null,"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bind-meow-leader-with-one-key-menu"}]