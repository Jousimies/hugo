[{"categories":null,"content":"今天看到一篇好的介绍算法的文章。此文总结了六种算法思想。此处做些记录，留待以后慢慢补充。 递归算法 递归算法是一种直接或者间接调用自身函数或者方法的算法。 递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。 分治算法 分治，顾名思义就是将一个复杂的问题分成两个或多个相似的子问题，再把子问题分成更小的子问题，直到更小的子问题可以简单求解，原问题的解则为子问题解的合集。 贪心算法 贪心算法总是做出当前的最优选择，即期望通过局部的最优选择获得整体的最优选择。它做出的选择仅是某种意义上的局部最优，但是贪心算法在很多问题上还是可以获得最优解或较优解。 回溯算法 回溯算法是一种搜索法，试探法，它会在每一步做出选择，一旦发现这个选择无法得到期望结果，就回溯回去，重新做出选择。 深度优先搜索利用的就是回溯算法思想。 动态规划 动态规划也是将复杂问题分解成小问题求解的策略，与分治算法不同，动态规划各子问题是相互关联的。动态规划适用于子问题重叠的情况，即不同的子问题具有公共的子子问题。 枚举算法 将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适。 ","date":"2022-07-05","objectID":"/posts/%E7%AE%97%E6%B3%95/:0:0","series":null,"tags":null,"title":"算法","uri":"/posts/%E7%AE%97%E6%B3%95/#"},{"categories":null,"content":"Introduction","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#introduction"},{"categories":null,"content":"Interface Show 上面的图生成方式如下。 magick convert -size 2880x1800 xc:black -fill white -draw \"path 'M 0,100 C 1000,200 800,1600 2880,1700 V 1800 H 2880 V 0 H 0'\" mask.png magick composite dark.png light.png mask.png -alpha Off shot.png rm mask.png ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#interface-show"},{"categories":null,"content":"Why Emacs我是一个科技，数字爱好者，电子产品在我的生活中起着重要的作用。本人前前后后尝试过多种的软件来参与到自己的个人事务管理当中。在遇到 Emacs 之前，在各系统中最喜欢尝鲜，每当遇到一个新的应用，总是会主动去试用。每当试用一个新的软件时，总是认为它会很有用。但是这么长时间以来，高效的软件在多年的使用中留下来的很少。直到我遇到了 Emacs ，不愧是伪装成操作系统的软件。 现在是个电子的时代，试用的软件多了，对于软件的隐私性保护持保留的态度。虽然现在是网上无个人隐私可言，但是我还是不想把自己的信息随便给别人。Emacs 是一个本地的软件，所有的数据只在本地，数据永远在自己的手中。 对于一个非专业的程序员，使用 Emacs 这个文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME ，很好很强大。 Figure 1: What Emacs can do Emacs 具有强大的生态，可以进行文件管理，财务管理，事务管理，邮件管理，还可以用来听音乐，看视频。 从这个角度看， Emacs 和 Vim 是这个时代很强大的软件。所以为什么不用 Vim 呢？在 Emacs 中目前有比 Evil 更好用的模式编辑 Meow 。 其他人的使用见解， brotzeit 。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#why-emacs"},{"categories":null,"content":"How I manage my packages我尝试过的 Emacs 配置方式有多种。最开始时用的是将所有的配置文件放到 init.el 文件中，后来是学习了别人的配置方法，将配置分解到以 init- 为前缀的多个子文件中，现在我使用 org-mode （见文学编程）管理自己的 Emacs 配置。 使用 org-mode 管理自己的配置文件也经历了多个阶段。最开始是直接写在 org 文档中，加载 Emacs 的时候，自动检测该文件的状态，自动解析 org 文档到 el 文件中，这种方式导致 Emacs 启动较慢。后来使用命令在关闭 Emacs 时将 org 文档 tangle 到 el 文件中。现在我使用 org-auto-tangle 这个包，当配置文件发生变动时就自动的 tangle 配置文档。 原来我将 org 文档 tangle 到多个以 init- 为前缀的子文件中，这样的好处是，可以使用 git 对配置进行更精细化的版本管理。但是在尝试了用了几次后，发现，Emacs 的启动速度慢了很多。 使用 git 进行版本管理，我很少使用 reset 等功能，我的目的是看到自己更改的理由。因为经常在多种配置方法中来回横跳。 使用 :tangle 将配置的不同部分解析到不同的文件中。在这部分中指定文件夹的路径和文件名。 使用 :shebang 添加 lexical-binding 。关于 lexical-binding 的作用见 Make Emacs run (slightly) faster with lexical binding . 或者 Lisp 已死，Lisp 万岁！ 顶层的节点使用 C-c C-x p 添加 properties ，使用的是 header-args 这个。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#how-i-manage-my-packages"},{"categories":null,"content":"About note taking笔记的作用 ：存储信息、帮助思考和理解信息、创造知识之间的链接。大脑的优势在于思考，而不是信息的存储。当下最火的笔记管理方式非 Zettelkasten 默属。关于 Zettelkasten 的概念可以看 How to take smart notes 这本书。 我使用过的笔记软件有很多，在遇到 Emacs 前，尝试过的有 PKM 软件， Mediawiki ， Tiddly wiki ， Onenote ，印象笔记，蚂蚁笔记， Simplenote ， Joplin 等等。Onenote 是私有格式，意味着当我需要夸平台时，其专有格式会给我带来麻烦。印象笔记也是如此，而且印象笔记的付费一言难尽。在这些软件中来回尝试了多次之后，发现没有一个能长久使用的，或多或少的存在痛点。 在了解过 markdown ， org-mode 等概念后，结合以上软件的使用体验，我确立了对于笔记管理的要求：​本地储存，格式可控 。这个要求 markdown 和 org-mode 都可以满足，这两种语言之上都有着相对应的软件实现， obsidian 和 org-roam 。当然除了 org-roam 之外，还有其他的实现，但是我只使用 org-roam 。 Org-mode 相比 markdown ，特性还是要丰富很多， markdown 相对比较简陋。 org-mode 写完之后可以根据需要将其转化为其他的格式，我需要的如 html，docx，latex 。 Org-mode 是 Emacs 上最强大的笔记应用，如果不是为了进行笔记管理，我很大概率是不使用 Emacs 的（难调较，需要大量的时间，众多的特性中迷失自我）。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#about-note-taking"},{"categories":null,"content":"Acknowledgements If I have seen further, it is by standing on the shoulders of giants. —- Sir Isaac Newton 谢谢以下配置的作者，从他们那学到了很多关于 Emacs 的知识。排名不分先后。 https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:1:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#acknowledgements"},{"categories":null,"content":"The Early Init File;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.6) ;; In Emacs 27+, package initialization occurs before `user-init-file' is ;; loaded, but after `early-init-file'. Doom handles package initialization, so ;; we must prevent Emacs from doing it early! (setq package-enable-at-startup nil) ;; Do not allow loading from the package cache (same reason). (setq package-quickstart nil) ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (setq inhibit-startup-message t) (setq inhibit-splash-screen t) (push '(menu-bar-lines . 0) default-frame-alist) (push '(tool-bar-lines . 0) default-frame-alist) (push '(vertical-scroll-bars) default-frame-alist) ;; Resizing the Emacs frame can be a terribly expensive part of changing the ;; font. By inhibiting this, we easily halve startup times with fonts that are ;; larger than the system default. (setq frame-inhibit-implied-resize t) (setq inhibit-compacting-font-caches t) (setq use-file-dialog nil) (setq use-dialog-box nil) ;; Make the initial buffer load faster by setting its mode to fundamental-mode ;; (setq initial-major-mode 'fundamental-mode) ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are ;; compiled ahead-of-time when they are installed and site files are compiled ;; when gccemacs is installed. (setq comp-deferred-compilation nil) ;; Disable mode-line, It's uglily after theme changed (setq-default mode-line-format nil) ;;; early-init.el ends here ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:2:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#the-early-init-file"},{"categories":null,"content":"Emacs Foundation Configuration 其安易持，其未兆易谋；其脆易泮，其微易散。为之于未有，治之于未乱。合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。 – 老子 这部分是 Emacs 的最基础配置，包含了文件的管理方式，Emacs 的快速启动，自定义的变量，以及 custom 文件。这些配置是其他配置的基石。 ;; init.el --- My personal emacs configuration -*- lexical-binding: t; -*- (defvar my/init-start-time (current-time) \"Time when init.el was started\") (defvar my/section-start-time (current-time) \"Time when section was started\") ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-foundation-configuration"},{"categories":null,"content":"DEBUG当需要对 Emacs 的配置进行错误检测时打开，但是基本不需要在配置中写这部分。没启动的时候可以使用 --debug-init ，启动后可以手动开启 debug 。正常使用 Emacs 时也会触发一些错误，这时候弹出 error 窗口就很烦。 (toggle-debug-on-error) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#debug"},{"categories":null,"content":"Borg - Package manage The Borg assimilate Emacs packages as Git submodules. 我尝试的 Emacs 包管理方法有 package.el straight.el git submodule borg.el 。最终停留在了 borg 上，使用 borg 进行 Emacs 包的管理。关于此包的详细的使用方法见 borg 官方手册。 使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 0.7s 左右（ Arch Emacs 28.1 ）。 (add-to-list 'load-path (expand-file-name \"packages/borg\" user-emacs-directory)) (eval-and-compile (require 'borg) (borg-initialize)) How to install packages一般的流程是使用 epkg-describe-package 查看包的依赖，然后直接使用 borg-assimilate 命令安装包。或者先使用 borg-clone 命令克隆包到本地，然后使用 borg-build 对包进行编译安装。 但是我一般直接使用 borg assimilate 命令安装某个包，之后跟据 *Borg Build* buffer 的提示安装相应依赖包。重复上述的步骤，即可安装所有包。 如果一个包并不在 melpa 上，就需要到 github 上获取链接。 重新 build 一个前可以对 .gitmodules 进行编辑，下面给出示例： [submodule \"magit\"] path = packages/magit url = git@github.com:magit/magit.git no-byte-compile = lisp/magit-libgit.el recursive-byte-compile = true [submodule \"auctex\"] path = packages/auctex url = git@github.com:emacsmirror/auctex.git build-step = ./autogen.sh build-step = ./configure --with-texmf-dir=$HOME/texmf build-step = make build-step = sudo make install [submodule \"corfu\"] path = packages/corfu url = git@github.com:minad/corfu.git load-path = . load-path = ./extensions 简单说明：如果不想 compile 一个包就使用 no-byte-compile 选项。比如，我不使用 helm 插件，有些包提供了关于 helm 的支持，此时我就可以不 compile 对应的文件，那么 Emacs 就不会加载这些配置。 How to upgrade packagesBorg 升级包，可以在 magit 界面中进行，按 f m 获取 submodule 的更新，展开 Modules 可以看到 Modules unpulled ，进入相应的包中的 magit 界面，通过按 SPC k 删除 Untracked files ，然后按 m merge 配置。最后使用 borg-build 重新 build 包即可升级相应的包。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#borg-package-manage"},{"categories":null,"content":"Borg - Package manage The Borg assimilate Emacs packages as Git submodules. 我尝试的 Emacs 包管理方法有 package.el straight.el git submodule borg.el 。最终停留在了 borg 上，使用 borg 进行 Emacs 包的管理。关于此包的详细的使用方法见 borg 官方手册。 使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 0.7s 左右（ Arch Emacs 28.1 ）。 (add-to-list 'load-path (expand-file-name \"packages/borg\" user-emacs-directory)) (eval-and-compile (require 'borg) (borg-initialize)) How to install packages一般的流程是使用 epkg-describe-package 查看包的依赖，然后直接使用 borg-assimilate 命令安装包。或者先使用 borg-clone 命令克隆包到本地，然后使用 borg-build 对包进行编译安装。 但是我一般直接使用 borg assimilate 命令安装某个包，之后跟据 *Borg Build* buffer 的提示安装相应依赖包。重复上述的步骤，即可安装所有包。 如果一个包并不在 melpa 上，就需要到 github 上获取链接。 重新 build 一个前可以对 .gitmodules 进行编辑，下面给出示例： [submodule \"magit\"] path = packages/magit url = git@github.com:magit/magit.git no-byte-compile = lisp/magit-libgit.el recursive-byte-compile = true [submodule \"auctex\"] path = packages/auctex url = git@github.com:emacsmirror/auctex.git build-step = ./autogen.sh build-step = ./configure --with-texmf-dir=$HOME/texmf build-step = make build-step = sudo make install [submodule \"corfu\"] path = packages/corfu url = git@github.com:minad/corfu.git load-path = . load-path = ./extensions 简单说明：如果不想 compile 一个包就使用 no-byte-compile 选项。比如，我不使用 helm 插件，有些包提供了关于 helm 的支持，此时我就可以不 compile 对应的文件，那么 Emacs 就不会加载这些配置。 How to upgrade packagesBorg 升级包，可以在 magit 界面中进行，按 f m 获取 submodule 的更新，展开 Modules 可以看到 Modules unpulled ，进入相应的包中的 magit 界面，通过按 SPC k 删除 Untracked files ，然后按 m merge 配置。最后使用 borg-build 重新 build 包即可升级相应的包。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#how-to-install-packages"},{"categories":null,"content":"Borg - Package manage The Borg assimilate Emacs packages as Git submodules. 我尝试的 Emacs 包管理方法有 package.el straight.el git submodule borg.el 。最终停留在了 borg 上，使用 borg 进行 Emacs 包的管理。关于此包的详细的使用方法见 borg 官方手册。 使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 0.7s 左右（ Arch Emacs 28.1 ）。 (add-to-list 'load-path (expand-file-name \"packages/borg\" user-emacs-directory)) (eval-and-compile (require 'borg) (borg-initialize)) How to install packages一般的流程是使用 epkg-describe-package 查看包的依赖，然后直接使用 borg-assimilate 命令安装包。或者先使用 borg-clone 命令克隆包到本地，然后使用 borg-build 对包进行编译安装。 但是我一般直接使用 borg assimilate 命令安装某个包，之后跟据 *Borg Build* buffer 的提示安装相应依赖包。重复上述的步骤，即可安装所有包。 如果一个包并不在 melpa 上，就需要到 github 上获取链接。 重新 build 一个前可以对 .gitmodules 进行编辑，下面给出示例： [submodule \"magit\"] path = packages/magit url = git@github.com:magit/magit.git no-byte-compile = lisp/magit-libgit.el recursive-byte-compile = true [submodule \"auctex\"] path = packages/auctex url = git@github.com:emacsmirror/auctex.git build-step = ./autogen.sh build-step = ./configure --with-texmf-dir=$HOME/texmf build-step = make build-step = sudo make install [submodule \"corfu\"] path = packages/corfu url = git@github.com:minad/corfu.git load-path = . load-path = ./extensions 简单说明：如果不想 compile 一个包就使用 no-byte-compile 选项。比如，我不使用 helm 插件，有些包提供了关于 helm 的支持，此时我就可以不 compile 对应的文件，那么 Emacs 就不会加载这些配置。 How to upgrade packagesBorg 升级包，可以在 magit 界面中进行，按 f m 获取 submodule 的更新，展开 Modules 可以看到 Modules unpulled ，进入相应的包中的 magit 界面，通过按 SPC k 删除 Untracked files ，然后按 m merge 配置。最后使用 borg-build 重新 build 包即可升级相应的包。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#how-to-upgrade-packages"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) Fullscreen我总是全屏使用 Emacs，但是 Macos 上有些问题。以下的说明来自Andy Stewart 。 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame’ 创建时也集成原生全屏属性后造成白屏和左右滑动现象. 所以先设置 `ns-use-native-fullscreen’ 和 `ns-use-fullscreen-animation’ 禁止Emacs使用Mac原生的全屏模式. 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区, 这样执行 `make-frame’ 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug. Mac平台下,不能直接使用 `set-frame-parameter’ 和 `fullboth’ 来设置全屏, 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame’ 产生同样的Bug. 所以, 启动的时候通过 `set-frame-parameter’ 和 `maximized’ 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态, Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame’ 左右滑动闪烁的问题. (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 2 nil (lambda () (toggle-frame-fullscreen)))) (toggle-frame-fullscreen)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#startup"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) Fullscreen我总是全屏使用 Emacs，但是 Macos 上有些问题。以下的说明来自Andy Stewart 。 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame’ 创建时也集成原生全屏属性后造成白屏和左右滑动现象. 所以先设置 `ns-use-native-fullscreen’ 和 `ns-use-fullscreen-animation’ 禁止Emacs使用Mac原生的全屏模式. 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区, 这样执行 `make-frame’ 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug. Mac平台下,不能直接使用 `set-frame-parameter’ 和 `fullboth’ 来设置全屏, 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame’ 产生同样的Bug. 所以, 启动的时候通过 `set-frame-parameter’ 和 `maximized’ 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态, Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame’ 左右滑动闪烁的问题. (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 2 nil (lambda () (toggle-frame-fullscreen)))) (toggle-frame-fullscreen)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#start-speedup"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) Fullscreen我总是全屏使用 Emacs，但是 Macos 上有些问题。以下的说明来自Andy Stewart 。 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame’ 创建时也集成原生全屏属性后造成白屏和左右滑动现象. 所以先设置 `ns-use-native-fullscreen’ 和 `ns-use-fullscreen-animation’ 禁止Emacs使用Mac原生的全屏模式. 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区, 这样执行 `make-frame’ 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug. Mac平台下,不能直接使用 `set-frame-parameter’ 和 `fullboth’ 来设置全屏, 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame’ 产生同样的Bug. 所以, 启动的时候通过 `set-frame-parameter’ 和 `maximized’ 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态, Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame’ 左右滑动闪烁的问题. (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 2 nil (lambda () (toggle-frame-fullscreen)))) (toggle-frame-fullscreen)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#utility-hooks-and-functions"},{"categories":null,"content":"StartupStart Speedup该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。 (setq auto-mode-case-fold nil) (unless (or (daemonp) noninteractive) (let ((old-file-name-handler-alist file-name-handler-alist)) ;; If `file-name-handler-alist' is nil, no 256 colors in TUI ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839 (setq file-name-handler-alist (unless (display-graphic-p) '((\"\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\'\" . jka-compr-handler)))) (add-hook 'emacs-startup-hook (lambda () \"Recover file name handlers.\" (setq file-name-handler-alist (delete-dups (append file-name-handler-alist old-file-name-handler-alist))))))) (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 0.5) (add-hook 'emacs-startup-hook (lambda () \"Recover GC values after startup.\" (setq gc-cons-threshold 800000 gc-cons-percentage 0.1))) Utility hooks and functions This package exposes a number of utility hooks and functions ported from Doom Emacs. The hooks make it easier to speed up Emacs startup by providing finer-grained control of the timing at which packages are loaded. 按照这个包的说明，是用于更精细化的管理包的加载，以便加快 Emacs 的启动速度。 目前对于其的作用理解不是很深，如果需要深入理解需要对 Emacs 的启动步骤进行研究。 目前使用 after-init-hook 也行。此包提供的几个 hook 也能用， on-first-file-hook 用于当打开第一个文件的时候执行对应用的任务， on-first-input-hook 用于按键被触发后执行对应的任务， on-first-buffer-hook 用于第一个 buffer 被创建时执行对应的任务。 (require 'on) Fullscreen我总是全屏使用 Emacs，但是 Macos 上有些问题。以下的说明来自Andy Stewart 。 在Mac平台, Emacs不能进入Mac原生的全屏模式,否则会导致 `make-frame’ 创建时也集成原生全屏属性后造成白屏和左右滑动现象. 所以先设置 `ns-use-native-fullscreen’ 和 `ns-use-fullscreen-animation’ 禁止Emacs使用Mac原生的全屏模式. 而是采用传统的全屏模式, 传统的全屏模式, 只会在当前工作区全屏,而不是切换到Mac那种单独的全屏工作区, 这样执行 `make-frame’ 先关代码或插件时,就不会因为Mac单独工作区左右滑动产生的bug. Mac平台下,不能直接使用 `set-frame-parameter’ 和 `fullboth’ 来设置全屏, 那样也会导致Mac窗口管理器直接把Emacs窗口扔到单独的工作区, 从而对 `make-frame’ 产生同样的Bug. 所以, 启动的时候通过 `set-frame-parameter’ 和 `maximized’ 先设置Emacs为最大化窗口状态, 启动5秒以后再设置成全屏状态, Mac就不会移动Emacs窗口到单独的工作区, 最终解决Mac平台下原生全屏窗口导致 `make-frame’ 左右滑动闪烁的问题. (if (featurep 'cocoa) (progn (setq ns-use-native-fullscreen nil) (setq ns-use-fullscreen-animation nil) (set-frame-parameter (selected-frame) 'fullscreen 'maximized) (run-at-time 2 nil (lambda () (toggle-frame-fullscreen)))) (toggle-frame-fullscreen)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fullscreen"},{"categories":null,"content":"Variables自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。 (defvar my-cloud \"~/Nextcloud\" \"This folder is My cloud.\") (defvar my-galaxy (expand-file-name \"L.Personal.Galaxy\" my-cloud) \"This folder stores all the plain text files of my life.\") (defvar my-roam (expand-file-name \"roam\" my-galaxy) \"This is the org-roam folder.\") (defvar my-finance (expand-file-name \"finance\" my-galaxy) \"This folder stores all my finance files.\") (defvar my-finance-year (expand-file-name (format-time-string \"%Y\") my-finance) \"This folder stores all my finance files of current year.\") (defvar my-pdf-storage (expand-file-name \"storage/pdf\" my-galaxy) \"This folder stores all the pdf files.\") (defvar my-cache-directory \"~/.cache/emacs\" \"This folder stores all EMACS cache file.\") (defvar my-template-directory (expand-file-name \"template\" (file-truename user-emacs-directory))) (defvar default-search-engine-url '(\"Google\" \"www.google.com\")) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#variables"},{"categories":null,"content":"Custom fileEmacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。 (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory)) (load custom-file t) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#custom-file"},{"categories":null,"content":"Private file私有配置分开存放，不进行同步。 (setq private-file \"~/.emacs.d/private.el\") (load private-file t) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#private-file"},{"categories":null,"content":"BenchmarkEmacs Foundation Configuration 启动时间约 0.19s 。 (message \"Emacs Foundation Configuration: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:3:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs User interface, DELICIOUSEmacs 中视觉相关的配置基本都在这里了，目前我喜欢极简的界面。 (setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-user-interface-delicious"},{"categories":null,"content":"Fonts对于字体的选择有 Iosevka Fixed，Fantasque Sans Mono，Sarasa Mono SC，HarmonyOS Sans SC，Source Han Serif SC。 设置字体的两种方式：一种是通过 set-fongset-fong 设置中文字体，另外一种是设置 fixed-pitch 和 variable-pitch 字体，开启 variable-pitch-mode 。 另外结合 modus-themes ，通过设置 modus-themes-mixed-pitch 可以在 org-table org-block 等环境中使用固定宽度的字体。 尝试使用了几天后，发现开启 variable-pitch-mode 之后，光标的宽度变的很细，看起来很不舒服。 (set-face-attribute 'default nil :family \"Iosevka Fixed\" :weight 'regular :height 160) (set-face-attribute 'fixed-pitch nil :family \"Iosevka Fixed\" :weight 'regular :height 180) (set-face-attribute 'variable-pitch nil :family \"Source Han Serif SC\" :weight 'regular :height 160) ;; (set-fontset-font t 'unicode (font-spec :family \"all-the-icons\") nil 'prepend) (set-fontset-font t 'unicode \"Apple Color Emoji\" nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"Material Icons\") nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"file-icons\") nil 'prepend) ;; 言总是被替换成 file-icons 中的图标，强制其使用 Source Han Serif SC 这个字体 (set-fontset-font t '(#x8a00 . #x8a00) (font-spec :family \"Source Han Serif SC\")) ;; (set-fontset-font t 'unicode (font-spec :family \"github-octicons\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"FontAwesome\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"Weather Icons\") nil 'prepend) (setq modus-themes-mixed-fonts t) (add-hook 'text-mode-hook 'variable-pitch-mode) (set-face-attribute 'default nil :family \"Iosevka Fixed\" :weight 'regular :height 160) (set-fontset-font t 'han (font-spec :name \"Source Han Serif SC\" :weight 'regular :height 160)) (set-fontset-font t 'cjk-misc (font-spec :name \"Source Han Serif SC\" :weight 'regular :height 160)) ;; (set-fontset-font t 'unicode (font-spec :family \"all-the-icons\") nil 'prepend) (set-fontset-font t 'unicode \"Apple Color Emoji\" nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"Material Icons\") nil 'prepend) (set-fontset-font t 'unicode (font-spec :family \"file-icons\") nil 'prepend) ;; 言总是被替换成 file-icons 中的图标，强制其使用 Source Han Serif SC 这个字体 (set-fontset-font t '(#x8a00 . #x8a00) (font-spec :family \"Source Han Serif SC\")) ;; (set-fontset-font t 'unicode (font-spec :family \"github-octicons\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"FontAwesome\") nil 'prepend) ;; (set-fontset-font t 'unicode (font-spec :family \"Weather Icons\") nil 'prepend) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fonts"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion;; (all-the-icons-completion-mode) (add-hook 'vertico-mode-hook 'all-the-icons-completion-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#icon"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion;; (all-the-icons-completion-mode) (add-hook 'vertico-mode-hook 'all-the-icons-completion-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#all-the-icons"},{"categories":null,"content":"Iconall-the-icons可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。 (require 'all-the-icons) all-the-icons-completion;; (all-the-icons-completion-mode) (add-hook 'vertico-mode-hook 'all-the-icons-completion-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#all-the-icons-completion"},{"categories":null,"content":"Cursor因为我不使用 modeline 当有多个 buffer 的时候会不知道当前处于哪个 buffer 中，所以关闭其他窗口中的光标，这样哪个 buffer 中有光标，哪个 buffer 就处于活动状态。 (blink-cursor-mode -1) (setq-default cursor-in-non-selected-windows nil) cursor color我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。 (setq im-cursor-color \"orange\") (add-hook 'after-init-hook 'cursor-chg-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor"},{"categories":null,"content":"Cursor因为我不使用 modeline 当有多个 buffer 的时候会不知道当前处于哪个 buffer 中，所以关闭其他窗口中的光标，这样哪个 buffer 中有光标，哪个 buffer 就处于活动状态。 (blink-cursor-mode -1) (setq-default cursor-in-non-selected-windows nil) cursor color我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。 (setq im-cursor-color \"orange\") (add-hook 'after-init-hook 'cursor-chg-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor-color"},{"categories":null,"content":"Themesmodus-themes我的默认主题是 modus-themes ，有黑白配色两套。这个包的自定义性特别高，详细的设置见官方手册。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(intense) modus-themes-paren-match '(intense) modus-themes-prompts '(intense background gray bold) modus-themes-completions '((matches . (extrabold intense)) (selection . (underline)) (popup . (intense))) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction freeModus-theme 的主题色有些我还是不喜欢，根据自己的喜好更改了一些颜色设置。 其中 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#FFFFFF\") (bg-dim . \"#FFFFFF\") (bg-hl-line . \"#FFFFFF\") (bg-active . \"#FFFFFF\") (bg-inactive . \"#FFFFFF\") (bg-tab-bar . \"#FFFFFF\") (bg-tab-active . \"#FFFFFF\") (bg-tab-inactive . \"#FFFFFF\") (blue . \"#252321\") (magenta-nuanced-bg . \"#F2F0EF\"))) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#0F1116\") (bg-dim . \"#0F1116\") (bg-hl-line . \"#0F1116\") (bg-active . \"#0F1116\") (bg-inactive . \"#0F1116\") (bg-tab-bar . \"#0F1116\") (bg-tab-active . \"#0F1116\") (bg-tab-inactive . \"#0F1116\") (blue . \"#FFFFFF\") (magenta-nuanced-bg . \"#171B21\"))) Theme auto change For MacOS 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#themes"},{"categories":null,"content":"Themesmodus-themes我的默认主题是 modus-themes ，有黑白配色两套。这个包的自定义性特别高，详细的设置见官方手册。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(intense) modus-themes-paren-match '(intense) modus-themes-prompts '(intense background gray bold) modus-themes-completions '((matches . (extrabold intense)) (selection . (underline)) (popup . (intense))) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction freeModus-theme 的主题色有些我还是不喜欢，根据自己的喜好更改了一些颜色设置。 其中 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#FFFFFF\") (bg-dim . \"#FFFFFF\") (bg-hl-line . \"#FFFFFF\") (bg-active . \"#FFFFFF\") (bg-inactive . \"#FFFFFF\") (bg-tab-bar . \"#FFFFFF\") (bg-tab-active . \"#FFFFFF\") (bg-tab-inactive . \"#FFFFFF\") (blue . \"#252321\") (magenta-nuanced-bg . \"#F2F0EF\"))) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#0F1116\") (bg-dim . \"#0F1116\") (bg-hl-line . \"#0F1116\") (bg-active . \"#0F1116\") (bg-inactive . \"#0F1116\") (bg-tab-bar . \"#0F1116\") (bg-tab-active . \"#0F1116\") (bg-tab-inactive . \"#0F1116\") (blue . \"#FFFFFF\") (magenta-nuanced-bg . \"#171B21\"))) Theme auto change For MacOS 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#modus-themes"},{"categories":null,"content":"Themesmodus-themes我的默认主题是 modus-themes ，有黑白配色两套。这个包的自定义性特别高，详细的设置见官方手册。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(intense) modus-themes-paren-match '(intense) modus-themes-prompts '(intense background gray bold) modus-themes-completions '((matches . (extrabold intense)) (selection . (underline)) (popup . (intense))) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction freeModus-theme 的主题色有些我还是不喜欢，根据自己的喜好更改了一些颜色设置。 其中 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#FFFFFF\") (bg-dim . \"#FFFFFF\") (bg-hl-line . \"#FFFFFF\") (bg-active . \"#FFFFFF\") (bg-inactive . \"#FFFFFF\") (bg-tab-bar . \"#FFFFFF\") (bg-tab-active . \"#FFFFFF\") (bg-tab-inactive . \"#FFFFFF\") (blue . \"#252321\") (magenta-nuanced-bg . \"#F2F0EF\"))) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#0F1116\") (bg-dim . \"#0F1116\") (bg-hl-line . \"#0F1116\") (bg-active . \"#0F1116\") (bg-inactive . \"#0F1116\") (bg-tab-bar . \"#0F1116\") (bg-tab-active . \"#0F1116\") (bg-tab-inactive . \"#0F1116\") (blue . \"#FFFFFF\") (magenta-nuanced-bg . \"#171B21\"))) Theme auto change For MacOS 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#override-color-for-distraction-free"},{"categories":null,"content":"Themesmodus-themes我的默认主题是 modus-themes ，有黑白配色两套。这个包的自定义性特别高，详细的设置见官方手册。 (setq modus-themes-italic-constructs t modus-themes-bold-constructs nil modus-themes-region '(bg-only no-extend) modus-themes-lang-checkers '(background text-also straight-underline) modus-themes-links '(italic background faint neutral-underline) modus-themes-hl-line '(intense) modus-themes-paren-match '(intense) modus-themes-prompts '(intense background gray bold) modus-themes-completions '((matches . (extrabold intense)) (selection . (underline)) (popup . (intense))) modus-themes-org-blocks 'tinted-background modus-themes-org-agenda '((header-block . (variable-pitch 1.2)) (habit . traffic-light)) modus-themes-headings '((t . (rainbow)))) Override color for distraction freeModus-theme 的主题色有些我还是不喜欢，根据自己的喜好更改了一些颜色设置。 其中 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。 (setq modus-themes-operandi-color-overrides '((bg-main . \"#FFFFFF\") (bg-dim . \"#FFFFFF\") (bg-hl-line . \"#FFFFFF\") (bg-active . \"#FFFFFF\") (bg-inactive . \"#FFFFFF\") (bg-tab-bar . \"#FFFFFF\") (bg-tab-active . \"#FFFFFF\") (bg-tab-inactive . \"#FFFFFF\") (blue . \"#252321\") (magenta-nuanced-bg . \"#F2F0EF\"))) (setq modus-themes-vivendi-color-overrides '((bg-main . \"#0F1116\") (bg-dim . \"#0F1116\") (bg-hl-line . \"#0F1116\") (bg-active . \"#0F1116\") (bg-inactive . \"#0F1116\") (bg-tab-bar . \"#0F1116\") (bg-tab-active . \"#0F1116\") (bg-tab-inactive . \"#0F1116\") (blue . \"#FFFFFF\") (magenta-nuanced-bg . \"#171B21\"))) Theme auto change For MacOS 目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。 (defun my/apply-theme (appearance) \"Load theme, taking current system APPEARANCE into consideration.\" (mapc #'disable-theme custom-enabled-themes) (pcase appearance ('light (load-theme 'modus-operandi t)) ('dark (load-theme 'modus-vivendi t)))) (add-hook 'ns-system-appearance-change-functions #'my/apply-theme) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#theme-auto-change"},{"categories":null,"content":"Dashboard(setq dashboard-startup-banner \"~/.emacs.d/banner.txt\") (setq dashboard-center-content t) (setq dashboard-set-init-info nil) ;; dashboard-set-file-icons t ;; dashboard-modify-heading-icons '((recents . \"file-text\") ;; (bookmarks . \"book\")) (setq dashboard-items nil) ;; (setq dashboard-footer nil) (setq dashboard-set-footer nil) (dashboard-setup-startup-hook) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dashboard"},{"categories":null,"content":"define-fringe-bitmapWord wrap at window edge, hide the right and left curly arrow. So ugly. (define-fringe-bitmap 'right-curly-arrow []) (define-fringe-bitmap 'left-curly-arrow []) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#define-fringe-bitmap"},{"categories":null,"content":"rainbow-mode(add-hook 'prog-mode-hook 'rainbow-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rainbow-mode"},{"categories":null,"content":"helpful(setq help-window-select t) (global-set-key [remap describe-function] 'helpful-callable) (global-set-key [remap describe-variable] 'helpful-variable) (global-set-key [remap describe-key] 'helpful-key) (global-set-key (kbd \"C-h F\") 'helpful-function) (global-set-key (kbd \"C-h C\") 'helpful-command) (setq helpful-switch-buffer-function #'pop-to-buffer-same-window) (add-hook 'helpful-mode-hook 'visual-line-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#helpful"},{"categories":null,"content":"info-colors(add-hook 'Info-selection-hook 'info-colors-fontify-node) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#info-colors"},{"categories":null,"content":"goggles Goggles highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported. (setq-default goggles-pulse t) (add-hook 'prog-mode-hook 'goggles-mode) (add-hook 'text-mode-hook 'goggles-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#goggles"},{"categories":null,"content":"emojify用的很少，总是记不住它的按键，每次使用都要 M-x 。 (add-hook 'after-init-hook 'global-emojify-mode) (setq emojify-emojis-dir (expand-file-name \"emojis\" my-cache-directory)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emojify"},{"categories":null,"content":"centaur-tab(setq centaur-tabs-style \"bar\") (setq centaur-tabs-set-bar 'under) (setq x-underline-at-descent-line t) (setq centaur-tabs-set-close-button nil) (setq centaur-tabs-adjust-buffer-order t) (setq centaur-tabs-show-count t) ;; Enable this will bring background nil error (setq centaur-tabs-set-icons nil) (add-hook 'after-init-hook #'centaur-tabs-mode) (add-hook 'dired-mode-hook #'centaur-tabs-local-mode) (add-hook 'dashboard-mode-hook #'centaur-tabs-local-mode) (add-hook 'calendar-mode-hook #'centaur-tabs-local-mode) (add-hook 'org-agenda-mode-hook #'centaur-tabs-local-mode) (add-hook 'helpful-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-main-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-view-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-headers-mode-hook #'centaur-tabs-local-mode) (add-hook 'ebib-index-mode-hook #'centaur-tabs-local-mode) (add-hook 'ebib-entry-mode-hook #'centaur-tabs-local-mode) (add-hook 'org-roam-mode-hook #'centaur-tabs-local-mode) (with-eval-after-load 'centaur-tabs (centaur-tabs-enable-buffer-reordering)) (global-set-key (kbd \"s-p\") 'centaur-tabs-backward) (global-set-key (kbd \"s-n\") 'centaur-tabs-forward) centaur-tab groups(defun my/centaur-tabs-buffer-groups () \"`centaur-tabs-buffer-groups'control buffers' group rules. Group centaur-tabs with mode if buffer is derived from `eshell-mode'`emacs-lisp-mode'`dired-mode'`org-mode'`magit-mode'. All buffer name start with * will group to \\\"Emacs\\\". Other buffer group by `centaur-tabs-get-group-name'with project name.\" (list (cond ((or (string-equal \"*\" (substring (buffer-name) 0 1)) (memq major-mode '(magit-process-mode magit-status-mode magit-diff-mode magit-log-mode magit-file-mode magit-blob-mode magit-blame-mode ))) \"Emacs\") ((derived-mode-p 'prog-mode) \"Editing\") ((derived-mode-p 'dired-mode) \"Dired\") ((memq major-mode '(helpful-mode help-mode)) \"Help\") ((memq major-mode '(org-mode org-agenda-clockreport-mode org-src-mode org-agenda-mode org-beamer-mode org-indent-mode org-bullets-mode org-cdlatex-mode org-agenda-log-mode diary-mode)) \"OrgMode\") ((memq major-mode '(pdf-view-mode)) \"PDF\") (t (centaur-tabs-get-group-name (current-buffer)))))) (setq centaur-tabs-buffer-groups-function 'my/centaur-tabs-buffer-groups) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#centaur-tab"},{"categories":null,"content":"centaur-tab(setq centaur-tabs-style \"bar\") (setq centaur-tabs-set-bar 'under) (setq x-underline-at-descent-line t) (setq centaur-tabs-set-close-button nil) (setq centaur-tabs-adjust-buffer-order t) (setq centaur-tabs-show-count t) ;; Enable this will bring background nil error (setq centaur-tabs-set-icons nil) (add-hook 'after-init-hook #'centaur-tabs-mode) (add-hook 'dired-mode-hook #'centaur-tabs-local-mode) (add-hook 'dashboard-mode-hook #'centaur-tabs-local-mode) (add-hook 'calendar-mode-hook #'centaur-tabs-local-mode) (add-hook 'org-agenda-mode-hook #'centaur-tabs-local-mode) (add-hook 'helpful-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-main-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-view-mode-hook #'centaur-tabs-local-mode) (add-hook 'mu4e-headers-mode-hook #'centaur-tabs-local-mode) (add-hook 'ebib-index-mode-hook #'centaur-tabs-local-mode) (add-hook 'ebib-entry-mode-hook #'centaur-tabs-local-mode) (add-hook 'org-roam-mode-hook #'centaur-tabs-local-mode) (with-eval-after-load 'centaur-tabs (centaur-tabs-enable-buffer-reordering)) (global-set-key (kbd \"s-p\") 'centaur-tabs-backward) (global-set-key (kbd \"s-n\") 'centaur-tabs-forward) centaur-tab groups(defun my/centaur-tabs-buffer-groups () \"`centaur-tabs-buffer-groups'control buffers' group rules. Group centaur-tabs with mode if buffer is derived from `eshell-mode'`emacs-lisp-mode'`dired-mode'`org-mode'`magit-mode'. All buffer name start with * will group to \\\"Emacs\\\". Other buffer group by `centaur-tabs-get-group-name'with project name.\" (list (cond ((or (string-equal \"*\" (substring (buffer-name) 0 1)) (memq major-mode '(magit-process-mode magit-status-mode magit-diff-mode magit-log-mode magit-file-mode magit-blob-mode magit-blame-mode ))) \"Emacs\") ((derived-mode-p 'prog-mode) \"Editing\") ((derived-mode-p 'dired-mode) \"Dired\") ((memq major-mode '(helpful-mode help-mode)) \"Help\") ((memq major-mode '(org-mode org-agenda-clockreport-mode org-src-mode org-agenda-mode org-beamer-mode org-indent-mode org-bullets-mode org-cdlatex-mode org-agenda-log-mode diary-mode)) \"OrgMode\") ((memq major-mode '(pdf-view-mode)) \"PDF\") (t (centaur-tabs-get-group-name (current-buffer)))))) (setq centaur-tabs-buffer-groups-function 'my/centaur-tabs-buffer-groups) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#centaur-tab-groups"},{"categories":null,"content":"Awesome Tray不太喜欢使用 modeline ， doom-modeline 也挺好看的，但是那么高的一大条在底部，和 echo area 有点重复。 好在有 awesome-tray ，整合了 mode-line 和 echo area 。awesome-tray 中是将 modeline 的高度设置成 0.1 ，表现为一条横线。 awesome-tray 存在着一个问题，在某种情况下会恢复 modeline 的高度为 1，就很丑。不知道是什么原因导致的 modeline 行高恢复，所以我通常是将 mode-line-formate 设置成 nil 。这样也存在着一个问题，当上下分屏时，会分不清 buffer （但是我很少上下分屏，屏幕小啊）。 山重水复疑无路，得来全不费功夫。发现 Emacs 自带 window-divider-mode ，结合 awesome-tray 和 window-divider ，完美的达到了自己的目的，再也不会在某些 buffer 中出现 modeline 恢复行高的问题。而且可以自定义 window-divider 的颜色。效果见 Interface Show 。 (setq awesome-tray-input-method-zh-style \"ㄓ\") (setq awesome-tray-info-padding-right 2) (setq awesome-tray-active-modules '(\"org-pomodoro\" \"clock\" \"pdf-view-page\" \"input-method\" \"battery\" \"date\")) (add-hook 'after-init-hook 'awesome-tray-enable) (defvar after-load-theme-hook nil \"Hook run after a color theme is loaded using `load-theme'.\") (defadvice load-theme (after run-after-load-theme-hook activate) \"Run `after-load-theme-hook'.\" (run-hooks 'after-load-theme-hook)) (add-hook 'after-load-theme-hook 'awesome-tray-enable t) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-tray"},{"categories":null,"content":"window-divider使用 face-spec-sat 重置 window-divider 的颜色。同样的方式可以重置其他的使用 defface 定义的颜色。 (setq window-divider-default-bottom-width 1) (setq window-divider-default-right-width 1) (setq window-divider-default-places t) (face-spec-set 'window-divider '((((background light)) :foreground \"#000000\") (t :foreground \"#FFFFFF\")) 'face-override-spec) ;; (window-divider-mode 1) (add-hook 'after-init-hook 'window-divider-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#window-divider"},{"categories":null,"content":"Highlight line;; (global-hl-line-mode t) (add-hook 'on-first-buffer-hook 'global-hl-line-mode) (add-hook 'dashboard-mode-hook (lambda () (setq-local global-hl-line-mode nil))) (add-hook 'eshell-mode-hook (lambda () (setq-local global-hl-line-mode nil))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:15","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#highlight-line"},{"categories":null,"content":"stem-reading-mode还没搞懂这个包的作用是什么。作者是这么说的：“Highlight word stems in text buffers, thereby providing artificial fixation points to improve speed reading.” (with-eval-after-load 'stem-reading-mode (set-face-attribute 'stem-reading-highlight-face nil :weight 'unspecified) (set-face-attribute 'stem-reading-delight-face nil :weight 'light)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#stem-reading-mode"},{"categories":null,"content":"Emacs frame managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) window resize结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) display-buffer-alist one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5) (window-parameters (select . t)))) Info buffer (add-to-list 'display-buffer-alist '(\"*info*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . right) (inhibit-same-window . t) (reusable-frames . visible) (window-width . 0.5))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-frame-management"},{"categories":null,"content":"Emacs frame managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) window resize结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) display-buffer-alist one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5) (window-parameters (select . t)))) Info buffer (add-to-list 'display-buffer-alist '(\"*info*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . right) (inhibit-same-window . t) (reusable-frames . visible) (window-width . 0.5))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#quit-and-delete-window"},{"categories":null,"content":"Emacs frame managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) window resize结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) display-buffer-alist one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5) (window-parameters (select . t)))) Info buffer (add-to-list 'display-buffer-alist '(\"*info*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . right) (inhibit-same-window . t) (reusable-frames . visible) (window-width . 0.5))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#scroll-other-window"},{"categories":null,"content":"Emacs frame managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) window resize结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) display-buffer-alist one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5) (window-parameters (select . t)))) Info buffer (add-to-list 'display-buffer-alist '(\"*info*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . right) (inhibit-same-window . t) (reusable-frames . visible) (window-width . 0.5))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#window-resize"},{"categories":null,"content":"Emacs frame managementEmacs 中的窗口管理。有一些包如 popup ， shackle 等可以使用，但是我选择使用 display-buffer-alist 进行窗口的管理。Emacs 中的窗口总是感觉乱乱的。 Quit and delete window删除窗口，而不是只是隐藏它，见 Reddit 。 这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer。 (defun quit-window-delete (\u0026optional kill window) \"Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window'that Emacs had before the introduction of `quit-restore-window'. It ignores the information stored in WINDOW's `quit-restore'window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function'.\" (interactive \"P\") (set-window-parameter window 'quit-restore `(frame frame nil ,(current-buffer))) (quit-restore-window window (if kill 'kill 'bury))) (global-set-key [remap quit-window] 'quit-window-delete) (global-set-key [remap meow-quit] 'quit-window-delete) Scroll other window这个在并排使用两个 buffer 的时候很好用，通过 M-n 和 M-p 移动另一个 buffer 中的内容。 (defun my/scroll-other-windown-down () \"Scroll other window down.\" (interactive) (scroll-other-window-down 2)) (defun my/scroll-other-windown () \"Scroll other window up.\" (interactive) (scroll-other-window 2)) (global-set-key (kbd \"M-n\") 'my/scroll-other-windown) (global-set-key (kbd \"M-p\") 'my/scroll-other-windown-down) window resize结合 repeat-mode 可以很方便的控制窗口的大小。通过 C-x 触发。此设置来自 protesilaos 大神。 (defvar resize-window-repeat-map (let ((map (make-sparse-keymap))) (define-key map \"^\" 'enlarge-window) (define-key map \"}\" 'enlarge-window-horizontally) (define-key map \"{\" 'shrink-window-horizontally) (define-key map \"v\" 'shrink-window) map) \"Keymap to repeat window resizing commands. Used in `repeat-mode'.\") (put 'enlarge-window 'repeat-map 'resize-window-repeat-map) (put 'enlarge-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window-horizontally 'repeat-map 'resize-window-repeat-map) (put 'shrink-window 'repeat-map 'resize-window-repeat-map) display-buffer-alist one-key buffer (setq display-buffer-alist '((\"*One-Key*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t) (mode-line-format . none) (tab-line-format . none))))) eshell buffer (add-to-list 'display-buffer-alist '(\"*eshell*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (slot . 1) (window-parameters (mode-line-format . none) (tab-line-format . none)))) help buffer (add-to-list 'display-buffer-alist '(\"*Help*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5) (window-parameters (select . t)))) Info buffer (add-to-list 'display-buffer-alist '(\"*info*\" (display-buffer-reuse-window display-buffer-in-side-window) (side . right) (inhibit-same-window . t) (reusable-frames . visible) (window-width . 0.5))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#display-buffer-alist"},{"categories":null,"content":"BenchmarkEmacs User interface 启动时间约 0.05s 。 (message \"Emacs User interface: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:4:18","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Powerful Emacs Equipped with Builtin PackagesEmacs 本身就是一个宝库，有很多的内置功能 ，这些功能的实现简单而强大。名符其实的操作系统。 这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。 (setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#powerful-emacs-equipped-with-builtin-packages"},{"categories":null,"content":"y-or-n-p(if (boundp 'use-short-answers) (setq use-short-answers t) (advice-add 'yes-or-no-p :override #'y-or-n-p)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#y-or-n-p"},{"categories":null,"content":"bell(setq ring-bell-function 'ignore) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bell"},{"categories":null,"content":"kill-ringDo not saves duplicates in kill-ring (setq kill-do-not-save-duplicates t) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#kill-ring"},{"categories":null,"content":"system coding(prefer-coding-system 'utf-8) (set-default-coding-systems 'utf-8) (set-terminal-coding-system 'utf-8) (set-keyboard-coding-system 'utf-8) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#system-coding"},{"categories":null,"content":"paren(setq show-paren-style 'mixed show-paren-when-point-inside-paren t show-paren-when-point-in-periphery t) (show-paren-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#paren"},{"categories":null,"content":"elec-pair(electric-pair-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elec-pair"},{"categories":null,"content":"line number在 prog-mode 中显示行号，当在 org-mode 中，不显示行号。 (setq display-line-numbers t) (add-hook 'prog-mode-hook 'display-line-numbers-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#line-number"},{"categories":null,"content":"simple;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook 'after-init-hook (lambda () (line-number-mode) (column-number-mode) (size-indication-mode))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#simple"},{"categories":null,"content":"autorevert(setq auto-revert-verbose t) (global-auto-revert-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#autorevert"},{"categories":null,"content":"subwordEnabling it remaps word-based editing commands to subword-based commands that handle symbols with mixed uppercase and lowercase letters。 ;; (global-subword-mode) (add-hook 'on-first-input-hook 'global-subword-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#subword"},{"categories":null,"content":"winner;; (setq winner-dont-bind-my-keys nil) ;; (winner-mode) (add-hook 'on-first-buffer-hook 'winner-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#winner"},{"categories":null,"content":"serverAccording to this blog, use server-process instead of server-ruanning-p 。但是当我新开一个 emacs 时，会报错，所以还是回到原来的配置上。 (require 'server) (unless (server-running-p) (server-mode 1)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#server"},{"categories":null,"content":"prettify-symbols-mode这个 mode 可以替换一些 fancy 的字体，但是目前没找到好看的字体。 (setq prettify-symbols-alist '((\"lambda\" . ?λ) (\"function\" . ?𝑓))) (add-hook 'prog-mode-hook 'prettify-symbols-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#prettify-symbols-mode"},{"categories":null,"content":"so-longEmacs 的长行检测。在 Emacs 中当编辑长行时，会很卡，开启此模式可以提高性能。 (global-so-long-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#so-long"},{"categories":null,"content":"delsel插入文本会将所选文本删除，这在其他的很多软件中都有，Emacs 中默认没有，需要手动开启。 (add-hook 'on-first-input-hook 'delete-selection-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:15","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#delsel"},{"categories":null,"content":"webjump基本用不上，我使用 google-this 这个包。这个的好处是可以使用不同的搜索引擎。 (setq webjump-sites '((\"Emacs China\" . \"https://emacs-china.org\") (\"DuckDuckGo\" . [simple-query \"duckduckgo.com\" \"duckduckgo.com/?q=\" \"\"]) (\"Douban read\" . [simple-query \"https://search.douban.com\" \"https://search.douban.com/book/subject_search?search_text=\" \"\"]) (\"Google\" . [simple-query \"https://www.google.com\" \"https://www.google.com/search?q=\" \"\"]) (\"Baidu\" . [simple-query \"https://www.baidu.com\" \"https://www.baidu.com/s?ie=utf-8\u0026wd=\" \"\"]) (\"Wikipedia\" . [simple-query \"https://wikipedia.org\" \"https://wikipedia.org/wiki/\" \"\"]))) (global-set-key (kbd \"s-/\") 'webjump) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#webjump"},{"categories":null,"content":"url(setq url-configuration-directory (expand-file-name \"url\" my-cache-directory)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#url"},{"categories":null,"content":"bookmark(setq bookmark-default-file (expand-file-name \"storage/bookmarks\" my-galaxy)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:18","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bookmark"},{"categories":null,"content":"repeat重复某个按键，比如在调整窗口大小时。 (setq repeat-on-final-keystroke t) (setq set-mark-command-repeat-pop t) (add-hook 'on-first-input-hook 'repeat-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:19","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#repeat"},{"categories":null,"content":"minibuffer(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:20","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#minibuffer"},{"categories":null,"content":"ibuffer(setq ibuffer-saved-filter-groups (quote ((\"default\" (\"dired\" (mode . dired-mode)) (\"perl\" (mode . cperl-mode)) (\"erc\" (mode . erc-mode)) (\"planner\" (or (name . \"^\\\\*Calendar\\\\*$\") (name . \"^diary$\") (mode . muse-mode))) (\"emacs\" (or (name . \"^\\\\*scratch\\\\*$\") (name . \"^\\\\*Messages\\\\*$\"))))))) (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-switch-to-saved-filter-groups \"default\"))) (with-eval-after-load 'on-first-buffer-hook 'all-the-icons-ibuffer-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:21","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ibuffer"},{"categories":null,"content":"mouse-avoidanceBuiltin function. Hide mouse when type. (mouse-avoidance-mode 'banish) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:22","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mouse-avoidance"},{"categories":null,"content":"cursor-intangible(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:23","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cursor-intangible"},{"categories":null,"content":"large file(setq large-file-warning-threshold nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:24","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#large-file"},{"categories":null,"content":"BenchmarkPowerful Emacs Equipped with Builtin Packages 启动时间约 0.04s 。 (message \"Powerful Emacs Equipped with Builtin Packages: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:5:25","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Awesome Emacs Equipped with Third-party Packages编辑器的基本功能就是增删改查。 (setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#awesome-emacs-equipped-with-third-party-packages"},{"categories":null,"content":"gcmhEmacs 中拉圾回收的策略是当Emacs自上一次垃圾收集后分配的内存超过 gc-cons-threshold 阀值时就会触发新一轮的垃圾收集行为。 gcmh 包对 Emacs 的拉圾回收进行了设置，当正常使用时，拉圾回收的阈值设置的较高，当 Emacs 空闲时阈值设的较低。 优化Emacs的垃圾搜集行为 一文中提出了通过记录每次垃圾收集的时间来进行判断和调整 gc-cons-threshold 的值。 (gcmh-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#gcmh"},{"categories":null,"content":"restart-emacsNever exit Emacs ！！！ 防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。 (global-set-key (kbd \"C-x C-c\") 'restart-emacs) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#restart-emacs"},{"categories":null,"content":"input methodrime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-librime-root \"~/.emacs.d/librime/dist\") (setq rime-emacs-module-header-root \"/opt/homebrew/opt/emacs-plus@28/include\") (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 2)) (setq rime-disable-predicates '(meow-normal-mode-p meow-motion-mode-p meow-keypad-mode-p rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background \"#FFFFFF\") (t :foreground \"#FFFFFF\" :background \"#000000\")) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) (add-hook 'org-mode-hook (lambda () (set-input-method \"rime\"))) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#input-method"},{"categories":null,"content":"input methodrime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-librime-root \"~/.emacs.d/librime/dist\") (setq rime-emacs-module-header-root \"/opt/homebrew/opt/emacs-plus@28/include\") (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 2)) (setq rime-disable-predicates '(meow-normal-mode-p meow-motion-mode-p meow-keypad-mode-p rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background \"#FFFFFF\") (t :foreground \"#FFFFFF\" :background \"#000000\")) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) (add-hook 'org-mode-hook (lambda () (set-input-method \"rime\"))) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime"},{"categories":null,"content":"input methodrime我使用 emacs-rime 和三码郑码，不需要进行词库的维护。 (setq rime-librime-root \"~/.emacs.d/librime/dist\") (setq rime-emacs-module-header-root \"/opt/homebrew/opt/emacs-plus@28/include\") (setq rime-user-data-dir \"~/Library/Rime/\") (setq default-input-method \"rime\") (setq rime-show-candidate 'posframe) (setq rime-posframe-properties '(:internal-border-width 2)) (setq rime-disable-predicates '(meow-normal-mode-p meow-motion-mode-p meow-keypad-mode-p rime-predicate-prog-in-code-p rime-predicate-org-in-src-block-p rime-predicate-org-latex-mode-p rime-predicate-current-uppercase-letter-p)) (setq rime-inline-predicates '(rime-predicate-space-after-cc-p rime-predicate-after-alphabet-char-p)) (face-spec-set 'rime-default-face '((((background light)) :foreground \"#000000\" :background \"#FFFFFF\") (t :foreground \"#FFFFFF\" :background \"#000000\")) 'face-override-spec) (with-eval-after-load 'rime (define-key rime-mode-map (kbd \"M-j\") 'rime-force-enable)) (add-hook 'org-mode-hook (lambda () (set-input-method \"rime\"))) rime-regexp使用拼音进行中文的检索。原来使用的是拼音首字母进行检索，但是检出来的结果太多，所以还是使用全拼音进行检索。 (add-hook 'on-first-input-hook 'rime-regexp-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rime-regexp"},{"categories":null,"content":"autoinsert(define-auto-insert (cons \"init-.*\\\\.el\" \"Emacs Lisp Skeleton\") '(\"Emacs Configuration Description: \" \";;;; \" (file-name-nondirectory (buffer-file-name)) \" --- \" str (make-string (max 2 (- 80 (current-column) 27)) ?\\s) \"-*- lexical-binding: t; -*-\" '(setq lexical-binding t) \" ;; Copyright (C) \" (format-time-string \"%Y\") \" ;;; Commentary: ;; \" _ \" ;;; Code: (provide '\" (file-name-base (buffer-file-name)) \") ;;; \" (file-name-nondirectory (buffer-file-name)) \" ends here\\n\")) (add-hook 'on-first-input-hook 'auto-insert-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#autoinsert"},{"categories":null,"content":"embrace这个包很方便的对文本进行括号的增删改。 (with-eval-after-load 'embrace (set-face-attribute 'embrace-help-pair-face nil :inherit font-lock-function-name-face :inverse-video nil) (defun embrace-org-mode-hook () (dolist (lst '((?= \" =\" . \"= \") (?~ \" ~\" . \"~ \") (?/ \" /\" . \"/ \") (?* \" *\" . \"* \") (?_ \" _\" . \"_ \") (?+ \" +\" . \"+ \") (?k \"@@html:\u003ckbd\u003e@@\" . \"@@html:\u003c/kbd\u003e@@\"))) (embrace-add-pair (car lst) (cadr lst) (cddr lst))))) (setq embrace-show-help-p nil) (global-set-key (kbd \"C-,\") 'embrace-commander) (add-hook 'org-mode-hook 'embrace-org-mode-hook) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embrace"},{"categories":null,"content":"recent file(add-hook 'after-init-hook #'recentf-mode) (add-hook 'kill-emacs-hook #'recentf-cleanup) (setq recentf-save-file \"/Users/duanning/.cache/emacs/recentf\" recentf-max-saved-items 1000 recentf-exclude '(\"[0-9]*-.*.org\" \"slipbox\" \"todos\" \"recentf\" \"M.Calibre\" \".elfeed\")) (setq recentf-auto-cleanup (if (daemonp) 300)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#recent-file"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-mode"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#files"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-x"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#diredfl"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#peep-dired"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-hide-dotfiles"},{"categories":null,"content":"dired-modefiles(make-directory (expand-file-name \"backups/\" my-cache-directory) t) (setq confirm-kill-processes nil) (setq backup-directory-alist `((\".\" . ,(expand-file-name \"backups/\" my-cache-directory)))) dired(setq dired-recursive-deletes 'always dired-recursive-copies 'always global-auto-revert-non-file-buffers t auto-revert-verbose nil dired-dwim-target t delete-by-moving-to-trash t load-prefer-newer t auto-revert-use-notify nil auto-revert-interval 3 insert-directory-program \"gls\" dired-use-ls-dired t dired-listing-switches \"-al --group-directories-first\") (put 'dired-find-alternate-file 'disabled nil) dired-x(global-set-key (kbd \"C-x C-j\") 'dired-jump) diredfl;; (diredfl-global-mode) (add-hook 'dired-mode-hook 'diredfl-global-mode) peep-dired(setq peep-dired-ignored-extensions '(\"mkv\" \"iso\" \"mp4\" \"pdf\")) (with-eval-after-load 'dired (define-key dired-mode-map (kbd \"P\") 'peep-dired)) dired-hide-dotfiles(defun my-dired-mode-hook () \"My `dired'mode hook.\" ;; To hide dot-files by default (dired-hide-dotfiles-mode)) (with-eval-after-load 'dired (define-key dired-mode-map \".\" #'dired-hide-dotfiles-mode)) (add-hook 'dired-mode-hook #'my-dired-mode-hook) dired-git-info(setq dgi-auto-hide-details-p nil) (with-eval-after-load 'dired (define-key dired-mode-map \")\" 'dired-git-info-mode)) (add-hook 'dired-after-readin-hook 'dired-git-info-auto-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dired-git-info"},{"categories":null,"content":"hungry delete(setq hungry-delete-chars-to-skip \" \\f\u000b\") (add-hook 'after-init-hook 'global-hungry-delete-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#hungry-delete"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" my-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save placeThis means when you visit a file, point goes to the last place where it was when you previously visited the same file. (setq save-place-file (expand-file-name \"saveplace\" my-cache-directory)) (add-hook 'on-first-file-hook 'save-place-mode) save histToggle saving of minibuffer history. (setq savehist-file (expand-file-name \"savehist\" my-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) ;; (add-hook 'on-first-file-hook 'savehist-mode) (add-hook 'after-init-hook 'savehist-mode) saveplace-pdfsaveplace-pdf-view 可以保存 pdf 视图的位置。 (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" my-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save placeThis means when you visit a file, point goes to the last place where it was when you previously visited the same file. (setq save-place-file (expand-file-name \"saveplace\" my-cache-directory)) (add-hook 'on-first-file-hook 'save-place-mode) save histToggle saving of minibuffer history. (setq savehist-file (expand-file-name \"savehist\" my-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) ;; (add-hook 'on-first-file-hook 'savehist-mode) (add-hook 'after-init-hook 'savehist-mode) saveplace-pdfsaveplace-pdf-view 可以保存 pdf 视图的位置。 (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-save"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" my-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save placeThis means when you visit a file, point goes to the last place where it was when you previously visited the same file. (setq save-place-file (expand-file-name \"saveplace\" my-cache-directory)) (add-hook 'on-first-file-hook 'save-place-mode) save histToggle saving of minibuffer history. (setq savehist-file (expand-file-name \"savehist\" my-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) ;; (add-hook 'on-first-file-hook 'savehist-mode) (add-hook 'after-init-hook 'savehist-mode) saveplace-pdfsaveplace-pdf-view 可以保存 pdf 视图的位置。 (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-place"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" my-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save placeThis means when you visit a file, point goes to the last place where it was when you previously visited the same file. (setq save-place-file (expand-file-name \"saveplace\" my-cache-directory)) (add-hook 'on-first-file-hook 'save-place-mode) save histToggle saving of minibuffer history. (setq savehist-file (expand-file-name \"savehist\" my-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) ;; (add-hook 'on-first-file-hook 'savehist-mode) (add-hook 'after-init-hook 'savehist-mode) saveplace-pdfsaveplace-pdf-view 可以保存 pdf 视图的位置。 (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#save-hist"},{"categories":null,"content":"saveauto save这个包很有用，在 Emacs 中永远不需要手动保存文档，使用这个包会自动保存。 (require 'auto-save) (add-hook 'after-init-hook 'auto-save-enable) (setq auto-save-silent t auto-save-delete-trailing-whitespace t auto-save-list-file-prefix (expand-file-name \"auto-save-list/.saves-\" my-cache-directory)) (add-hook 'org-capture-mode-hook #'(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save placeThis means when you visit a file, point goes to the last place where it was when you previously visited the same file. (setq save-place-file (expand-file-name \"saveplace\" my-cache-directory)) (add-hook 'on-first-file-hook 'save-place-mode) save histToggle saving of minibuffer history. (setq savehist-file (expand-file-name \"savehist\" my-cache-directory) history-length 1000 savehist-save-minibuffer-history 1 savehist-additional-variables '(kill-ring search-ring regexp-search-ring) history-delete-duplicates t) ;; (add-hook 'on-first-file-hook 'savehist-mode) (add-hook 'after-init-hook 'savehist-mode) saveplace-pdfsaveplace-pdf-view 可以保存 pdf 视图的位置。 (with-eval-after-load 'save-place (advice-add 'save-place-find-file-hook :around #'saveplace-pdf-view-find-file-advice) (advice-add 'save-place-to-alist :around #'saveplace-pdf-view-to-alist-advice)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#saveplace-pdf"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) (setq undo-fu-session-directory (expand-file-name \"undo-fu-session\" my-cache-directory)) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#undo-and-redo"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) (setq undo-fu-session-directory (expand-file-name \"undo-fu-session\" my-cache-directory)) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#undo"},{"categories":null,"content":"undo\u0026redoUndo(add-hook 'on-first-file-hook 'global-undo-fu-session-mode) (setq undo-fu-session-directory (expand-file-name \"undo-fu-session\" my-cache-directory)) Vundo(with-eval-after-load 'vundo (setq vundo-glyph-alist vundo-unicode-symbols)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:10","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vundo"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\u003cescape\u003e\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#completion-and-search-framework"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#vertico"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#marginalia"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#orderless"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#corfu"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#kind-icon"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult-dir"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#embark"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#prescient"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ctrlf"},{"categories":null,"content":"Completion and search frameworkvertico(customize-set-variable 'vertico-cycle t) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-j\") 'vertico-directory-up)) ;; (vertico-mode) (add-hook 'on-first-input-hook 'vertico-mode) marginalia(customize-set-variable 'marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)) ;; (marginalia-mode) (add-hook 'vertico-mode-hook 'marginalia-mode) orderless;; (require 'orderless) (setq completion-styles '(orderless partial-completion) completion-category-defaults nil completion-category-overrides '((file (styles . (partial-completion))))) corfu(setq corfu-auto t corfu-cycle t corfu-quit-at-boundary t corfu-auto-prefix 2 corfu-preselect-first t corfu-quit-no-match t) (with-eval-after-load 'corfu (define-key corfu-map (kbd \"TAB\") 'corfu-next) (define-key corfu-map (kbd \"[tab]\") 'corfu-next) (define-key corfu-map (kbd \"S-TAB\") 'corfu-previous) (define-key corfu-map (kbd \"[backtab]\") 'corfu-next) (define-key corfu-map (kbd \"\") 'corfu-quit)) (defun corfu-enable-always-in-minibuffer () \"Enable Corfu in the minibuffer if Vertico/Mct are not active.\" (unless (or (bound-and-true-p mct--active) (bound-and-true-p vertico--input)) ;; (setq-local corfu-auto nil) Enable/disable auto completion (corfu-mode 1))) (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1) ;; (global-corfu-mode) ;; (corfu-history-mode) ;; (corfu-indexed-mode) (add-hook 'on-first-input-hook 'global-corfu-mode) (add-hook 'on-first-input-hook 'corfu-history-mode) (add-hook 'on-first-input-hook 'corfu-indexed-mode) kind-icon(setq kind-icon-default-face 'corfu-default) (setq kind-icon-use-icons nil) (with-eval-after-load 'corfu (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)) consult(add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode) (global-set-key (kbd \"C-x C-b\") 'consult-buffer) (global-set-key (kbd \"M-y\") 'consult-yank-pop) consult-dir;; (require 'consult-dir) (global-set-key (kbd \"C-x C-d\") 'consult-dir) (with-eval-after-load 'vertico (define-key vertico-map (kbd \"C-x C-d\") 'consult-dir) (define-key vertico-map (kbd \"C-x C-j\") 'consult-dir-jump-file)) embark(global-set-key [remap describe-bindings] #'embark-bindings) (global-set-key (kbd \"C-.\") 'embark-act) (global-set-key (kbd \"M-.\") 'embark-dwim) ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #'embark-prefix-help-command) prescientSimple but effective sorting and filtering for Emacs. (require 'prescient) ctrlf(add-hook 'on-first-input-hook 'ctrlf-mode) (add-hook 'pdf-isearch-minor-mode-hook (lambda () (ctrlf-local-mode -1))) google-this;; (google-this-mode) (add-hook 'after-init-hook 'google-this-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:11","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#google-this"},{"categories":null,"content":"dabbrev(global-set-key (kbd \"M-/\") 'dabbrev-completion) (global-set-key (kbd \"C-M-/\") 'dabbrev-expand) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:12","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dabbrev"},{"categories":null,"content":"cape;; (require 'cape) (global-set-key (kbd \"C-c p p\") 'completion-at-point) (global-set-key (kbd \"C-c p t\") 'complete-tag) (global-set-key (kbd \"C-c p d\") 'cape-dabbrev) (global-set-key (kbd \"C-c p f\") 'cape-file) (global-set-key (kbd \"C-c p k\") 'cape-keyword) (global-set-key (kbd \"C-c p s\") 'cape-symbol) (global-set-key (kbd \"C-c p a\") 'cape-abbrev) (global-set-key (kbd \"C-c p i\") 'cape-ispell) (global-set-key (kbd \"C-c p l\") 'cape-line) (global-set-key (kbd \"C-c p w\") 'cape-dict) (global-set-key (kbd \"C-c p \\\\\") 'cape-tex) (global-set-key (kbd \"C-c p \u0026\") 'cape-sgml) (global-set-key (kbd \"C-c p r\") 'cape-rfc1345) (add-to-list 'completion-at-point-functions #'cape-file) (add-to-list 'completion-at-point-functions #'cape-tex) (add-to-list 'completion-at-point-functions #'cape-dabbrev) (add-to-list 'completion-at-point-functions #'cape-keyword) ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) (add-to-list 'completion-at-point-functions #'cape-ispell) ;; (add-to-list 'completion-at-point-functions #'cape-dict) ;;(add-to-list 'completion-at-point-functions #'cape-symbol) ;;(add-to-list 'completion-at-point-functions #'cape-line) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:13","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cape"},{"categories":null,"content":"tempel(require 'tempel) (setq tempel-path \"~/.emacs.d/template/tempel\") (defun tempel-setup-capf () ;; Add the Tempel Capf to `completion-at-point-functions'. `tempel-expand' ;; only triggers on exact matches. Alternatively use `tempel-complete' if ;; you want to see all matches, but then Tempel will probably trigger too ;; often when you don't expect it. ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf, ;; such that it will be tried first. (setq-local completion-at-point-functions (cons #'tempel-expand completion-at-point-functions))) (add-hook 'text-mode-hook 'tempel-setup-capf) (global-set-key (kbd \"M-+\") 'tempel-complete) (global-set-key (kbd \"M-*\") 'tempel-insert) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:14","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tempel"},{"categories":null,"content":"imenu-listImenu-list 可以充当导航栏，对于我经常使用 org-mode 来说，很方便。此处添加了自动开关 imenu-list 的功能，对于有时候 org 文档中具有表格，而宽度不够时自动关闭它。 这个有个问题就是当 imenu-list 打开后，打开 help 窗口不能自动跳转了。 (setq imenu-list-position 'left) (setq imenu-list-size 0.2) (defvar my/imenu-list-enabled t) (defun my/imenu-list-on-off () (interactive) (if my/imenu-list-enabled (progn (setq my/imenu-list-enabled nil) (imenu-list-minor-mode -1)) (progn (setq my/imenu-list-enabled t) (imenu-list-minor-mode 1)))) (defun my/imenu-list-noselect (_) (when (not (minibufferp)) (if (and my/imenu-list-enabled (string-equal major-mode \"org-mode\") (not org-roam-capture--node) (not org-capture-mode)) (progn (imenu-list-minor-mode 1) (imenu-list-update) (imenu-list-show-noselect)) (imenu-list-minor-mode -1)))) (add-hook 'window-buffer-change-functions #'my/imenu-list-noselect) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:15","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#imenu-list"},{"categories":null,"content":"Open with Safari有些时候需要使用外部应用打开相应的文件，比如打印文件的时候。目前还没有发现直接使用 Emacs 打印文件的方法。 这里只使用 safari 打开相应的文件，如需要使用其他的应用，可以参照博客。 (defun xah-html-open-in-safari () \"Open the current file or `dired'marked files in Mac's Safari browser. If the file is not saved, save it first. URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'Version 2018-02-26\" (interactive) (let* ( ($file-list (if (string-equal major-mode \"dired-mode\") (dired-get-marked-files) (list (buffer-file-name)))) ($do-it-p (if (\u003c= (length $file-list) 5) t (y-or-n-p \"Open more than 5 files? \")))) (when $do-it-p (cond ((string-equal system-type \"darwin\") (mapc (lambda ($fpath) (when (buffer-modified-p ) (save-buffer)) (shell-command (format \"open -a Safari.app \\\"%s\\\"\" $fpath))) $file-list)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:16","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#open-with-safari"},{"categories":null,"content":"BenchmarkAwesome Emacs Equipped with Third-party Packages 启动时间约 0.06s 。 (message \"Awesome Emacs Equipped with Third-party Packages: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:6:17","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs Works with Multiple Language, PIECE OF CAKE(setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-works-with-multiple-language-piece-of-cake"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-spelling"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ispell"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell"},{"categories":null,"content":"Language Spellingispell(setq ispell-program-name \"aspell\" ispell-extra-args '(\"--sug-mode=ultra\" \"--lang=en_US\" \"--run-together\")) flyspell(add-hook 'text-mode-hook 'flyspell-mode) (with-eval-after-load 'flyspell (define-key flyspell-mode-map (kbd \"C-;\") nil) (define-key flyspell-mode-map (kbd \"C-,\") nil) (define-key flyspell-mode-map (kbd \"C-.\") nil)) (setq flyspell-duplicate-distance 0 flyspell-mark-duplications-flag nil) flyspell-correct(global-set-key (kbd \"C-;\") ' flyspell-correct-wrapper) (setq flyspell-correct-interface #'flyspell-correct-popup) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#flyspell-correct"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-translate"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#fanyi"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#powerthesaurus"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#smog"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#osx-dictionary"},{"categories":null,"content":"Language Translatefanyi此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。 (custom-set-variables '(fanyi-providers '( fanyi-haici-provider fanyi-youdao-thesaurus-provider fanyi-etymon-provider fanyi-longman-provider fanyi-libre-provider ))) (add-to-list 'display-buffer-alist '(\"*fanyi*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) Powerthesaurus有 autoload ，此处不需要做配置，只需要在 key “l” for language 设置相应的按键绑定。 Smoghttps://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3 https://wiki.christophchamp.com/index.php?title=Style_and_Diction (setq smog-command \"style -L en\") osx-dictionary(setq osx-dictionary-use-chinese-text-segmentation t) (add-to-list 'display-buffer-alist '(\"\\\\*osx-dictionary\\\\*\" (display-buffer-reuse-window display-buffer-same-window) (side . right) (window-width . 0.5))) go-translate此包可对整句进行翻译。 (with-eval-after-load 'go-translate (setq gts-translate-list '((\"en\" \"zh\"))) (setq gts-default-translator (gts-translator :picker (gts-noprompt-picker) :engines (list (gts-bing-engine) (gts-google-engine :parser (gts-google-summary-parser)) ;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \"https://translate.google.com\") ) :render (gts-buffer-render)))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#go-translate"},{"categories":null,"content":"Language Format(add-hook 'on-first-file-hook 'format-all-mode) (with-eval-after-load 'org (define-key org-src-mode-map (kbd \"TAB\") 'format-all-buffer)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-format"},{"categories":null,"content":"Language Service Protocoleldoc(eldoc-mode) lsp-bridge(require 'lsp-bridge) (require 'lsp-bridge-orderless) ;; (require 'lsp-bridge-icon) (dolist (hook (list 'emacs-lisp-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto t) ))) (dolist (hook (list 'python-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto nil) (lsp-bridge-mode 1) ))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#language-service-protocol"},{"categories":null,"content":"Language Service Protocoleldoc(eldoc-mode) lsp-bridge(require 'lsp-bridge) (require 'lsp-bridge-orderless) ;; (require 'lsp-bridge-icon) (dolist (hook (list 'emacs-lisp-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto t) ))) (dolist (hook (list 'python-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto nil) (lsp-bridge-mode 1) ))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eldoc"},{"categories":null,"content":"Language Service Protocoleldoc(eldoc-mode) lsp-bridge(require 'lsp-bridge) (require 'lsp-bridge-orderless) ;; (require 'lsp-bridge-icon) (dolist (hook (list 'emacs-lisp-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto t) ))) (dolist (hook (list 'python-mode-hook )) (add-hook hook (lambda () (setq-local corfu-auto nil) (lsp-bridge-mode 1) ))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#lsp-bridge"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#multiple-programming-language"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#markdown"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#csv"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#yaml"},{"categories":null,"content":"Multiple Programming LanguageMarkdown(add-to-list 'auto-mode-alist '(\"README\\\\.md\\\\'\" . gfm-mode)) CSV(add-to-list 'auto-mode-alist '(\"\\\\.csv\\\\'\" . csv-mode)) Yaml(add-to-list 'auto-mode-alist '(\"\\\\.yaml\\\\'\" . yaml-mode)) Python(setq python-shell-interpreter \"python3\" python-indent-guess-indent-offset nil) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#python"},{"categories":null,"content":"BenchmarkEmacs Works with Multiple Language 启动时间约 0.04s 。 (message \"Emacs Works with Multiple Language: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:7:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Organize Life With Plain Text使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。 (setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#organize-life-with-plain-text"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#better-default"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#word-wrap"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#todo-keywords-and-faces"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#todo-state-triggers"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-priority"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-emphasis-color"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-babel-load-languages"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-capture"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-attach"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-refile"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-frame"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-archive"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-habit"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-src"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-id"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-clock"},{"categories":null,"content":"Better Default(setq org-modules '() org-deadline-warning-days 7 org-imenu-depth 4 org-return-follows-link t org-agenda-dim-blocked-tasks t org-image-actual-width nil org-display-remote-inline-images 'download org-log-into-drawer t org-fast-tag-selection-single-key 'expert org-adapt-indentation nil org-fontify-quote-and-verse-blocks t org-support-shift-select t ;; org--leading-stars t ;; org-hide-block-startup t org-treat-S-cursor-todo-selection-as-state-change nil) (setq org-startup-with-inline-images t) (add-to-list 'revert-without-query \".+\\\\.org\") Word wrap我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。 (add-hook 'org-mode-hook 'menu-bar--wrap-long-lines-window-edge) todo keywords and facesIf you do not provide the separator bar, the last state is used as the DONE state. (setq org-todo-keywords '((sequence \"TODO(t)\" \"NEXT(n)\" \"STARTED\" \"|\" \"WAIT(w@)\" \"SOMEDAY(s@)\" \"CNCL(c@/!)\" \"DONE(d)\"))) (setq org-todo-keyword-faces '((\"TODO\" :foreground \"Red\" :weight bold) (\"NEXT\" :foreground \"Forest green\" :weight bold) (\"SOMEDAY\" :foreground \"blue\" :weight bold) (\"DONE\" :foreground \"#705628\" :weight bold) (\"WAIT\" :foreground \"Orange\" :weight bold) (\"CNCL\" :foreground \"#b4534b\" :weight bold))) todo state triggers(setq org-todo-state-tags-triggers (quote ((\"CNCL\" (\"CNCL\" . t)) (\"WAIT\" (\"WAIT\" . t)) (\"SOMEDAY\" (\"WAIT\") (\"SOMEDAY\" . t)) (done (\"WAIT\") (\"SOMEDAY\")) (\"TODO\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"NEXT\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\")) (\"DONE\" (\"WAIT\") (\"CNCL\") (\"SOMEDAY\"))))) org priority(setq org-priority-faces '((?A . '(bold org-priority)) (?B . org-priority) (?C . '(shadow org-priority)))) org emphasis color(defface my-org-emphasis-bold '((default :inherit bold) (((class color) (min-colors 88) (background light)) :foreground \"#a60000\") (((class color) (min-colors 88) (background dark)) :foreground \"#ff8059\")) \"My bold emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-italic '((default :inherit italic) (((class color) (min-colors 88) (background light)) :foreground \"#005e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#44bc44\")) \"My italic emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-underline '((default :inherit underline) (((class color) (min-colors 88) (background light)) :foreground \"#813e00\") (((class color) (min-colors 88) (background dark)) :foreground \"#d0bc00\")) \"My underline emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-strike-through '((((class color) (min-colors 88) (background light)) :strike-through \"#972500\" :foreground \"#505050\") (((class color) (min-colors 88) (background dark)) :strike-through \"#ef8b50\" :foreground \"#a8a8a8\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (defface my-org-emphasis-verbatim '((((class color) (min-colors 88) (background light)) :background \"#F7B80A\") (((class color) (min-colors 88) (background dark)) :background \"#6DA906\")) \"My strike-through emphasis for Org.\" :group 'org-faces) (setq org-emphasis-alist '((\"*\" my-org-emphasis-bold) (\"/\" my-org-emphasis-italic) (\"_\" my-org-emphasis-underline) (\"~\" org-code verbatim) (\"+\" my-org-emphasis-strike-through) (\"=\" my-org-emphasis-verbatim))) org-babel-load-languages根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。 ;; (org-babel-do-load-languages ;; 'org-babel-load-languages ;; '((emacs-lisp . t))) (defun my/org-babel-execute-src-block (\u0026optional _arg info _params) \"Load language if needed\" (let* ((lang (nth 0 info)) (sym (if (member (downcase lang) '(\"c\" \"cpp\" \"c++\")) 'C (intern lang))) (backup-languages org-babel-load-languages)) ;; - (LANG . nil) 明确禁止的语言，不加载。 ;; - (LANG . t) 已加载过的语言，不重复载。 (unless (assoc sym backup-languages) (condition-case err (progn (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t))) (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) (file-missing (setq-default org-babel-load-languages backup-languages) err))))) (advice-add 'org-babel-execu","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-num"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#packages-enhance-org"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auto-tangle"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-superstar"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-download"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-appear"},{"categories":null,"content":"Packages enhance orgauto-tangle(unless (fboundp 'org-auto-tangle-mode) (autoload #'org-auto-tangle-mode \"org-auto-tangle\" nil t)) (add-hook 'org-mode-hook 'org-auto-tangle-mode) toc-org (add-hook 'org-mode-hook 'toc-org-mode) org-superstar(add-hook 'org-mode-hook 'org-superstar-mode) org-download(setq org-download-image-dir \"~/Nextcloud/L.Personal.Galaxy/roam/pic\") (setq org-download-screenshot-method 'screencapture) (setq org-download-abbreviate-filename-function 'expand-file-name) (setq org-download-timestamp \"%Y%m%d%H%M%S\") (setq org-download-display-inline-images nil) (setq org-download-heading-lvl nil) (setq org-download-annotate-function (lambda (_link) \"\")) (setq org-download-image-attr-list '(\"#+NAME:fig: \" \"#+CAPTION: \" \"#+ATTR_ORG: :width 500px\" \"#+ATTR_LATEX: :width 10cm :placement [!htpb]\" \"#+ATTR_HTML: :width 600px\")) (setq org-download-screenshot-basename \".png\") (add-hook 'org-mode-hook 'org-download-enable) org-appear(setq org-appear-trigger 'manual org-appear-autolinks t) (add-hook 'org-mode-hook 'org-appear-mode) (add-hook 'org-mode-hook (lambda () (add-hook 'meow-insert-enter-hook #'org-appear-manual-start nil t) (add-hook 'meow-insert-exit-hook #'org-appear-manual-stop nil t))) org-cliplink和 Powerthesaurus 一样，不需要显式 require ，只要绑定一个按键就可以使用。 ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-cliplink"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \u003e \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \u003e \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/\u003c%Y-%m\u003e.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#note-taking"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-node"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-settings"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-capture-template"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-buffer"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#search-org-roam-node-with-rg"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#quick-open-org-roam-ref-link"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-ui"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-transclusion"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-preview-latex-formula"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#morning-diary"},{"categories":null,"content":"Note takingorg-roam-node Node type Copied from https://jethrokuan.github.io/org-roam-guide/ 。 (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-type ((node org-roam-node)) \"Return the TYPE of NODE.\" (condition-case nil (file-name-nondirectory (directory-file-name (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (error \"\")))) Node directory (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-directories ((node org-roam-node)) (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory)))) (format \"(%s)\" (car (split-string dirs \"/\"))) \"\"))) Node backlink count (with-eval-after-load 'org-roam (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node)) (let* ((count (caar (org-roam-db-query [:select (funcall count source) :from links :where (= dest $s1) :and (= type \"id\")] (org-roam-node-id node))))) (format \"[%d]\" count)))) file title hierarchy (with-eval-after-load 'org-roam ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node)) \"Return the value of \\\"#+title:\\\" (if any) from file that NODE resides in. If there's no file-level title in the file, return empty string.\" (or (if (= (org-roam-node-level node) 0) (org-roam-node-title node) (org-roam-get-keyword \"TITLE\" (org-roam-node-file node))) \"\")) (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node)) \"Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\" (let ((title (org-roam-node-title node)) (olp (org-roam-node-olp node)) (level (org-roam-node-level node)) (filetitle (org-roam-node-doom-filetitle node)) (separator (propertize \" \" 'face 'shadow))) (cl-case level ;; node is a top-level file (0 filetitle) ;; node is a level 1 heading (1 (concat (propertize filetitle 'face '(shadow italic)) separator title)) ;; node is a heading with an arbitrary outline path (t (concat (propertize filetitle 'face '(shadow italic)) separator (propertize (string-join olp \" \") 'face '(shadow italic)) separator title)))))) org-roam settings;; (unless ;; (fboundp 'org-roam-db-autosync-enable) ;; (autoload #'org-roam-db-autosync-enable \"org-roam\" nil t)) (add-hook 'after-init-hook 'org-roam-db-autosync-enable) (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode) (add-hook 'org-mode-hook (lambda () (setq-local time-stamp-active t time-stamp-start \"#\\\\+MODIFIED:[ \\t]*\" time-stamp-end \"$\" time-stamp-format \"\\[%Y-%m-%d %3a %H:%M\\]\") (add-hook 'before-save-hook 'time-stamp nil 'local))) (setq org-roam-db-gc-threshold most-positive-fixnum org-roam-completion-everywhere t org-roam-directory (file-truename my-roam) org-roam-db-location (expand-file-name \"org-roam.db\" my-cache-directory) org-roam-node-display-template (concat \"${type:8} ${backlinkscount:3} ${doom-hierarchy:*}\" (propertize \"${tags:20}\" 'face 'org-tag) \" \") org-roam-node-annotation-function (lambda (node) (marginalia--time (org-roam-node-file-mtime node)))) org-roam-capture-template(setq org-roam-capture-templates '((\"a\" \"articles\" plain \"%?\" :target (file+head \"articles/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"b\" \"Books\" plain (file \"~/.emacs.d/template/readinglog\") :target (file+head \"books/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"d\" \"Diary\" plain \"%?\" :target (file+datetree \"daily/.org\" day)) (\"m\" \"main\" plain \"%?\" :target (file+head \"main/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"p\" \"people\" plain (file \"~/.emacs.d/template/crm\") :target (file+head \"crm/${slug}.org\" \"#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\") :unnarrowed t) (\"r\" \"reference\" plain (file \"~/.emacs.d/template/reference\") :target (file+head \"ref/${citekey}.org\" \"#+TITLE: ${title}\\n#+CREAT","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-remark"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\u003cf2\u003e\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex-manage"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#bibtex-completion"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ebib"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#import-bib-to-ebib-from-zotero"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#oc-csl"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#citar"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#consult-bibtex"},{"categories":null,"content":"Bibtex managebibtex(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \"-\") (setq bibtex-autokey-year-title-separator \"-\") (setq bibtex-autokey-titleword-separator \"-\") (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5) bibtex-completion这里可以设置 pdf 和 note 的图标，但是我会出现对不齐的问题。 (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \"file-pdf\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-notes-symbol (all-the-icons-octicon \"file-text\" :height 1 :v-adjust -0.05 :face 'font-lock-doc-face)) (setq bibtex-completion-library-path \"~/Nextcloud/L.Personal.Galaxy/storage/pdf\") (setq bibtex-completion-bibliography '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq bibtex-completion-notes-path \"~/Nextcloud/L.Personal.Galaxy/roam/ref\") (setq bibtex-completion-additional-search-fields '(keywords journal booktitle)) (setq bibtex-completion-pdf-symbol \"P\") (setq bibtex-completion-notes-symbol \"N\") (setq bibtex-completion-display-formats '((article . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\") (inbook . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\") (incollection . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (inproceedings . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\") (t . \"${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))) ebib(setq ebib-preload-bib-files '(\"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq ebib-file-search-dirs '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq ebib-keywords (expand-file-name \"ref/keywords.txt\" my-roam)) (setq ebib-notes-directory (expand-file-name \"ref\" my-roam)) (setq ebib-filters-default-file (expand-file-name \"ref/ebib-filters\" my-roam)) (setq ebib-reading-list-file (expand-file-name \"ref/reading_list.org\" my-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit 'always) ;; (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Year\" 6 t) (\"Author/Editor\" 30 nil) (\"Title\" 50 t))) (setq ebib-index-columns '((\"Entry Key\" 30 t) (\"Note\" 1 nil) (\"Title\" 50 t))) (setq ebib-file-associations '((\"ps\" . \"gv\"))) (global-set-key (kbd \"\") 'ebib) import bib to ebib from zotero(defun my/ebib-import-from-zotero () \"Import entry from zotero to ebib.\" (interactive) (ebib) (find-file \"~/Documents/zotero.bib\") (ebib-import-entries) (quit-window-delete) (ebib-quit-entry-buffer)) oc-csl;; (require 'oc-csl) (defun my/oc-csl () (require 'oc-csl)) (add-hook 'org-mode-hook #'my/oc-csl) (setq org-cite-global-bibliography '(\"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\" \"/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\")) (setq org-cite-insert-processor 'citar org-cite-follow-processor 'citar org-cite-activate-processor 'citar) citar(setq citar-bibliography \"~/Nextcloud/L.Personal.Galaxy/roam/References.bib\" citar-templates '((main . \"${author editor:30} ${date year issued:4} ${title:48}\") (suffix . \"${=key= id:15} ${=type=:12} ${tags keywords:*}\") (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\") (note . \"${title}\")) citar-at-point-function 'embark-act citar-open-note-function 'orb-citar-edit-note citar-notes-paths '(\"~/Nextcloud/L.Personal.Galaxy/roam/ref\") citar-library-paths '(\"~/Nextcloud/L.Personal.Galaxy/storage/pdf\")) (setq citar-symbols `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \") (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \") (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \"))) (setq citar-symbol-separator \" \") (with-eval-after-loa","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-roam-bibtex"},{"categories":null,"content":"Tasks manageorg-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) Dynamic agenda;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html (defun vulpea-project-p () \"Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\" (seq-find ; (3) (lambda (type) (or (eq type 'todo) (eq type 'done))) (org-element-map ; (2) (org-element-parse-buffer 'headline) ; (1) 'headline (lambda (h) (org-element-property :todo-type h))))) (defun vulpea-project-update-tag () \"Update PROJECT tag in the current buffer.\" (when (and (not (active-minibuffer-window)) (vulpea-buffer-p)) (save-excursion (goto-char (point-min)) (let* ((tags (vulpea-buffer-tags-get)) (original-tags tags)) (if (vulpea-project-p) (setq tags (cons \"project\" tags)) (setq tags (remove \"project\" tags))) ;; cleanup duplicates (setq tags (seq-uniq tags)) ;; update tags if changed (when (or (seq-difference tags original-tags) (seq-difference original-tags tags)) (apply #'vulpea-buffer-tags-set tags)))))) (defun vulpea-buffer-p () \"Return non-nil if the currently visited buffer is a note.\" (and buffer-file-name (string-prefix-p (expand-file-name (file-name-as-directory org-roam-directory)) (file-name-directory buffer-file-name)))) ;; (defun vulpea-project-files () ;; \"Return a list of note files containing 'project' tag.\" ; ;; (seq-uniq ;; (seq-map ;; #'car ;; (org-roam-db-query ;; [:select [nodes:file] ;; :from tags ;; :left-join nodes ;; :on (= tags:node-id nodes:id) ;; :where (like tag (quote \"%\\\"project\\\"%\"))])))) ;; (defun vulpea-agenda-files-update (\u0026rest _) ;; \"Update the value of `org-agenda-files'.\" ;; (setq org-agenda-files (vulpea-project-files))) ;; functions borrowed from `vulpea' library ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#tasks-manage"},{"categories":null,"content":"Tasks manageorg-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) Dynamic agenda;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html (defun vulpea-project-p () \"Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\" (seq-find ; (3) (lambda (type) (or (eq type 'todo) (eq type 'done))) (org-element-map ; (2) (org-element-parse-buffer 'headline) ; (1) 'headline (lambda (h) (org-element-property :todo-type h))))) (defun vulpea-project-update-tag () \"Update PROJECT tag in the current buffer.\" (when (and (not (active-minibuffer-window)) (vulpea-buffer-p)) (save-excursion (goto-char (point-min)) (let* ((tags (vulpea-buffer-tags-get)) (original-tags tags)) (if (vulpea-project-p) (setq tags (cons \"project\" tags)) (setq tags (remove \"project\" tags))) ;; cleanup duplicates (setq tags (seq-uniq tags)) ;; update tags if changed (when (or (seq-difference tags original-tags) (seq-difference original-tags tags)) (apply #'vulpea-buffer-tags-set tags)))))) (defun vulpea-buffer-p () \"Return non-nil if the currently visited buffer is a note.\" (and buffer-file-name (string-prefix-p (expand-file-name (file-name-as-directory org-roam-directory)) (file-name-directory buffer-file-name)))) ;; (defun vulpea-project-files () ;; \"Return a list of note files containing 'project' tag.\" ; ;; (seq-uniq ;; (seq-map ;; #'car ;; (org-roam-db-query ;; [:select [nodes:file] ;; :from tags ;; :left-join nodes ;; :on (= tags:node-id nodes:id) ;; :where (like tag (quote \"%\\\"project\\\"%\"))])))) ;; (defun vulpea-agenda-files-update (\u0026rest _) ;; \"Update the value of `org-agenda-files'.\" ;; (setq org-agenda-files (vulpea-project-files))) ;; functions borrowed from `vulpea' library ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-agenda"},{"categories":null,"content":"Tasks manageorg-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) Dynamic agenda;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html (defun vulpea-project-p () \"Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\" (seq-find ; (3) (lambda (type) (or (eq type 'todo) (eq type 'done))) (org-element-map ; (2) (org-element-parse-buffer 'headline) ; (1) 'headline (lambda (h) (org-element-property :todo-type h))))) (defun vulpea-project-update-tag () \"Update PROJECT tag in the current buffer.\" (when (and (not (active-minibuffer-window)) (vulpea-buffer-p)) (save-excursion (goto-char (point-min)) (let* ((tags (vulpea-buffer-tags-get)) (original-tags tags)) (if (vulpea-project-p) (setq tags (cons \"project\" tags)) (setq tags (remove \"project\" tags))) ;; cleanup duplicates (setq tags (seq-uniq tags)) ;; update tags if changed (when (or (seq-difference tags original-tags) (seq-difference original-tags tags)) (apply #'vulpea-buffer-tags-set tags)))))) (defun vulpea-buffer-p () \"Return non-nil if the currently visited buffer is a note.\" (and buffer-file-name (string-prefix-p (expand-file-name (file-name-as-directory org-roam-directory)) (file-name-directory buffer-file-name)))) ;; (defun vulpea-project-files () ;; \"Return a list of note files containing 'project' tag.\" ; ;; (seq-uniq ;; (seq-map ;; #'car ;; (org-roam-db-query ;; [:select [nodes:file] ;; :from tags ;; :left-join nodes ;; :on (= tags:node-id nodes:id) ;; :where (like tag (quote \"%\\\"project\\\"%\"))])))) ;; (defun vulpea-agenda-files-update (\u0026rest _) ;; \"Update the value of `org-agenda-files'.\" ;; (setq org-agenda-files (vulpea-project-files))) ;; functions borrowed from `vulpea' library ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#dynamic-agenda"},{"categories":null,"content":"Tasks manageorg-agenda(add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90) (setq org-agenda-hide-tags-regexp (regexp-opt '(\"project\"))) ;; hide project tag (setq org-agenda-prefix-format '((agenda . \" %i %?-12t% s\") (todo . \" %i\") (tags . \" %i %-12:c\") (search . \" %i %-12:c\"))) (setq org-agenda-tags-todo-honor-ignore-options t org-agenda-start-on-weekday nil org-agenda-dim-blocked-tasks nil org-agenda-compact-blocks t org-agenda-to-appt t) (defun my/org-agenda () (interactive) (org-agenda nil \" \")) (with-eval-after-load 'org (define-key org-mode-map (kbd \"C-,\") nil) (define-key org-mode-map (kbd \"C-'\") nil)) Dynamic agenda;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html (defun vulpea-project-p () \"Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\" (seq-find ; (3) (lambda (type) (or (eq type 'todo) (eq type 'done))) (org-element-map ; (2) (org-element-parse-buffer 'headline) ; (1) 'headline (lambda (h) (org-element-property :todo-type h))))) (defun vulpea-project-update-tag () \"Update PROJECT tag in the current buffer.\" (when (and (not (active-minibuffer-window)) (vulpea-buffer-p)) (save-excursion (goto-char (point-min)) (let* ((tags (vulpea-buffer-tags-get)) (original-tags tags)) (if (vulpea-project-p) (setq tags (cons \"project\" tags)) (setq tags (remove \"project\" tags))) ;; cleanup duplicates (setq tags (seq-uniq tags)) ;; update tags if changed (when (or (seq-difference tags original-tags) (seq-difference original-tags tags)) (apply #'vulpea-buffer-tags-set tags)))))) (defun vulpea-buffer-p () \"Return non-nil if the currently visited buffer is a note.\" (and buffer-file-name (string-prefix-p (expand-file-name (file-name-as-directory org-roam-directory)) (file-name-directory buffer-file-name)))) ;; (defun vulpea-project-files () ;; \"Return a list of note files containing 'project' tag.\" ; ;; (seq-uniq ;; (seq-map ;; #'car ;; (org-roam-db-query ;; [:select [nodes:file] ;; :from tags ;; :left-join nodes ;; :on (= tags:node-id nodes:id) ;; :where (like tag (quote \"%\\\"project\\\"%\"))])))) ;; (defun vulpea-agenda-files-update (\u0026rest _) ;; \"Update the value of `org-agenda-files'.\" ;; (setq org-agenda-files (vulpea-project-files))) ;; functions borrowed from `vulpea' library ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el (defun vulpea-buffer-tags-get () \"Return filetags value in current buffer.\" (vulpea-buffer-prop-get-list \"filetags\" \"[ :]\")) (defun vulpea-buffer-tags-set (\u0026rest tags) \"Set TAGS in current buffer. If filetags value is already set, replace it.\" (if tags (vulpea-buffer-prop-set \"filetags\" (concat \":\" (string-join tags \":\") \":\")) (vulpea-buffer-prop-remove \"filetags\"))) (defun vulpea-buffer-tags-add (tag) \"Add a TAG to filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (append tags (list tag)))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-tags-remove (tag) \"Remove a TAG from filetags in current buffer.\" (let* ((tags (vulpea-buffer-tags-get)) (tags (delete tag tags))) (apply #'vulpea-buffer-tags-set tags))) (defun vulpea-buffer-prop-set (name value) \"Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\" (setq name (downcase name)) (org-with-point-at 1 (let ((case-fold-search t)) (if (re-search-forward (concat \"^#\\\\+\" name \":\\\\(.*\\\\)\") (point-max) t) (replace-match (concat \"#+\" name \": \" value) 'fixedcase) (while (and (not (eobp)) (looking-at \"^[#:]\")) (if (save-excursion (end-of-line) (eobp)) (progn (end-of-line) (insert \"\\n\")) (forward-line) (beginning-of-line))) (insert \"#+\" name \": \" value \"\\n\"))))) (defun vulpea-buffer-prop-set-list (name values \u0026optional separators) \"Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-agenda-view"},{"categories":null,"content":"Finance manage(setq beancount-electric-currency t) (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode)) (add-hook 'beancount-mode-hook #'outline-minor-mode) (add-hook 'beancount-mode-hook #'(lambda nil (setq-local electric-indent-chars nil))) (with-eval-after-load 'beancount (define-key beancount-mode-map (kbd \"C-c C-n\") 'outline-next-visible-heading) (define-key beancount-mode-map (kbd \"C-c C-p\") 'outline-previous-visible-heading)) (add-to-list 'all-the-icons-icon-alist '(\"\\\\.bean\\\\'\" all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) (add-to-list 'all-the-icons-mode-icon-alist '(beancount-mode all-the-icons-material \"attach_money\" :face all-the-icons-lblue)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#finance-manage"},{"categories":null,"content":"Org Exportox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) easy-hugo(defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/hugo-source/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-default-picture-directory \"~/Nextcloud/L.Personal.Galaxy/roam/pic\" easy-hugo-org-header t) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" my-template-directory))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#org-export"},{"categories":null,"content":"Org Exportox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) easy-hugo(defface easy-hugo-help-face `((((class color) (background light)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/hugo-source/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-default-picture-directory \"~/Nextcloud/L.Personal.Galaxy/roam/pic\" easy-hugo-org-header t) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" my-template-directory))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-hugo"},{"categories":null,"content":"Org Exportox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) easy-hugo(defface easy-hugo-help-face `((((class color) (background light)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/hugo-source/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-default-picture-directory \"~/Nextcloud/L.Personal.Galaxy/roam/pic\" easy-hugo-org-header t) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" my-template-directory))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#easy-hugo"},{"categories":null,"content":"Org Exportox-hugo(with-eval-after-load 'ox (require 'ox-hugo)) easy-hugo(defface easy-hugo-help-face `((((class color) (background light)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/hugo-source/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-default-picture-directory \"~/Nextcloud/L.Personal.Galaxy/roam/pic\" easy-hugo-org-header t) export org to docx with pandoc(defun org-export-docx () \"Convert org to docx.\" (interactive) (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \".docx\")) (template-file (expand-file-name \"template.docx\" my-template-directory))) (shell-command (format \"pandoc %s -o %s --reference-doc=%s\" (buffer-file-name) docx-file template-file)) (message \"Convert finish: %s\" docx-file))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#export-org-to-docx-with-pandoc"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#latex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#defaults"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#ox-latex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#auctex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#cdlatex"},{"categories":null,"content":"LatexDefaults为了在 org-mode 中快速的输入数学符号，开启 org-cdlatex-mode 。该包是 org-mode 自带的的。进一步的是什用 cdlatex 这个包，会自动成对的输入符号。进一步的是考虑使用 tempel 等这类包，自动展开 snippet 。 (setq org-highlight-latex-and-related '(latex script)) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) (setq org-latex-with-hyperref nil) (add-to-list 'revert-without-query \".+\\\\.tex\") ox-latex(setq org-highlight-latex-and-related '(latex script)) (with-eval-after-load 'ox-latex (setq org-latex-classes nil org-latex-listings 'minted org-export-latex-listings 'minted org-latex-minted-options '((\"breaklines\" \"true\") (\"breakanywhere\" \"true\"))) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\")))) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t) auctex(load \"auctex.el\" nil t t) ;; (load \"preview-latex.el\" nil t t) cdlatex;; (require 'cdlatex) (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex) (add-hook 'latex-mode-hook 'turn-on-cdlatex) (add-hook 'org-mode-hook 'turn-on-org-cdlatex) math preview关于在 org-mode 中进行数学公式预览的功能前前后后己经尝试了多个包，有 org 自带的 org-latex-preview ，还有第三方包如： org-latex-impatient， popweb， xenops ，以及目前使用的这个包 math-preview。 首先 popweb 很好用，尤其是在 linux 系统上，即时预览公式很丝滑。只要配置好 eaf ，其可以跨系统使用。在 Mac 上使用，不太好，是因为 Mac 的全屏导致屏幕在工作区之间来回滑动。如果不全屏使用 Emacs ， popweb 也可以用。 Xenops 其主要是在 latex 环境下使用，同样也可以在 org-mode 中使用。我在 org-mode 中使用，存在的问题是，使用 hook 的方式启动 xenops-mode ，当我打开 Emacs 配置文件时，反应有点卡卡的。 Math-preview 和 org-latex-impatient 是类似的包，它们都是要借助于外部的 nodejs 程序实现公式的预览。 org-latex-impatient 有一段时间不更新了。初步尝试后决定使用 math-preview 进行公式的预览。在 MacOS M1 上使用下面的配置公式看起来还不错，你可能需要跟据自己的需要进行一定的修改。 (setq math-preview-scale 1.2) (setq math-preview-raise 0.4) (setq math-preview-margin '(1 . 1)) (face-spec-set 'math-preview-face '((((background light)) :foreground \"#721045\") (t :foreground \"#feacd0\")) 'face-override-spec) (add-hook 'org-mode-hook #'math-preview-all) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#math-preview"},{"categories":null,"content":"BenchmarkOrganize Life With Plain Text 启动时间约 0.13s 。 (message \"Organize Life With Plain Text: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:8:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs Can DO More, Applications(setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-can-do-more-applications"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations nil) (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\u003cRET\u003e\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003creturn\u003e\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\u003cS-return\u003e\") 'newline)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \u003e\" item) (princ (concat (replace-regexp-in-string \" \u003e\" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-reader"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations nil) (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-tools"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations nil) (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-print"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations nil) (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-key-settings"},{"categories":null,"content":"PDF Readerpdf tools如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。 (setq pdf-view-use-unicode-ligther nil) (setq pdf-view-use-scaling t pdf-view-use-imagemagick nil pdf-annot-activate-created-annotations nil) (add-hook 'doc-view-mode-hook 'pdf-tools-install) (add-to-list 'revert-without-query \".+\\\\.pdf\") (add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode) (with-eval-after-load 'pdf-outline (define-key pdf-outline-buffer-mode-map (kbd \"\") 'pdf-outline-follow-link-and-quit)) pdf print可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。 (setq pdf-misc-print-program-executable \"/usr/bin/lp\") (defun mrb/pdf-misc-print-pages(filename pages \u0026optional interactive-p) \"Wrapper for `pdf-misc-print-document` to add page selection support\" (interactive (list (pdf-view-buffer-file-name) (read-string \"Page range (empty for all pages): \" (number-to-string (pdf-view-current-page))) t) pdf-view-mode) (let ((pdf-misc-print-program-args (if (not (string-blank-p pages)) (cons (concat \"-P \" pages) pdf-misc-print-program-args) pdf-misc-print-program-args))) (pdf-misc-print-document filename))) pdf key settings绑定 w ，获得文件名，我不需要那一大串路径。 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。 (defun my/get-file-name () (interactive) (kill-new (file-name-base (buffer-file-name))) (message \"Copied %s\" (file-name-base (buffer-file-name)))) (with-eval-after-load 'pdf-view (define-key pdf-view-mode-map (kbd \"w\") 'my/get-file-name) (define-key pdf-view-mode-map (kbd \"h\") 'pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \"t\") 'pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \"d\") 'pdf-annot-delete) (define-key pdf-view-mode-map (kbd \"q\") 'kill-this-buffer) (define-key pdf-view-mode-map (kbd \"y\") 'pdf-view-kill-ring-save) (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages)) (with-eval-after-load 'pdf-annot (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'pdf-annot-edit-contents-commit) (define-key pdf-annot-edit-contents-minor-mode-map (kbd \"\") 'newline)) pdf annotationsCreate pdf annotations file. (defun my/edit-notes () \"Edit reference note base pdf name.\" (interactive) (if (equal (file-name-extension (buffer-name)) \"pdf\") (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots. (defun my/org-delete-heading-content (heading) \"Delete content of specific HEADING\" (org-map-entries (lambda () (let ((name (nth 4 (org-heading-components)))) (if (string= name heading) (save-restriction (org-mark-subtree) (forward-line) (delete-region (region-beginning) (region-end)))))))) (defun my/extract-pdf-annots-to-ref-note () (interactive) (let (annots) (setf annots (shell-command-to-string (format \"pdfannots.py %s\" (find-file (buffer-name))))) (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name))) (my/org-delete-heading-content \"Research Contribution\") (goto-char (org-find-exact-headline-in-buffer \"Research Contribution\")) (forward-line) (dolist (item (split-string annots \"\\n\")) (if (string-prefix-p \" \" item) (princ (concat (replace-regexp-in-string \" \" \"+\" item) \"\\n\") (current-buffer)))))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#pdf-annotations"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" my-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" my-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#magit"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" my-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#git-timemachine"},{"categories":null,"content":"GITMagitMagit related configuration (setq transient-history-file (expand-file-name \"transient/history.el\" my-cache-directory)) (with-eval-after-load 'magit (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1) (magit-add-section-hook 'magit-status-sections-hook 'magit-insert-modules 'magit-insert-unpulled-from-upstream)) git-timemachine(unless (fboundp 'git-timemachine) (autoload #'git-timemachine \"git-timemachine\" nil t)) Browse at remote(require 'browse-at-remote) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#browse-at-remote"},{"categories":null,"content":"eshell(global-set-key (kbd \"C-`\") 'eshell) (setq eshell-directory-name (expand-file-name \"eshell\" my-cache-directory)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#eshell"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" my-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" my-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary;; (require 'elfeed-summary) (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#rss-management"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" my-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" my-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary;; (require 'elfeed-summary) (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" my-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" my-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary;; (require 'elfeed-summary) (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-org"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" my-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" my-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary;; (require 'elfeed-summary) (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-score"},{"categories":null,"content":"Rss managementelfeed(setq elfeed-db-directory (expand-file-name \"elfeed\" my-cache-directory)) (setq elfeed-show-entry-switch #'elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。 (defun elfeed-display-buffer (buf \u0026optional act) (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window) (side . bottom) (window-height . 0.8) (reusable-frames . visible) (window-parameters (select . t) (quit . t) (popup . t))))) elfeed-org(with-eval-after-load 'elfeed (setq rmh-elfeed-org-files (list \"~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\")) (elfeed-org)) elfeed-score(with-eval-after-load 'elfeed (setq elfeed-score-rule-stats-file (expand-file-name \"elfeed.stats\" my-cache-directory)) (elfeed-score-enable) (define-key elfeed-search-mode-map \"=\" elfeed-score-map)) elfeed-summary;; (require 'elfeed-summary) (setq elfeed-summary-other-window t) (setq elfeed-summary-settings '((group (:title . \"Searches\") (:elements (search (:filter . \"@7-days-ago +unread\") (:title . \"Unread entries this week\")))) (group (:title . \"Blogs\") (:elements (query . (and blogs (not Emacs))) (group (:title . \"Emacs\") (:elements (query . Emacs)) (:face . modus-themes-heading-1)))) (group (:title . \"News\") (:elements (query . news))) (group (:title . \"Books\") (:elements (query . book))))) (advice-add 'elfeed-summary :after 'elfeed-update) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#elfeed-summary"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的教程。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval (* 15 60) mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (defun my/mail-start () (mu4e 'background)) (add-hook 'after-init-hook 'my/mail-start) mu4e headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars t) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) mu4e bookmarks (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) mu4e-alert(with-eval-after-load 'mu4e (require 'mu4e-alert) ;; (mu4e-alert-set-default-style 'notifier) (add-hook 'after-init-hook #'mu4e-alert-enable-notifications) (add-to-list 'awesome-tray-active-modules \"mail\")) sent mail(setq message-send-mail-function 'smtpmail-send-it) mu4e-column-faces(with-eval-after-load 'mu4e (mu4e-column-faces-mode)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#email"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的教程。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval (* 15 60) mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (defun my/mail-start () (mu4e 'background)) (add-hook 'after-init-hook 'my/mail-start) mu4e headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars t) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) mu4e bookmarks (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) mu4e-alert(with-eval-after-load 'mu4e (require 'mu4e-alert) ;; (mu4e-alert-set-default-style 'notifier) (add-hook 'after-init-hook #'mu4e-alert-enable-notifications) (add-to-list 'awesome-tray-active-modules \"mail\")) sent mail(setq message-send-mail-function 'smtpmail-send-it) mu4e-column-faces(with-eval-after-load 'mu4e (mu4e-column-faces-mode)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的教程。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval (* 15 60) mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (defun my/mail-start () (mu4e 'background)) (add-hook 'after-init-hook 'my/mail-start) mu4e headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars t) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) mu4e bookmarks (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) mu4e-alert(with-eval-after-load 'mu4e (require 'mu4e-alert) ;; (mu4e-alert-set-default-style 'notifier) (add-hook 'after-init-hook #'mu4e-alert-enable-notifications) (add-to-list 'awesome-tray-active-modules \"mail\")) sent mail(setq message-send-mail-function 'smtpmail-send-it) mu4e-column-faces(with-eval-after-load 'mu4e (mu4e-column-faces-mode)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-alert"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的教程。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval (* 15 60) mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (defun my/mail-start () (mu4e 'background)) (add-hook 'after-init-hook 'my/mail-start) mu4e headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars t) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) mu4e bookmarks (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) mu4e-alert(with-eval-after-load 'mu4e (require 'mu4e-alert) ;; (mu4e-alert-set-default-style 'notifier) (add-hook 'after-init-hook #'mu4e-alert-enable-notifications) (add-to-list 'awesome-tray-active-modules \"mail\")) sent mail(setq message-send-mail-function 'smtpmail-send-it) mu4e-column-faces(with-eval-after-load 'mu4e (mu4e-column-faces-mode)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#sent-mail"},{"categories":null,"content":"Email我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的教程。 mu4e(unless (fboundp 'mu4e) (autoload #'mu4e \"mu4e\" nil t)) (setq mu4e-mu-binary (executable-find \"mu\") mu4e-get-mail-command (concat (executable-find \"mbsync\") \" -a\")) (setq mu4e-maildir \"~/.maildir\" mu4e-attachment-dir \"~/Downloads/\") (setq mail-user-agent 'mu4e-user-agent mu4e-update-interval (* 15 60) mu4e-index-update-in-background t mu4e-index-update-error-warning t mu4e-view-show-images t mu4e-view-image-max-width 800 mu4e-confirm-quit nil mu4e-view-show-addresses t mu4e-index-update-error-warning nil mu4e-index-cleanup t mu4e-context-policy 'pick-first mu4e-compose-reply-ignore-address '(\"no-?reply\" \"duan_n@outlook.com\")) (with-eval-after-load 'mu4e (setq mu4e-sent-folder \"/outlook/Sent\" mu4e-drafts-folder \"/outlook/Drafts\" mu4e-trash-folder \"/outlook/Deleted\" mu4e-refile-folder \"/outlook/Archive\")) (defun my/mail-start () (mu4e 'background)) (add-hook 'after-init-hook 'my/mail-start) mu4e headers Replace fancy icon with all-the-icons。原来的 icon 看起来丑。 (setq mu4e-headers-precise-alignment t) (setq mu4e-headers-include-related t) (setq mu4e-headers-auto-update t) (setq mu4e-headers-date-format \"%d/%m/%y\") (setq mu4e-headers-time-format \"%H:%M\") (setq mu4e-headers-fields '((:flags . 12) (:human-date . 9) (:subject . 90) (:from-or-to . 40) (:tags . 20))) (setq mu4e-use-fancy-chars t) (setq mu4e-headers-seen-mark `(\"S\" . ,(propertize (all-the-icons-material \"mail_outline\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-new-mark `(\"N\" . ,(propertize (all-the-icons-material \"markunread\") 'face `(:family ,(all-the-icons-material-family) :foreground ,(face-background 'default)))) mu4e-headers-unread-mark `(\"u\" . ,(propertize (all-the-icons-material \"notifications_none\") 'face 'mu4e-unread-face)) mu4e-headers-signed-mark `(\"s\" . ,(propertize (all-the-icons-material \"check\") 'face `(:family ,(all-the-icons-material-family) :foreground \"DarkCyan\"))) mu4e-headers-encrypted-mark `(\"x\" . ,(propertize (all-the-icons-material \"enhanced_encryption\") 'face `(:family ,(all-the-icons-material-family) :foreground \"CornflowerBlue\"))) mu4e-headers-draft-mark `(\"D\" . ,(propertize (all-the-icons-material \"drafts\") 'face 'mu4e-draft-face)) mu4e-headers-attach-mark `(\"a\" . ,(propertize (all-the-icons-material \"attachment\") 'face 'mu4e-attach-number-face)) mu4e-headers-passed-mark `(\"P\" . ,(propertize ; ❯ (I'm participated in thread) (all-the-icons-material \"center_focus_weak\") 'face `(:family ,(all-the-icons-material-family) :foreground \"yellow\"))) mu4e-headers-flagged-mark `(\"F\" . ,(propertize (all-the-icons-material \"flag\") 'face 'mu4e-flagged-face)) mu4e-headers-replied-mark `(\"R\" . ,(propertize (all-the-icons-material \"reply_all\") 'face 'mu4e-replied-face)) mu4e-headers-trashed-mark `(\"T\" . ,(propertize (all-the-icons-material \"delete_forever\") 'face 'mu4e-trashed-face))) mu4e bookmarks (setq mu4e-bookmarks '((\"flag:unread AND NOT flag:trashed\" \"Unread messages\" ?u) (\"date:today..now\" \"Today's messages\" ?t) (\"date:7d..now\" \"Last 7 days\" ?w) (\"date:1d..now AND NOT list:emacs-orgmode.gnu.org\" \"Last 1 days\" ?o) (\"date:1d..now AND list:emacs-orgmode.gnu.org\" \"Last 1 days (org mode)\" ?m) (\"maildir:/drafts\" \"drafts\" ?d) (\"flag:flagged AND NOT flag:trashed\" \"flagged\" ?f) (\"mime:image/*\" \"Messages with images\" ?p))) mu4e-alert(with-eval-after-load 'mu4e (require 'mu4e-alert) ;; (mu4e-alert-set-default-style 'notifier) (add-hook 'after-init-hook #'mu4e-alert-enable-notifications) (add-to-list 'awesome-tray-active-modules \"mail\")) sent mail(setq message-send-mail-function 'smtpmail-send-it) mu4e-column-faces(with-eval-after-load 'mu4e (mu4e-column-faces-mode)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:5","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#mu4e-column-faces"},{"categories":null,"content":"Map osm(setq osm-server 'default) (setq osm-tile-directory (expand-file-name \"osm\" my-cache-directory)) (setq osm-home '(31.93 118.80 3)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:6","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#map-osm"},{"categories":null,"content":"Telegaram非官方的 telegram 客户端。 (setq telega-server-libs-prefix \"~/td/tdlib\") (setq telega-proxies (list '(:server \"127.0.0.1\" :port 7891 :enable t :type (:@type \"proxyTypeSocks5\")))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:7","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#telegaram"},{"categories":null,"content":"Proxy(defun proxy-socks-show () \"Show SOCKS proxy.\" (interactive) (when (fboundp 'cadddr) (if (bound-and-true-p socks-noproxy) (message \"Current SOCKS%d proxy is %s:%d\" (cadddr socks-server) (cadr socks-server) (caddr socks-server)) (message \"No SOCKS proxy\")))) (defun proxy-socks-enable () \"Enable SOCKS proxy.\" (interactive) (require 'socks) (setq url-gateway-method 'socks socks-noproxy '(\"localhost\") socks-server '(\"Default server\" \"127.0.0.1\" 7890 5)) (setenv \"all_proxy\" \"socks5://127.0.0.1:7890\") (proxy-socks-show)) (defun proxy-socks-disable () \"Disable SOCKS proxy.\" (interactive) (require 'socks) (setq url-gateway-method 'native socks-noproxy nil) (setenv \"all_proxy\" \"\") (proxy-socks-show)) (defun proxy-socks-toggle () \"Toggle SOCKS proxy.\" (interactive) (require 'socks) (if (bound-and-true-p socks-noproxy) (proxy-socks-disable) (proxy-socks-enable))) (add-hook 'on-first-buffer-hook #'proxy-socks-enable) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:8","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#proxy"},{"categories":null,"content":"BenchmarkEmacs Can DO More 启动时间约 0.10s 。 (message \"Emacs Can DO More: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:9:9","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Emacs Keybindings(setq my/section-start-time (current-time)) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:0","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#emacs-keybindings"},{"categories":null,"content":"Keyfreq(setq keyfreq-file (expand-file-name \".emacs.keyfreq\" my-cache-directory)) (setq keyfreq-excluded-commands '(self-insert-command forward-char backward-char previous-line next-line)) (add-hook 'on-first-input-hook 'keyfreq-mode) (add-hook 'on-first-input-hook 'keyfreq-autosave-mode) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:1","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#keyfreq"},{"categories":null,"content":"MeowMeow 是 Emacs 中的一个模式编辑插件。另一个很火的插件是 Evil 。我选择使用的是 meow ，和 Emacs 的结合使用更紧密。使用 Evil 需要为不同的 major mode 绑定不同的按键，而 meow 可以使用各 major mode 默认的按键。原生的 Emacs 按键需要同时按下多个键以执行某个命令，Emacs 借鉴了 god-mode 中的方法，使得需要同时按的键可以按顺序按，这大大减小对于手指的伤害。 不然怎么说使用 Emacs 的人都是折了小指的天使，现在有了 meow ，再也不会出现肌鞘炎的问题了。 Meow is yet another modal editing mode for Emacs. meow-setup使用不用的键盘布局，需要使用不用的 meow-setup ，这个在 meow 的 github 主页中察看。 我很想知道的是使不同的的键盘布局对于按键的效率，便捷性有多大的影响，但是为了适应不同的按键布局需要投入很多的时间，是否合适又是另外的一个话题了。 (defun meow-setup () (meow-motion-overwrite-define-key '(\"j\" . meow-next) '(\"k\" . meow-prev)) (meow-leader-define-key ;; SPC j/k will run the original command in MOTION state. '(\"j\" . \"H-j\") '(\"k\" . \"H-k\") ;; Use SPC (0-9) for digit arguments. '(\"1\" . meow-digit-argument) '(\"2\" . meow-digit-argument) '(\"3\" . meow-digit-argument) '(\"4\" . meow-digit-argument) '(\"5\" . meow-digit-argument) '(\"6\" . meow-digit-argument) '(\"7\" . meow-digit-argument) '(\"8\" . meow-digit-argument) '(\"9\" . meow-digit-argument) '(\"0\" . meow-digit-argument) ;; '(\"/\" . meow-keypad-describe-key) '(\"?\" . meow-cheatsheet)) (meow-normal-define-key '(\"0\" . meow-expand-0) '(\"9\" . meow-expand-9) '(\"8\" . meow-expand-8) '(\"7\" . meow-expand-7) '(\"6\" . meow-expand-6) '(\"5\" . meow-expand-5) '(\"4\" . meow-expand-4) '(\"3\" . meow-expand-3) '(\"2\" . meow-expand-2) '(\"1\" . meow-expand-1) '(\"-\" . negative-argument) '(\";\" . meow-reverse) '(\",\" . meow-inner-of-thing) '(\".\" . meow-bounds-of-thing) '(\"[\" . meow-beginning-of-thing) '(\"]\" . meow-end-of-thing) '(\"a\" . meow-append) '(\"A\" . meow-open-below) '(\"b\" . meow-back-word) '(\"B\" . meow-back-symbol) '(\"c\" . meow-change) '(\"d\" . meow-delete) '(\"D\" . meow-backward-delete) '(\"e\" . meow-next-word) '(\"E\" . meow-next-symbol) '(\"f\" . meow-find) '(\"g\" . meow-cancel-selection) '(\"G\" . meow-grab) '(\"h\" . meow-left) '(\"H\" . meow-left-expand) '(\"i\" . meow-insert) '(\"I\" . meow-open-above) '(\"j\" . meow-next) '(\"J\" . meow-next-expand) '(\"k\" . meow-prev) '(\"K\" . meow-prev-expand) '(\"l\" . meow-right) '(\"L\" . meow-right-expand) '(\"m\" . meow-join) '(\"n\" . meow-search) '(\"o\" . meow-block) '(\"O\" . meow-to-block) '(\"p\" . meow-yank) '(\"q\" . meow-quit) '(\"Q\" . meow-goto-line) '(\"r\" . meow-replace) '(\"R\" . meow-swap-grab) '(\"s\" . meow-kill) '(\"t\" . meow-till) '(\"u\" . undo) '(\"U\" . undo-redo) ;; '(\"u\" . meow-undo) ;; '(\"U\" . meow-undo-in-selection) '(\"v\" . meow-visit) '(\"w\" . meow-mark-word) '(\"W\" . meow-mark-symbol) '(\"x\" . meow-line) '(\"X\" . meow-goto-line) '(\"y\" . meow-save) '(\"Y\" . meow-sync-grab) '(\"z\" . meow-pop-selection) '(\"'\" . repeat) '(\"\u003cescape\u003e\" . mode-line-other-buffer))) (add-hook 'after-init-hook 'meow-setup) meow-mode-stateMeow 中可以在不同的 major mode 中启用不同的状态。 (meow-global-mode) (setq meow-use-clipboard t) (add-to-list 'meow-mode-state-list '(netease-cloud-music-mode . motion)) (add-to-list 'meow-mode-state-list '(osx-dictionary-mode . motion)) (add-to-list 'meow-mode-state-list '(stock-tracker-mode . motion)) (add-to-list 'meow-mode-state-list '(elfeed-show-mode . normal)) (add-to-list 'meow-mode-state-list '(elfeed-summary-mode . motion)) (add-to-list 'meow-mode-state-list '(helpful-mode . normal)) (add-to-list 'meow-mode-state-list '(calibredb-search-mode . motion)) (add-to-list 'meow-mode-state-list '(Info-mode-hook . motion)) ;; (advice-add 'org-edit-special :after 'meow-insert) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#meow"},{"categories":null,"content":"MeowMeow 是 Emacs 中的一个模式编辑插件。另一个很火的插件是 Evil 。我选择使用的是 meow ，和 Emacs 的结合使用更紧密。使用 Evil 需要为不同的 major mode 绑定不同的按键，而 meow 可以使用各 major mode 默认的按键。原生的 Emacs 按键需要同时按下多个键以执行某个命令，Emacs 借鉴了 god-mode 中的方法，使得需要同时按的键可以按顺序按，这大大减小对于手指的伤害。 不然怎么说使用 Emacs 的人都是折了小指的天使，现在有了 meow ，再也不会出现肌鞘炎的问题了。 Meow is yet another modal editing mode for Emacs. meow-setup使用不用的键盘布局，需要使用不用的 meow-setup ，这个在 meow 的 github 主页中察看。 我很想知道的是使不同的的键盘布局对于按键的效率，便捷性有多大的影响，但是为了适应不同的按键布局需要投入很多的时间，是否合适又是另外的一个话题了。 (defun meow-setup () (meow-motion-overwrite-define-key '(\"j\" . meow-next) '(\"k\" . meow-prev)) (meow-leader-define-key ;; SPC j/k will run the original command in MOTION state. '(\"j\" . \"H-j\") '(\"k\" . \"H-k\") ;; Use SPC (0-9) for digit arguments. '(\"1\" . meow-digit-argument) '(\"2\" . meow-digit-argument) '(\"3\" . meow-digit-argument) '(\"4\" . meow-digit-argument) '(\"5\" . meow-digit-argument) '(\"6\" . meow-digit-argument) '(\"7\" . meow-digit-argument) '(\"8\" . meow-digit-argument) '(\"9\" . meow-digit-argument) '(\"0\" . meow-digit-argument) ;; '(\"/\" . meow-keypad-describe-key) '(\"?\" . meow-cheatsheet)) (meow-normal-define-key '(\"0\" . meow-expand-0) '(\"9\" . meow-expand-9) '(\"8\" . meow-expand-8) '(\"7\" . meow-expand-7) '(\"6\" . meow-expand-6) '(\"5\" . meow-expand-5) '(\"4\" . meow-expand-4) '(\"3\" . meow-expand-3) '(\"2\" . meow-expand-2) '(\"1\" . meow-expand-1) '(\"-\" . negative-argument) '(\";\" . meow-reverse) '(\",\" . meow-inner-of-thing) '(\".\" . meow-bounds-of-thing) '(\"[\" . meow-beginning-of-thing) '(\"]\" . meow-end-of-thing) '(\"a\" . meow-append) '(\"A\" . meow-open-below) '(\"b\" . meow-back-word) '(\"B\" . meow-back-symbol) '(\"c\" . meow-change) '(\"d\" . meow-delete) '(\"D\" . meow-backward-delete) '(\"e\" . meow-next-word) '(\"E\" . meow-next-symbol) '(\"f\" . meow-find) '(\"g\" . meow-cancel-selection) '(\"G\" . meow-grab) '(\"h\" . meow-left) '(\"H\" . meow-left-expand) '(\"i\" . meow-insert) '(\"I\" . meow-open-above) '(\"j\" . meow-next) '(\"J\" . meow-next-expand) '(\"k\" . meow-prev) '(\"K\" . meow-prev-expand) '(\"l\" . meow-right) '(\"L\" . meow-right-expand) '(\"m\" . meow-join) '(\"n\" . meow-search) '(\"o\" . meow-block) '(\"O\" . meow-to-block) '(\"p\" . meow-yank) '(\"q\" . meow-quit) '(\"Q\" . meow-goto-line) '(\"r\" . meow-replace) '(\"R\" . meow-swap-grab) '(\"s\" . meow-kill) '(\"t\" . meow-till) '(\"u\" . undo) '(\"U\" . undo-redo) ;; '(\"u\" . meow-undo) ;; '(\"U\" . meow-undo-in-selection) '(\"v\" . meow-visit) '(\"w\" . meow-mark-word) '(\"W\" . meow-mark-symbol) '(\"x\" . meow-line) '(\"X\" . meow-goto-line) '(\"y\" . meow-save) '(\"Y\" . meow-sync-grab) '(\"z\" . meow-pop-selection) '(\"'\" . repeat) '(\"\" . mode-line-other-buffer))) (add-hook 'after-init-hook 'meow-setup) meow-mode-stateMeow 中可以在不同的 major mode 中启用不同的状态。 (meow-global-mode) (setq meow-use-clipboard t) (add-to-list 'meow-mode-state-list '(netease-cloud-music-mode . motion)) (add-to-list 'meow-mode-state-list '(osx-dictionary-mode . motion)) (add-to-list 'meow-mode-state-list '(stock-tracker-mode . motion)) (add-to-list 'meow-mode-state-list '(elfeed-show-mode . normal)) (add-to-list 'meow-mode-state-list '(elfeed-summary-mode . motion)) (add-to-list 'meow-mode-state-list '(helpful-mode . normal)) (add-to-list 'meow-mode-state-list '(calibredb-search-mode . motion)) (add-to-list 'meow-mode-state-list '(Info-mode-hook . motion)) ;; (advice-add 'org-edit-special :after 'meow-insert) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#meow-setup"},{"categories":null,"content":"MeowMeow 是 Emacs 中的一个模式编辑插件。另一个很火的插件是 Evil 。我选择使用的是 meow ，和 Emacs 的结合使用更紧密。使用 Evil 需要为不同的 major mode 绑定不同的按键，而 meow 可以使用各 major mode 默认的按键。原生的 Emacs 按键需要同时按下多个键以执行某个命令，Emacs 借鉴了 god-mode 中的方法，使得需要同时按的键可以按顺序按，这大大减小对于手指的伤害。 不然怎么说使用 Emacs 的人都是折了小指的天使，现在有了 meow ，再也不会出现肌鞘炎的问题了。 Meow is yet another modal editing mode for Emacs. meow-setup使用不用的键盘布局，需要使用不用的 meow-setup ，这个在 meow 的 github 主页中察看。 我很想知道的是使不同的的键盘布局对于按键的效率，便捷性有多大的影响，但是为了适应不同的按键布局需要投入很多的时间，是否合适又是另外的一个话题了。 (defun meow-setup () (meow-motion-overwrite-define-key '(\"j\" . meow-next) '(\"k\" . meow-prev)) (meow-leader-define-key ;; SPC j/k will run the original command in MOTION state. '(\"j\" . \"H-j\") '(\"k\" . \"H-k\") ;; Use SPC (0-9) for digit arguments. '(\"1\" . meow-digit-argument) '(\"2\" . meow-digit-argument) '(\"3\" . meow-digit-argument) '(\"4\" . meow-digit-argument) '(\"5\" . meow-digit-argument) '(\"6\" . meow-digit-argument) '(\"7\" . meow-digit-argument) '(\"8\" . meow-digit-argument) '(\"9\" . meow-digit-argument) '(\"0\" . meow-digit-argument) ;; '(\"/\" . meow-keypad-describe-key) '(\"?\" . meow-cheatsheet)) (meow-normal-define-key '(\"0\" . meow-expand-0) '(\"9\" . meow-expand-9) '(\"8\" . meow-expand-8) '(\"7\" . meow-expand-7) '(\"6\" . meow-expand-6) '(\"5\" . meow-expand-5) '(\"4\" . meow-expand-4) '(\"3\" . meow-expand-3) '(\"2\" . meow-expand-2) '(\"1\" . meow-expand-1) '(\"-\" . negative-argument) '(\";\" . meow-reverse) '(\",\" . meow-inner-of-thing) '(\".\" . meow-bounds-of-thing) '(\"[\" . meow-beginning-of-thing) '(\"]\" . meow-end-of-thing) '(\"a\" . meow-append) '(\"A\" . meow-open-below) '(\"b\" . meow-back-word) '(\"B\" . meow-back-symbol) '(\"c\" . meow-change) '(\"d\" . meow-delete) '(\"D\" . meow-backward-delete) '(\"e\" . meow-next-word) '(\"E\" . meow-next-symbol) '(\"f\" . meow-find) '(\"g\" . meow-cancel-selection) '(\"G\" . meow-grab) '(\"h\" . meow-left) '(\"H\" . meow-left-expand) '(\"i\" . meow-insert) '(\"I\" . meow-open-above) '(\"j\" . meow-next) '(\"J\" . meow-next-expand) '(\"k\" . meow-prev) '(\"K\" . meow-prev-expand) '(\"l\" . meow-right) '(\"L\" . meow-right-expand) '(\"m\" . meow-join) '(\"n\" . meow-search) '(\"o\" . meow-block) '(\"O\" . meow-to-block) '(\"p\" . meow-yank) '(\"q\" . meow-quit) '(\"Q\" . meow-goto-line) '(\"r\" . meow-replace) '(\"R\" . meow-swap-grab) '(\"s\" . meow-kill) '(\"t\" . meow-till) '(\"u\" . undo) '(\"U\" . undo-redo) ;; '(\"u\" . meow-undo) ;; '(\"U\" . meow-undo-in-selection) '(\"v\" . meow-visit) '(\"w\" . meow-mark-word) '(\"W\" . meow-mark-symbol) '(\"x\" . meow-line) '(\"X\" . meow-goto-line) '(\"y\" . meow-save) '(\"Y\" . meow-sync-grab) '(\"z\" . meow-pop-selection) '(\"'\" . repeat) '(\"\" . mode-line-other-buffer))) (add-hook 'after-init-hook 'meow-setup) meow-mode-stateMeow 中可以在不同的 major mode 中启用不同的状态。 (meow-global-mode) (setq meow-use-clipboard t) (add-to-list 'meow-mode-state-list '(netease-cloud-music-mode . motion)) (add-to-list 'meow-mode-state-list '(osx-dictionary-mode . motion)) (add-to-list 'meow-mode-state-list '(stock-tracker-mode . motion)) (add-to-list 'meow-mode-state-list '(elfeed-show-mode . normal)) (add-to-list 'meow-mode-state-list '(elfeed-summary-mode . motion)) (add-to-list 'meow-mode-state-list '(helpful-mode . normal)) (add-to-list 'meow-mode-state-list '(calibredb-search-mode . motion)) (add-to-list 'meow-mode-state-list '(Info-mode-hook . motion)) ;; (advice-add 'org-edit-special :after 'meow-insert) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:2","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#meow-mode-state"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-and-meow-leader-define-key"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-a-for-org-agenda"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-b-for-bibtex"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-d-for-directory"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-f-for-file"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-o-for-org"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-l-for-language"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-r-for-org-roam"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-w-for-windows"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#key-t-for-tools"},{"categories":null,"content":"one-key and meow-leader-define-key默认不弹出 one-key 的菜单，当不知道的时候，使用 ? 触发。 (require 'one-key) (setq one-key-popup-window nil) meow-leader-define-key 不要绑定 leader 键在 c m g 上，这几个键在 Meow 中被保留。也不要绑定在 k 上，在 magit 中 SPC k 会触发 magit-discard 。 key “a” for org-agenda(meow-leader-define-key '(\"a\" . my/org-agenda)) key “b” for bibtex(one-key-create-menu \"BIBTEX\" '(((\"a\" . \"Actions\") . orb-note-actions) ((\"o\" . \"open\") . consult-bibtex-open-any) ((\"e\" . \"entry\") . consult-bibtex-show-entry) ((\"g\" . \"refresh\") . citar-refresh) ((\"n\" . \"note\") . my/edit-notes) ((\"x\" . \"extract annots\") . my/extract-pdf-annots-to-ref-note)) t) (meow-leader-define-key '(\"b\" . one-key-menu-bibtex)) key “d” for directory(one-key-create-menu \"DIRECTORY\" '(((\"c\" . \"Cloud\") . (lambda () (interactive) (dired \"~/Nextcloud/\"))) ((\"d\" . \"Downloads\") . (lambda () (interactive) (dired \"~/Downloads/\"))) ((\"p\" . \"Pictures\") . (lambda () (interactive) (dired \"~/Pictures/\")))) t) (meow-leader-define-key '(\"d\" . one-key-menu-directory)) key “f” for file(one-key-create-menu \"FILE\" '(((\"f\" . \"FINANCE\") . one-key-menu-beancount) ((\"r\" . \"recent\") . consult-recent-file) ((\"o\" . \"open\") . one-key-menu-specific-file) ((\"e\" . \"External\") . xah-html-open-in-safari)) t) (meow-leader-define-key '(\"f\" . one-key-menu-file)) one-key-menu-specific-file (one-key-create-menu \"SPECIFIC-FILE\" '(((\"b\" . \"Blog file\") . (lambda () (interactive) (find-file \"~/hugo-source/content-org/all-posts.org\"))) ((\"I\" . \"README.org\") . (lambda () (interactive) (find-file (expand-file-name \"README.org\" user-emacs-directory)))) ((\"i\" . \"Inbox\") . (lambda () (interactive) (find-file (expand-file-name \"daily/inbox.org\" my-galaxy)))) ((\"r\" . \"rss\") . (lambda () (interactive) (find-file (expand-file-name \"main/elfeed.org\" my-roam)))) ((\"g\" . \"gtd\") . (lambda () (interactive) (find-file (expand-file-name \"todos/org-gtd-tasks.org\" my-galaxy)))) ((\"a\" . \"alipay\") . (lambda () (interactive) (find-file (expand-file-name \"alipay.bean\" my-finance-year)))) ((\"m\" . \"Beancount main\") . (lambda () (interactive) (find-file (expand-file-name \"main.bean\" my-finance))))) t) key “o” for org(one-key-create-menu \"ORG\" '(((\"c\" . \"Capture\") . one-key-menu-org-capture) ((\"d\" . \"Download\") . one-key-menu-download) ((\"p\" . \"Process\") . one-key-menu-org-property) ((\"P\" . \"Pomodoro\") . org-pomodoro) ((\"l\" . \"cliplink\") . org-cliplink) ((\"i\" . \"Image\") . org-toggle-inline-images) ((\"I\" . \"Image refresh\") . org-redisplay-inline-images) ((\"t\" . \"Transclusion\") . one-key-menu-transclusion)) t) (meow-leader-define-key '(\"o\" . one-key-menu-org)) one-key-menu-org-clock 当 org-mode 被激活后， org-clock 有默认绑定的按键，在 meow 上使用，这些原本需要同时按的按键可以序列化执行，还是很舒服的。困难的是，当长时间没有使用过这个按键后，会忘记默认的按键绑定是什么。 我原本将 org-clock 上的一些按键绑定在了 SPC o c 上，但是目前我的工作流程严重依赖 org-capture ，所以这个位置需要让出来给它。 (one-key-create-menu \"ORG-CLOCK\" '(((\"i\" . \"In\") . org-clock-in) ((\"o\" . \"Out\") . org-clock-out) ((\"g\" . \"goto\") . org-clock-goto) ((\"l\" . \"last\") . org-clock-in-last)) t) one-key-menu-org-property (one-key-create-menu \"ORG-PROPERTY\" '(((\"i\" . \"ID\") . org-id-get-create) ((\"p\" . \"Property\") . org-set-property)) t) one-key-menu-org-download (one-key-create-menu \"DOWNLOAD\" '(((\"c\" . \"clipboard\") . org-download-clipboard) ((\"i\" . \"image\") . org-download-image) ((\"r\" . \"rename\") . org-download-rename-at-point) ((\"s\" . \"screenshot\") . org-download-screenshot)) t) one-key-menu-org-transclusion (one-key-create-menu \"TRANSCLUSION\" '(((\"a\" . \"Add\") . org-transclusion-add) ((\"A\" . \"Add all\") . org-transclusion-add-all) ((\"r\" . \"Remove\") . org-transclusion-remove) ((\"R\" . \"Remove all\") . org-transclusion-remove-all) ((\"g\" . \"Refresh\") . org-transclusion-refresh) ((\"m\" . \"make\") . org-transclusion-make-from-link) ((\"o\" . \"Open\") . org-transclusion-open-source) ((\"e\" . \"Edit\") . org-transclusion-live-sync-start)) t) one-key-menu-org-capture (one-key-create-menu \"ORG-CAPTURE\" '(((\"d\" . \"Diary\") . (lambda () (interactive) (my/org-capture-shortcut \"d\"))) ((\"t\" . \"Today tasks\") . (lambda () (interactive) (my/org-capture-","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:3","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#one-key-for-blog"},{"categories":null,"content":"BenchmarkEmacs Keybindings 启动时间约 0.05s 。 (message \"Emacs Keybindings: %.2fs\" (float-time (time-subtract (current-time) my/section-start-time))) Emacs 总计启动时间约 0.66s (+ 0.13 system time) 。 (let ((init-time (float-time (time-subtract (current-time) my/init-start-time))) (total-time (string-to-number (emacs-init-time \"%f\")))) (message \"Initialization time: %.2fs (+ %.2f system time)\" init-time (- total-time init-time))) ","date":"2022-05-13","objectID":"/posts/emacs-configuration/:10:4","series":null,"tags":["Emacs","Org-mode"],"title":"Jousimies's Personal Emacs Configuration","uri":"/posts/emacs-configuration/#benchmark"},{"categories":null,"content":"Org 转 latex 的自用基本配置，日常使用","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/"},{"categories":null,"content":"Latex 模板虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。 如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。 此配置，是基于 ctex 这个包，利用 xelatex 编译。 我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:1:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#latex-模板"},{"categories":null,"content":"Emacs 配置Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。 小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。 (with-eval-after-load 'ox-latex (setq org-latex-classes nil) (add-to-list 'org-latex-classes '(\"book\" \"\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\chapter{%s}\" . \"\\\\chapter*{%s}\") (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (add-to-list 'org-latex-classes '(\"article\" \"\\\\documentclass{ctexart} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\" (\"\\\\section{%s}\" . \"\\\\section*{%s}\") (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\") (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\") (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\") (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))) (setq org-latex-listings 'minted org-export-latex-listings 'minted) (setq org-latex-pdf-process '(\"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"bibtex -shell-escape %b\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"xelatex -8bit --shell-escape -interaction=nonstopmode -output-directory %o %f\" \"rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\") org-latex-logfiles-extensions '(\"lof\" \"lot\" \"tex~\" \"aux\" \"idx\" \"log\" \"out\" \"toc\" \"nav\" \"snm\" \"vrb\" \"dvi\" \"fdb_latexmk\" \"blg\" \"brf\" \"fls\" \"entoc\" \"ps\" \"spl\" \"bbl\") org-latex-prefer-user-labels t)) ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:2:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#emacs-配置"},{"categories":null,"content":"Org 编译 PDF 的一般流程 导言区内容 一篇 PDF 的样式，取决于此处的设置。日常配置好两个常用的模板即可处理大部分的文档写作工作。目前，我还没有配置 report 类型的模板。有时间的时候，处理一下。 这部分的内容，见第四部分的说明，己包含常用的配置。在 Emacs 中可以将它们组合后，制作成模板，当需要的时候，插入即可，很方便。 yasnippet 和 tempel 这两个包都很好用。 正文具体内容的写作。 内容这部分是一篇文章的主要部分，需要花大量的时间和精力进行。写本文的目的也就将除此之外的部分简化，减少程序性的事务消消耗的精力。 通过 C-c C-e l o 编译 pdf 文件，并打开预览。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:3:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-编译-pdf-的一般流程"},{"categories":null,"content":"Org 文件头部内容配置","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:0","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#org-文件头部内容配置"},{"categories":null,"content":"documentclass Figure 1: documentclass 其中 #+title: 是文章的名字。如果需要不输出 title ，增加下面一行说明，输出 pdf 的时候就不会生成标题。 #+LATEX_CLASS 有默认值，可以见 org-latex-default-class ，默认使用 article 。 #+LATEX_CLASS 还有 article ， book 等，可以查看 org-latex-classes 这个值。 OPTIONS: 中可以指定是否输出目录，日期，作者。 #+LATEX_CLASS_OPTIONS 设置 documentclass 中的可选参数。如 [UTF8,a4paper,12pt] 。其他的参数看手册。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:1","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#documentclass"},{"categories":null,"content":"页面布局 Figure 2: 文档布局 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:2","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页面布局"},{"categories":null,"content":"字体大小和类型 Figure 3: 字体 这个根据需要自己配吧。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:3","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#字体大小和类型"},{"categories":null,"content":"页眉和页脚 Figure 4: 页眉和页脚 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:4","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#页眉和页脚"},{"categories":null,"content":"目录通过 secnumdepth 控制目录的深度，根据需要来设置就好。 Figure 5: 目录 当使用 article 这个样式的时候，目录这两个字不会居中。当使用 book 的时候，会居中。 book 这个样式中有 chapter 这一个控制， chapter 是设置为居中显示的，相应的目录这两个字也是居中显示。 后期研究下，怎么单独设置某一级标题居中显示。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:5","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#目录"},{"categories":null,"content":"标题主要是使用了 titlesec 这个包，设置了 titleformat 和 titlespace 这两个参数，分别控制着标题的样式和标题前后的行间距。不设置这个值的话，当使用 book 这个样式时，行间距会很难看。 titleformat 中可以设置字体的大小和类型。 Figure 6: 标题 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:6","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#标题"},{"categories":null,"content":"图形图形的话，就是使用 graphicx 和 subfigure 这两个包。 Figure 7: 图形 在 org-mode 中我使用 org-download 这个包进行图片的管理，通过 org-download-clipboard 将图片复制到 org 文档中。当需要插入己有图片时，我会使用 org-insert-link 插入 file 类型的文件。 图形环境中 placement 这个参数有五个选项 !htbp ，分别对应的是 here,top,bottom,page of float, 当图形位置不在文本附近时或者你需要强制图形在文本附近，可以加入 ! 来强制实现。一般情况下，使用 htbp 基本上能满足需要了。 当一行只有一张图时，使用 org-download-clipboard 产生的配置如图 \\ref{org-mode 图形配置} 所示： Figure 8: org-mode 图形配置 图中 #+NAME 当需要引用时，可以通过在正文中使用 ref{} 来实现引用。 #+CAPTION 是图片的标签，一般居于图片的下方。 #+ATTR_LATEX 可以控制图片在文章中的大小，单张图设置 :width 8cm 即可。 当一行有两张图时，我会插入模板，如下： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage} } \\centering \\caption{fig:} \\end{figure} 当有四张图时，我会使用下面的配置： \\begin{figure}[htbp] \\centering \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\subfigure[]{ \\begin{minipage}[t]{0.5\\linewidth} \\centering \\includegraphics[width=\\linewidth]{} \\end{minipage}} \\centering \\caption{fig:} \\end{figure} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:7","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图形"},{"categories":null,"content":"图表这里的问题还很大，得好好琢磨一下。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:8","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#图表"},{"categories":null,"content":"数学公式一般有行内公式和行间公式两种。在 org 中的语法很简单，分别使用 $$ 或者 \\[\\]\\ 。 如果需要设置数学字体的话，需要如下配置，见图 \\ref{数学字体配置}： Figure 9: 数学字体配置 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:9","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#数学公式"},{"categories":null,"content":"代码环境Org-mode 中的代码环境可以使用 listings 和 minted 这两种方式。目前使用推荐使用 minted 这种方式，比较新。 minted 需要安装 pygemnts 这个包，终端执行下面的命令。 pip3 install pygments 别外，编译时需要加入 eshell-escape 这个命令参数，见上方 Emacs 中的配置。这个很重要，否则当编译的时候会报错。 ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:10","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#代码环境"},{"categories":null,"content":"参考文献 Figure 10: 参考文献 org 9.5.2 己经内置了 org-cite 。参考文献的格式设置见 cite_export 。我一般使用 chinese-gb7714 这个，具体的文件可以去 zotero 的官网下载。 设置 UNNUMBERED 这个 property ，目录中就会不显示参考文献这个标题，通常也不需要显示。 默认的参考文献间距过大，使用 #+LATEX_HEADER: \\usepackage{bibspacing} 这个文件，此文件用内容是网上抄来的一段代码，具体的内容如下，使用时将下面的内容保存到 bibspacing.sty 中，将该文件放到 /usr/local/texlive/2021/texmf-dist/tex/latex/bibspacing 文件夹中，然后执行 sudo texhash 即可： \\newdimen\\bibindent \\setlength\\bibindent{1.5em} \\newdimen\\bibspacing \\setlength\\bibspacing\\z@ \\renewenvironment{thebibliography}[1]{% \\section*{\\refname \\@mkboth{\\MakeUppercase\\refname}{\\MakeUppercase\\refname}}% \\list{\\@biblabel{\\@arabic\\c@enumiv}}% {\\settowidth\\labelwidth{\\@biblabel{#1}}% \\leftmargin\\labelwidth \\advance\\leftmargin\\labelsep \\itemsep\\z@skip % should this be commented out? \\parsep\\z@skip % should this be commented out? \\@openbib@code \\usecounter{enumiv}% \\let\\p@enumiv\\@empty \\renewcommand\\theenumiv{\\@arabic\\c@enumiv}}% \\sloppy\\clubpenalty4000\\widowpenalty4000% \\sfcode`\\.\\@m} {\\def\\@noitemerr {\\@latex@warning{Empty `thebibliography' environment}}% \\endlist} ","date":"2022-04-25","objectID":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/:4:11","series":null,"tags":["Emacs","Org-mode","LaTeX"],"title":"Emacs 中 org-mode 文档编译 PDF 的基本设置","uri":"/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/#参考文献"},{"categories":null,"content":"统一 workflow ，减少在程序性事务上清耗精力","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/"},{"categories":null,"content":"最近配置了自己的 blog， 目前写 blog 的流程有三种方式： ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:0:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#"},{"categories":null,"content":"写在一个统一的文件中这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。 如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。 虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:1:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#写在一个统一的文件中"},{"categories":null,"content":"使用 easy-hugoeasy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下： (defface easy-hugo-help-face `((((class color) (background light)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#000000\" :background \"#F2F0EF\") (((class color) (background dark)) ,@(and (\u003e= emacs-major-version 27) '(:extend t)) :bold t :foreground \"#FFFFFF\" :background \"#252321\")) \"Definition of help color.\" :group 'easy-hugo-faces) (require 'easy-hugo) (setq easy-hugo-no-help nil easy-hugo-basedir \"~/blog/\" easy-hugo-postdir \"content/posts\" easy-hugo-url \"https://jousimies.github.io/\" easy-hugo-default-ext \".org\" easy-hugo-org-header t) 我使用 easy-hugo 的流程很简单，通过 easy-hugo-new-post 创建新的文章 ，写文章， easy-hugo-magit 提交到仓库。看下图中 easy-hugo 提供了很多人命令，但是使用的很少。 Figure 1: easy-hugo menu ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:2:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#使用-easy-hugo"},{"categories":null,"content":"在 org-roam 笔记系统中进行今天想到我使用 org-roam 管理自己的笔记，那么在本地是否可以结合 org-roam 进行 blog 的写作呢？实践证明是可以的。这篇文章就是在 org-roam 中写的。 这种的优势是，每一篇 post 都是 org-roam 中的一个 node ；结合 org-roam 的方式使得自己对于写作的 workflow 更统一。 相对第一种写在 all-posts.org 中的这种创作方式，不再每次写都要先打开 all-posts 这个文档，在其中创建新的结点，直接使用 org-roam-node-find 创建新的结点写 post 即可。 post 和其他笔记之间的区别仅在于我是否选择将其 export 到 blog 这个项目文件中。相对于第二种使用 easy-hugo 的方式，可以更大化的利用 org-roam 这个包的基础功能。 easy-hugo 中毕竟就使用了两个命令而己，完全可以被 org-roam 替代。 使用 easy-hugo 如果选择 org 作为文档的格式，那么不会将文档转换成 md 文档。使用 all-posts.org 或者是 org-roam 中的节点都可以将 org 文档转换成 md 文件。虽然 hugo 支持解析 org 文档，但是我看对 md 的解析更快一些。那么使用 org-roam 管理自己的 posts 看起来就有了优势。 一个统一的流程，可以显著减少自己在无关程序性的事务上清耗的精力。 Org-roam 中关于图片的管理也很方便，当 export 到 blog 用项目仓库时，图片会自动 export 到 hugo-source 项目仓库中的 staic/ox-hugo 文件夹中。不用使用 easy-hugo-put-image 这个功能。 ","date":"2022-04-25","objectID":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/:3:0","series":null,"tags":["Emacs","Hugo","Org-roam"],"title":"hugo 结合 org-roam 写 blog","uri":"/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/#在-org-roam-笔记系统中进行"}]