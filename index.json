[{"content":"Interface Show   Introduction  The Borg assimilate Emacs packages as Git submodules.\n 我使用 borg 进行 Emacs 包的管理，详细的使用见 borg 官方手册。\n使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 左右（ Arch Emacs 27.2 ）。\n使用 org-mode 对 Emacs 的配置文件进行管理（见文学编程）， org-auto-tangle 自动将配置文件 tangle 到 init.el 文件中。默认会解析到 init.el 文件中，如果有不想解析或解析到其他文件的，在 src block 中加上 :tangle no 或 :tangle other.el 。\n一个 init.el 文件，不需要分离配置，管理起来，没什么 STRESS.\nWhy Emacs 对于一个非专业的程序员，使用此文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME 。\nEmacs 具有强大的生态，可以进行文件管理，财务管理，事务管理，邮件管理，还可以用来听音乐，看视频。\nAbout other note taking software 我使用过的笔记软件有很多，在遇到 Emacs 前，尝试过的有 PKM 软件， Mediawiki ， Tiddly wiki ， Onenote ，印象笔记，蚂蚁笔记， Simplenote ， Joplin 等等。当然也尝试过 markdown 。\n我为什么不使用类似 onenote ，印象笔记等软件？\nOnenote 是私有格式，意味着当我需要夸平台时，其专有格式会给我带来麻烦。印象笔记也是如此，而且印象笔记的付费一言难尽。以上尝试的软件都没能长久使用，或多或少的存在痛点。\n更重要的是不符合我关于笔记是 ​本地可控，纯文本​ 的需求。\nAcknowledgements  If I have seen further, it is by standing on the shoulders of giants. \u0026mdash;- Sir Isaac Newton\n 谢谢以下配置的作者，从他们那学到了很多关于 Emacs 的知识。排名不分先后。\n https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html  Rudimentary configuration Make this file run (slightly) faster with lexical binding (see Blog).\n;; init.el --- My personal emacs configuration -*- lexical-binding: t; -*- Early Init ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; NOTE: early-init.el is now generated from readme.org. Please edit that file instead  ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum  gc-cons-percentage 0.6)  ;; In Emacs 27+, package initialization occurs before `user-init-file\u0026#39; is ;; loaded, but after `early-init-file\u0026#39;. Doom handles package initialization, so ;; we must prevent Emacs from doing it early! (setq package-enable-at-startup nil) ;; Do not allow loading from the package cache (same reason). (setq package-quickstart nil)  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (setq inhibit-startup-message t) (setq inhibit-splash-screen t)  (push \u0026#39;(menu-bar-lines . 0) default-frame-alist) (push \u0026#39;(tool-bar-lines . 0) default-frame-alist) (push \u0026#39;(vertical-scroll-bars) default-frame-alist)  ;; Resizing the Emacs frame can be a terribly expensive part of changing the ;; font. By inhibiting this, we easily halve startup times with fonts that are ;; larger than the system default. (setq frame-inhibit-implied-resize t) (setq inhibit-compacting-font-caches t)  (setq use-file-dialog nil)  ;; Make the initial buffer load faster by setting its mode to fundamental-mode ;; (setq initial-major-mode \u0026#39;fundamental-mode)  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are ;; compiled ahead-of-time when they are installed and site files are compiled ;; when gccemacs is installed. (setq comp-deferred-compilation nil)  ;; Disable mode-line, It\u0026#39;s uglily after theme changed ;; (setq-default mode-line-format nil)  ;;; early-init.el ends here Borg - Package manage Update:2022-03-06. 目前我使用 borg 和 leaf 管现我的 Emacs 配置文件， borg 很好的替代了 git submodule ，不用终端直接进行 Emacs 包的管理。 leaf 目前是作为 use-package 的替代品使用，其他的还有 setup.el ，但是目前没有深入的去探索。\nUpdate:2022-03-07 能否剥离 leaf ？目前己全删除 leaf 相关包.\n(add-to-list \u0026#39;load-path (expand-file-name \u0026#34;packages/borg\u0026#34; user-emacs-directory)) (eval-and-compile  (require \u0026#39;borg)  (borg-initialize)) Start and close emacs Speedup 该配置来自 Centaur Emacs ，可以有效减少 Emacs 的启动时间，约 0.5s 。\n(setq auto-mode-case-fold nil)  (unless (or (daemonp) noninteractive)  (let ((old-file-name-handler-alist file-name-handler-alist))  ;; If `file-name-handler-alist\u0026#39; is nil, no 256 colors in TUI  ;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839  (setq file-name-handler-alist \t(unless (display-graphic-p) \t\u0026#39;((\u0026#34;\\\\(?:\\\\.tzst\\\\|\\\\.zst\\\\|\\\\.dz\\\\|\\\\.txz\\\\|\\\\.xz\\\\|\\\\.lzma\\\\|\\\\.lz\\\\|\\\\.g?z\\\\|\\\\.\\\\(?:tgz\\\\|svgz\\\\|sifz\\\\)\\\\|\\\\.tbz2?\\\\|\\\\.bz2\\\\|\\\\.Z\\\\)\\\\(?:~\\\\|\\\\.~[-[:alnum:]:#@^._]+\\\\(?:~[[:digit:]]+\\\\)?~\\\\)?\\\\\u0026#39;\u0026#34; . jka-compr-handler))))  (add-hook \u0026#39;emacs-startup-hook \t(lambda () \t\u0026#34;Recover file name handlers.\u0026#34; \t(setq file-name-handler-alist \t(delete-dups (append file-name-handler-alist \told-file-name-handler-alist)))))))  (setq gc-cons-threshold most-positive-fixnum  gc-cons-percentage 0.5)  (add-hook \u0026#39;emacs-startup-hook \t(lambda () \t\u0026#34;Recover GC values after startup.\u0026#34; \t(setq gc-cons-threshold 800000 \tgc-cons-percentage 0.1))) gcmh (gcmh-mode) restart-emacs Never exit Emacs ！！！\n防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。\n(global-set-key (kbd \u0026#34;C-x C-c\u0026#34;) \u0026#39;restart-emacs) Personal information (setq user-full-name \u0026#34;DN\u0026#34;  user-mail-address \u0026#34;duan_n@outlook.com\u0026#34;) (setq auth-sources \u0026#39;(\u0026#34;~/.authinfo\u0026#34;)) ;; auth-source-cache-expiry nil) ;; (setq auth-sources \u0026#39;(macos-keychain-generic)) ;; (setq auth-sources (quote (macos-keychain-internet macos-keychain-generic))) (setq epa-pinentry-mode \u0026#39;loopback)  (pinentry-start) Variables 自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。\nfolder (defvar dn-cloud \u0026#34;~/Nextcloud\u0026#34;  \u0026#34;This folder is My cloud.\u0026#34;)  (defvar dn-galaxy (expand-file-name \u0026#34;L.Personal.Galaxy\u0026#34; dn-cloud)  \u0026#34;This folder stores all the plain text files of my life.\u0026#34;)  (defvar dn-roam (expand-file-name \u0026#34;roam\u0026#34; dn-galaxy)  \u0026#34;This is the org-roam folder.\u0026#34;)  (defvar dn-finance (expand-file-name \u0026#34;finance\u0026#34; dn-galaxy)  \u0026#34;This folder stores all my finance files.\u0026#34;)  (defvar dn-finance-year (expand-file-name (format-time-string \u0026#34;%Y\u0026#34;) dn-finance)  \u0026#34;This folder stores all my finance files of current year.\u0026#34;)  (defvar dn-pdf-storage (expand-file-name \u0026#34;storage/pdf\u0026#34; dn-galaxy)  \u0026#34;This folder stores all the pdf files.\u0026#34;)  (defvar dn-cache-directory \u0026#34;~/.cache/emacs\u0026#34;  \u0026#34;This folder stores all EMACS cache file.\u0026#34;)  (defvar dn-template-directory (expand-file-name \u0026#34;template\u0026#34; (file-truename user-emacs-directory)))  (defvar default-search-engine-url \u0026#39;(\u0026#34;Google\u0026#34; \u0026#34;www.google.com\u0026#34;)) system type (defvar sys-linux  (and (eq system-type \u0026#39;gnu/linux) (null (getenv \u0026#34;ANDROID_ROOT\u0026#34;)))  \u0026#34;GNU Emacs is running on Linux, not termux.\u0026#34;)  (defvar sys-winp  (eq system-type \u0026#39;windows-nt)  \u0026#34;Are we running on a WinTel system?\u0026#34;)  (defvar sys-macp  (eq system-type \u0026#39;darwin)  \u0026#34;Are we running on a mac system\u0026#34;)  (defvar sys-wslp  (and (eq system-type \u0026#39;gnu/linux)  (string-match \u0026#34;-[Mm]icrosoft\u0026#34; operating-system-release))  \u0026#34;Are we running on a GNU/Linux system?\u0026#34;)  (defvar sys-termuxp  (and (eq system-type \u0026#39;gnu/linux) (not (null (getenv \u0026#34;ANDROID_ROOT\u0026#34;))))  \u0026#34;GNU Emacs is running on Termux, not Linux system.\u0026#34;) Better defaults (if (boundp \u0026#39;use-short-answers)  (setq use-short-answers t)  (advice-add \u0026#39;yes-or-no-p :override #\u0026#39;y-or-n-p))  (setq help-window-select t)  (setq ring-bell-function \u0026#39;ignore)  ;; Do not saves duplicates in kill-ring (customize-set-variable \u0026#39;kill-do-not-save-duplicates t) system code type (prefer-coding-system \u0026#39;utf-8) (set-default-coding-systems \u0026#39;utf-8) (set-terminal-coding-system \u0026#39;utf-8) (set-keyboard-coding-system \u0026#39;utf-8) dialog box Never popup dialog box.\n(setq use-dialog-box nil) define-fringe-bitmap Word wrap at window edge, hide the right and left curly arrow. So ugly.\n(define-fringe-bitmap \u0026#39;right-curly-arrow []) (define-fringe-bitmap \u0026#39;left-curly-arrow []) hide mouse Builtin function. Hide mouse when type.\n(mouse-avoidance-mode \u0026#39;banish) builtin modes Emacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 Emacs builtin modes 功能介绍。\n  paren\n(setq show-paren-style \u0026#39;mixed  show-paren-when-point-inside-paren t  show-paren-when-point-in-periphery t)  (show-paren-mode)     elec-pair\n(electric-pair-mode)     linum\n(setq display-line-numbers t)  (add-hook \u0026#39;prog-mode-hook \u0026#39;display-line-numbers-mode)     simple\n;; (eval-expression-print-length) ;; (eval-expression-print-level) (add-hook \u0026#39;after-init-hook (lambda () \t(line-number-mode) \t(column-number-mode) \t(size-indication-mode)))     bookmark\n(setq bookmark-default-file (expand-file-name \u0026#34;storage/bookmarks\u0026#34; dn-galaxy))     autorevert\n(global-auto-revert-mode)     subword\n(global-subword-mode)     winner\n(setq winner-dont-bind-my-keys nil)  (winner-mode)     server\nAccording to this blog, use server-process instead of server-ruanning-p 。\n(unless (bound-and-true-p server-process)  (server-start))     prettify-symbols-mode\n(setq prettify-symbols-alist \u0026#39;((\u0026#34;lambda\u0026#34; . ?λ) \t(\u0026#34;function\u0026#34; . ?𝑓)))  (add-hook \u0026#39;prog-mode-hook \u0026#39;prettify-symbols-mode)     so-long\n(global-so-long-mode)     delsel\n(delete-selection-mode)     webjump\n基本用不上，我使用 google-this 这个包。\n(setq webjump-sites \u0026#39;((\u0026#34;Emacs China\u0026#34; . \u0026#34;https://emacs-china.org\u0026#34;)  \t(\u0026#34;DuckDuckGo\u0026#34; . [simple-query \u0026#34;duckduckgo.com\u0026#34; \t\u0026#34;duckduckgo.com/?q=\u0026#34; \u0026#34;\u0026#34;])  \t(\u0026#34;Douban read\u0026#34; . [simple-query \u0026#34;https://search.douban.com\u0026#34; \t\u0026#34;https://search.douban.com/book/subject_search?search_text=\u0026#34; \u0026#34;\u0026#34;])  \t(\u0026#34;Google\u0026#34; . [simple-query \u0026#34;https://www.google.com\u0026#34; \t\u0026#34;https://www.google.com/search?q=\u0026#34; \u0026#34;\u0026#34;])  \t(\u0026#34;Baidu\u0026#34; . [simple-query \u0026#34;https://www.baidu.com\u0026#34; \t\u0026#34;https://www.baidu.com/s?ie=utf-8\u0026amp;wd=\u0026#34; \u0026#34;\u0026#34;])  \t(\u0026#34;Wikipedia\u0026#34; . [simple-query \u0026#34;https://wikipedia.org\u0026#34; \t\u0026#34;https://wikipedia.org/wiki/\u0026#34; \u0026#34;\u0026#34;])))  (global-set-key (kbd \u0026#34;s-/\u0026#34;) \u0026#39;webjump)   large file (setq large-file-warning-threshold nil) Custom file Emacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。\n(setq custom-file (expand-file-name \u0026#34;custom.el\u0026#34; user-emacs-directory))  ;; (load custom-file t) Private file 私有配置不进行同步。\n(setq private-file \u0026#34;~/.emacs.d/private.el\u0026#34;)  (load private-file t) User interface 2022-03-07 目前我喜欢极简的界面。\nFonts Update:2022-03-07 很想把 sarasa 这个字体去掉，但是目前还不知道怎么配置，主要是在 org-table 中要能实现中英文的等宽。另处我不想使用 cnfonts 或 valign 此类包。\nUpdate:2022-03-08 仅在 org-table 中使用 sarasa 字根。目前没什么好的能够替代 sarasa 的字体。\n(set-face-attribute \u0026#39;default nil :family \u0026#34;Sarasa Mono SC\u0026#34; :weight \u0026#39;regular :height 160)  (set-fontset-font t \u0026#39;han (font-spec :name \u0026#34;Source Han Serif SC\u0026#34; :size 16)) Icon all-the-icons 可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。\n(require \u0026#39;all-the-icons) all-the-icons-completion (all-the-icons-completion-mode) kind-icon (require \u0026#39;kind-icon)  (setq kind-icon-default-face \u0026#39;corfu-default)  (with-eval-after-load \u0026#39;corfu  (add-to-list \u0026#39;corfu-margin-formatters #\u0026#39;kind-icon-margin-formatter)) Cursor (blink-cursor-mode -1)  (setq-default cursor-in-non-selected-windows nil) 我 Fork 了 im-cursor-chg 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。\ncursor color (setq im-cursor-color \u0026#34;Red\u0026#34;) (cursor-chg-mode) Themes 我的默认主题是 modus-themes ，这个包的自定义性特别高，有黑白配色两套。\n搭配 circadian 使用，可实现自动切换主题。\n目前切换到了 Macos 上使用 Emacs ，Emacs-plus 可根据系统主题自动切换 Emacs 主题。\n(setq modus-themes-italic-constructs t  modus-themes-bold-constructs nil  modus-themes-region \u0026#39;(bg-only no-extend)  modus-themes-lang-checkers \u0026#39;(background text-also straight-underline)  modus-themes-links \u0026#39;(italic background faint neutral-underline)  modus-themes-hl-line \u0026#39;(accented intense)  modus-themes-paren-match \u0026#39;(intense)  modus-themes-org-blocks \u0026#39;tinted-background  modus-themes-org-agenda \u0026#39;((header-block . (variable-pitch 1.2)) \t(habit . traffic-light))  modus-themes-headings \u0026#39;((t . (rainbow)))) Override color for distraction free 搭配 centaur-tabs 使用，默认的 tab bar 主题是灰度的，我不喜欢，我把它修改成了与主题色相配的黑白色。 bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。\n(setq modus-themes-operandi-color-overrides \u0026#39;((bg-main . \u0026#34;#F2F0EF\u0026#34;) \t(bg-dim . \u0026#34;#F2F0EF\u0026#34;) \t;; (bg-hl-line . \u0026#34;#F2F0EF\u0026#34;) \t;; (bg-active . \u0026#34;#F2F0EF\u0026#34;) \t;; (bg-inactive . \u0026#34;#ffffff\u0026#34;) \t;; (bg-tab-bar . \u0026#34;#F2F0EF\u0026#34;) \t;; (bg-tab-active . \u0026#34;#F2F0EF\u0026#34;) \t;; (bg-tab-inactive . \u0026#34;#F2F0EF\u0026#34;) \t;; (blue . \u0026#34;#252321\u0026#34;) \t(magenta-nuanced-bg . \u0026#34;#FFFFFF\u0026#34;) \t))  (setq modus-themes-vivendi-color-overrides \u0026#39;((bg-main . \u0026#34;#252321\u0026#34;) \t(bg-dim . \u0026#34;#252321\u0026#34;) \t;; (bg-hl-line . \u0026#34;#252321\u0026#34;) \t;; (bg-active . \u0026#34;#252321\u0026#34;) \t;; (bg-inactive . \u0026#34;#615F5D\u0026#34;) \t;; (bg-tab-bar . \u0026#34;#252321\u0026#34;) \t;; (bg-tab-active . \u0026#34;#252321\u0026#34;) \t;; (bg-tab-inactive . \u0026#34;#252321\u0026#34;) \t;; (blue . \u0026#34;#F2F0EF\u0026#34;) \t(magenta-nuanced-bg . \u0026#34;#615F5D\u0026#34;) \t)) Theme auto change   Theme change\n(defun my/apply-theme (appearance)  \u0026#34;Load theme, taking current system APPEARANCE into consideration.\u0026#34;  (mapc #\u0026#39;disable-theme custom-enabled-themes)  (pcase appearance  (\u0026#39;light (load-theme \u0026#39;modus-operandi t))  (\u0026#39;dark (load-theme \u0026#39;modus-vivendi t))))  (add-hook \u0026#39;ns-system-appearance-change-functions #\u0026#39;my/apply-theme)   Dashboard (setq dashboard-startup-banner \u0026#34;~/.emacs.d/banner.txt\u0026#34;  dashboard-center-content t  dashboard-set-init-info t  dashboard-set-file-icons t  dashboard-modify-heading-icons \u0026#39;((recents . \u0026#34;file-text\u0026#34;) \t(bookmarks . \u0026#34;book\u0026#34;))  dashboard-items \u0026#39;((recents . 5) \t(bookmarks . 5) \t(agenda . 5) \t(registers . 5)))  (setq dashboard-set-navigator t)  (set-fontset-font t \u0026#39;(#xe03d . #xe03d) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe051 . #xe051) (font-spec :family \u0026#34;Material Icons\u0026#34;))  (setq dashboard-navigator-buttons  `( \t((,(all-the-icons-octicon \u0026#34;mark-github\u0026#34; :height 1 :v-adjust 0.0) \t\u0026#34;Homepage\u0026#34; \t\u0026#34;Browse homepage\u0026#34; \t(lambda (\u0026amp;rest _) (browse-url \u0026#34;https://github.com/Jousimies/.emacs.d\u0026#34;))) \t(,(all-the-icons-octicon \u0026#34;tools\u0026#34; :height 1 :v-adjust 0.0) \t\u0026#34;Settings\u0026#34; \u0026#34;Open README file\u0026#34; \t(lambda (\u0026amp;rest _) (find-file \u0026#34;~/.emacs.d/README.org\u0026#34;))) \t(,(all-the-icons-faicon \u0026#34;sitemap\u0026#34; :height 1 :v-adjust 0.0) \t\u0026#34;Blog\u0026#34; \u0026#34;Browse Blog\u0026#34; \t(lambda (\u0026amp;rest _) (browse-url \u0026#34;https://jousimies.github.io\u0026#34;))) \t(,(all-the-icons-material \u0026#34;queue_music\u0026#34; :height 1 :v-adjust -0.2) \t\u0026#34;Music\u0026#34; \u0026#34;Netease cloud music\u0026#34; \t(lambda (\u0026amp;rest _) (netease-cloud-music))))))  (setq dashboard-footer-icon (all-the-icons-octicon \u0026#34;dashboard\u0026#34; \t:height 1.1 \t:v-adjust -0.05 \t:face \u0026#39;font-lock-keyword-face))  (setq dashboard-footer-messages `(,(concat \u0026#34;Happy hacking, jousimies - Emacs \u0026#34; \t(all-the-icons-octicon \u0026#34;heart\u0026#34; \t:height 1.1 \t:v-adjust -0.05) \t\u0026#34; you!\u0026#34;)))  (dashboard-setup-startup-hook)  (global-set-key (kbd \u0026#34;\u0026lt;f5\u0026gt;\u0026#34;) \u0026#39;dashboard-refresh-buffer) rainbow-mode (add-hook \u0026#39;prog-mode-hook \u0026#39;rainbow-mode) helpful (global-set-key [remap describe-function] \u0026#39;helpful-callable) (global-set-key [remap describe-variable] \u0026#39;helpful-variable) (global-set-key [remap describe-key] \u0026#39;helpful-key) (global-set-key (kbd \u0026#34;C-h F\u0026#34;) \u0026#39;helpful-function) (global-set-key (kbd \u0026#34;C-h C\u0026#34;) \u0026#39;helpful-command) info-colors (add-hook \u0026#39;Info-selection-hook \u0026#39;info-colors-fontify-node) goggles  Goggles highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported.\n (setq-default goggles-pulse t)  (add-hook \u0026#39;prog-mode-hook \u0026#39;goggles-mode) (add-hook \u0026#39;text-mode-hook \u0026#39;goggles-mode) emojify (add-hook \u0026#39;after-init-hook #\u0026#39;global-emojify-mode) svg 将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！\nsvg-lib (setq svg-lib-icons-dir (expand-file-name \u0026#34;svg-lib\u0026#34; dn-cache-directory)) Define gtd keywords faces (defface gtd-next  \u0026#39;((((background light))  :foreground \u0026#34;#1d9537\u0026#34;)  (t  :foreground \u0026#34;#007d65\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-wait  \u0026#39;((((background light))  :foreground \u0026#34;#dea32c\u0026#34;)  (t  :foreground \u0026#34;#fcaf17\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-someday  \u0026#39;((((background light))  :foreground \u0026#34;#7d5886\u0026#34;)  (t  :foreground \u0026#34;#c77eb5\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-cncl  \u0026#39;((((background light))  :foreground \u0026#34;#999d9c\u0026#34;)  (t  :foreground \u0026#34;#4f5555\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-a  \u0026#39;((((background light))  :foreground \u0026#34;#f05b72\u0026#34;)  (t  :foreground \u0026#34;#f58f98\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-b  \u0026#39;((((background light))  :foreground \u0026#34;#1d9537\u0026#34;)  (t  :foreground \u0026#34;#007d65\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces)  (defface gtd-c  \u0026#39;((((background light))  :foreground \u0026#34;#999d9c\u0026#34;)  (t  :foreground \u0026#34;#4f5555\u0026#34;))  \u0026#34;GTD face.\u0026#34;  :group \u0026#39;gtd-faces) svg-tag-mode svg-tag-mode 没有 autoload ，所以需要显式的 require 此包。不能使用 global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。\n(require \u0026#39;svg-tag-mode)  (defconst date-re \u0026#34;[0-9]\\\\{4\\\\}-[0-9]\\\\{2\\\\}-[0-9]\\\\{2\\\\}\u0026#34;) (defconst time-re \u0026#34;[0-9]\\\\{2\\\\}:[0-9]\\\\{2\\\\}\u0026#34;) (defconst day-re \u0026#34;[A-Za-z]\\\\{3\\\\}\u0026#34;)  (defun svg-progress-count (value)  (let* ((seq (mapcar #\u0026#39;string-to-number (split-string value \u0026#34;/\u0026#34;))) \t(count (float (car seq))) \t(total (float (cadr seq))))  (svg-image (svg-lib-concat \t(svg-lib-progress-bar (/ count total) nil \t:margin 0 :stroke 2 :radius 3 :padding 2 :width 11) \t(svg-lib-tag value nil \t:stroke 2 :padding 2 :margin 1)) :ascent \u0026#39;center)))  (setq svg-tag-tags  `((\u0026#34;TODO\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;TODO\u0026#34; :face \u0026#39;org-todo :inverse t :margin 0)))) \t(\u0026#34;NEXT\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;NEXT\u0026#34; :face \u0026#39;gtd-next :inverse t :margin 0)))) \t(\u0026#34;WAIT\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;WAIT\u0026#34; :face \u0026#39;gtd-wait :inverse t :margin 0)))) \t(\u0026#34;SOMEDAY\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;SOMEDAY\u0026#34; :face \u0026#39;gtd-someday :inverse t :margin 0)))) \t(\u0026#34;CNCL\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;CNCL\u0026#34; :face \u0026#39;gtd-cncl :inverse t :margin 0)))) \t(\u0026#34;DONE\u0026#34; . ((lambda (tag) (svg-tag-make \u0026#34;DONE\u0026#34; :face \u0026#39;org-done :margin 0))))  \t(\u0026#34;\\\\[#[A]\\\\]\u0026#34; . ( (lambda (tag) \t(svg-tag-make tag :face \u0026#39;gtd-a \t:inverse t \t:beg 2 :end -1 :margin 0))))  \t(\u0026#34;\\\\[#[B]\\\\]\u0026#34; . ( (lambda (tag) \t(svg-tag-make tag :face \u0026#39;gtd-b \t:inverse t \t:beg 2 :end -1 :margin 0))))  \t(\u0026#34;\\\\[#[C]\\\\]\u0026#34; . ( (lambda (tag) \t(svg-tag-make tag :face \u0026#39;gtd-c \t:inverse t \t:beg 2 :end -1 :margin 0))))  \t(\u0026#34;\\\\(\\\\[[0-9]+/[0-9]+\\\\]\\\\)\u0026#34; . ((lambda (tag) \t(svg-progress-count (substring tag 1 -1))))) \t))  (add-hook \u0026#39;org-mode-hook \u0026#39;svg-tag-mode) ;; (global-svg-tag-mode) Auto update svg-tag (advice-add \u0026#39;modus-themes-toggle :after \u0026#39;svg-tag-mode-on) (advice-add \u0026#39;circadian-activate-latest-theme :after \u0026#39;svg-tag-mode-on) lin (setq lin-face \u0026#39;lin-blue)  (setq lin-mode-hooks \u0026#39;(bongo-mode-hook \tdired-mode-hook \telfeed-search-mode-hook \telfeed-summary-mode-hook \telfeed-show-mode-hook \tgit-rebase-mode-hook \tgrep-mode-hook \tibuffer-mode-hook \tilist-mode-hook \tpdf-outline-minor-mode-hook \tledger-report-mode-hook \tlog-view-mode-hook \tmagit-log-mode-hook \tmu4e-headers-mode \tnotmuch-search-mode-hook \tnotmuch-tree-mode-hook \toccur-mode-hook \telfeed-show-mode-hook \torg-agenda-mode-hook \tproced-mode-hook \tebib-entry-mode-hook \tebib-index-mode-hook \tnetease-cloud-music-mode-hook \ttabulated-list-mode-hook))  (lin-global-mode 1) Frame management Fullscreen 我总是全屏使用 Emacs。\n(toggle-frame-fullscreen) Quit and delete window 删除窗口，而不是只是隐藏它，见 Reddit 。\n这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \\*fanyi\\*, \\*G0-Translator\\* \\*help\\* 等。\n(defun quit-window-delete (\u0026amp;optional kill window)  \u0026#34;Quit WINDOW, deleting it, and bury its buffer. WINDOW must be a live window and defaults to the selected one. With prefix argument KILL non-nil, kill the buffer instead of burying it. This is similar to the version of `quit-window\u0026#39;that Emacs had before the introduction of `quit-restore-window\u0026#39;. It ignores the information stored in WINDOW\u0026#39;s `quit-restore\u0026#39;window parameter. It deletes the WINDOW more often, rather than switching to another buffer in it. If WINDOW is alone in its frame then the frame is deleted or iconified, according to option `frame-auto-hide-function\u0026#39;.\u0026#34;  (interactive \u0026#34;P\u0026#34;)  (set-window-parameter window \u0026#39;quit-restore `(frame frame nil ,(current-buffer)))  (quit-restore-window window (if kill \u0026#39;kill \u0026#39;bury)))  (global-set-key [remap quit-window] \u0026#39;quit-window-delete) (global-set-key [remap meow-quit] \u0026#39;quit-window-delete) Scroll other window 这个在并排使用两个 buffer 的时候很好用。\n(defun dn/scroll-other-windown-down ()  \u0026#34;Scroll other window down.\u0026#34;  (interactive)  (scroll-other-window-down 2))  (defun dn/scroll-other-windown ()  \u0026#34;Scroll other window up.\u0026#34;  (interactive)  (scroll-other-window 2))  (global-set-key (kbd \u0026#34;M-n\u0026#34;) \u0026#39;dn/scroll-other-windown)  (global-set-key (kbd \u0026#34;M-p\u0026#34;) \u0026#39;dn/scroll-other-windown-down) Org-src 默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。\n(with-eval-after-load \u0026#39;org  (setq org-src-window-setup \u0026#39;current-window)) display-buffer-alist 我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。\n  one-key buffer\n(setq display-buffer-alist  \u0026#39;((\u0026#34;*One-Key*\u0026#34; \t(display-buffer-reuse-window \tdisplay-buffer-in-side-window) \t(side . bottom) \t(reusable-frames . visible) \t(window-parameters \t(select . t) \t(quit . t) \t(popup . t) \t(mode-line-format . none) \t(tab-line-format . none)))))     eshell buffer\n(add-to-list \u0026#39;display-buffer-alist \t\u0026#39;(\u0026#34;*eshell*\u0026#34; \t(display-buffer-reuse-window \tdisplay-buffer-in-side-window) \t(side . bottom) \t(window-height . 0.8) \t(slot . 1) \t(window-parameters \t(mode-line-format . none) \t(tab-line-format . none))))     help buffer\n(add-to-list \u0026#39;display-buffer-alist \t\u0026#39;(\u0026#34;*Help*\u0026#34; \t(display-buffer-in-side-window) \t(side . right) \t(window-width . 0.5) \t(slot . 1) \t(window-parameters \t(mode-line-format . none) \t(tab-line-format . none))))     org-roam buffer\n(add-to-list \u0026#39;display-buffer-alist \t\u0026#39;(\u0026#34;\\\\*org-roam\\\\*\u0026#34; \t(display-buffer-in-direction) \t(direction . right) \t(window-width . 0.25) \t(window-height . fit-window-to-buffer) \t(window-parameters \t(mode-line-format . none) \t(tab-line-format . none))))     Ilist buffer\n(add-to-list \u0026#39;display-buffer-alist \t\u0026#39;(\u0026#34;*Ilist*\u0026#34; \t(display-buffer-in-side-window) \t(side . right) \t(window-width . 0.3) \t(slot . 1) \t(window-parameters \t(mode-line-format . none) \t(tab-line-format . none))))   Awesome Tray (setq awesome-tray-active-modules \u0026#39;(\u0026#34;date\u0026#34;))  (awesome-tray-mode 1) Update awesome tray status Enable awesome tray when theme changed。\n(defvar after-load-theme-hook nil  \u0026#34;Hook run after a color theme is loaded using `load-theme\u0026#39;.\u0026#34;)  (defadvice load-theme (after run-after-load-theme-hook activate)  \u0026#34;Run `after-load-theme-hook\u0026#39;.\u0026#34;  (run-hooks \u0026#39;after-load-theme-hook))  (add-hook \u0026#39;after-load-theme-hook \u0026#39;awesome-tray-enable t) Editor Enhancement \u0026ndash; C.R.U.D 编辑器的功能是为了更好的增删改查。\nrime (setq rime-librime-root \u0026#34;~/.emacs.d/librime/dist\u0026#34;  rime-emacs-module-header-root \u0026#34;/opt/homebrew/opt/emacs-plus@28/include\u0026#34;  rime-user-data-dir \u0026#34;~/Library/Rime/\u0026#34;  default-input-method \u0026#34;rime\u0026#34;  rime-show-candidate nil)  (setq rime-disable-predicates \u0026#39;(meow-normal-mode-p \tmeow-motion-mode-p \tmeow-keypad-mode-p \trime-predicate-prog-in-code-p \trime-predicate-org-in-src-block-p \trime-predicate-current-uppercase-letter-p))  (setq rime-inline-predicates \u0026#39;(rime-predicate-space-after-cc-p \trime-predicate-after-alphabet-char-p))  (add-hook \u0026#39;org-mode-hook (lambda () (set-input-method \u0026#34;rime\u0026#34;))) rime-regexp 使用拼音进行中文的检索。\n(rime-regexp-mode) autoinsert (define-auto-insert  (cons \u0026#34;init-.*\\\\.el\u0026#34; \u0026#34;Emacs Lisp Skeleton\u0026#34;)  \u0026#39;(\u0026#34;Emacs Configuration Description: \u0026#34;  \u0026#34;;;;; \u0026#34; (file-name-nondirectory (buffer-file-name)) \u0026#34; --- \u0026#34; str  (make-string (max 2 (- 80 (current-column) 27)) ?\\s)  \u0026#34;-*- lexical-binding: t; -*-\u0026#34; \u0026#39;(setq lexical-binding t)  \u0026#34; ;; Copyright (C) \u0026#34; (format-time-string \u0026#34;%Y\u0026#34;) \u0026#34; ;;; Commentary: ;; \u0026#34; _ \u0026#34; ;;; Code: (provide \u0026#39;\u0026#34;  (file-name-base (buffer-file-name))  \u0026#34;) ;;; \u0026#34; (file-name-nondirectory (buffer-file-name)) \u0026#34; ends here\\n\u0026#34;))  (auto-insert-mode) embrace 这个包很方便的对文本进行括号的增删改。\n(require \u0026#39;embrace)  (set-face-attribute \u0026#39;embrace-help-pair-face nil :inherit font-lock-function-name-face :inverse-video nil)  (global-set-key (kbd \u0026#34;C-,\u0026#34;) \u0026#39;embrace-commander)  (defun embrace-org-mode-hook ()  (dolist (lst \u0026#39;((?= \u0026#34; =\u0026#34; . \u0026#34;= \u0026#34;) \t(?~ \u0026#34; ~\u0026#34; . \u0026#34;~ \u0026#34;) \t(?/ \u0026#34; /\u0026#34; . \u0026#34;/ \u0026#34;) \t(?* \u0026#34; *\u0026#34; . \u0026#34;* \u0026#34;) \t(?_ \u0026#34; _\u0026#34; . \u0026#34;_ \u0026#34;) \t(?+ \u0026#34; +\u0026#34; . \u0026#34;+ \u0026#34;) \t(?k \u0026#34;@@html:\u0026lt;kbd\u0026gt;@@\u0026#34; . \u0026#34;@@html:\u0026lt;/kbd\u0026gt;@@\u0026#34;)))  (embrace-add-pair (car lst) (cadr lst) (cddr lst))))  (add-hook \u0026#39;org-mode-hook \u0026#39;embrace-org-mode-hook) recent file (add-hook \u0026#39;after-init-hook #\u0026#39;recentf-mode) (add-hook \u0026#39;kill-emacs-hook #\u0026#39;recentf-cleanup)  (setq recentf-save-file \u0026#34;/Users/duanning/.cache/emacs/recentf\u0026#34;  recentf-max-saved-items 1000  recentf-exclude \u0026#39;(\u0026#34;[0-9]*-.*.org\u0026#34; \u0026#34;slipbox\u0026#34; \u0026#34;todos\u0026#34; \u0026#34;recentf\u0026#34; \u0026#34;M.Calibre\u0026#34; \u0026#34;.elfeed\u0026#34;))  (setq recentf-auto-cleanup (if (daemonp) \t300)) dired-mode files (make-directory (expand-file-name \u0026#34;backups/\u0026#34; dn-cache-directory) t)  (setq confirm-kill-processes nil)  (setq backup-directory-alist `((\u0026#34;.\u0026#34; . ,(expand-file-name \u0026#34;backups/\u0026#34; dn-cache-directory)))) dired (setq dired-recursive-deletes \u0026#39;always  dired-recursive-copies \u0026#39;always  global-auto-revert-non-file-buffers t  auto-revert-verbose nil  dired-dwim-target t  delete-by-moving-to-trash t  load-prefer-newer t  auto-revert-use-notify nil  auto-revert-interval 3  insert-directory-program \u0026#34;gls\u0026#34; dired-use-ls-dired t  dired-listing-switches \u0026#34;-al --group-directories-first\u0026#34;)  (put \u0026#39;dired-find-alternate-file \u0026#39;disabled nil)  (with-eval-after-load \u0026#39;dired  (define-key dired-mode-map (kbd \u0026#34;P\u0026#34;) \u0026#39;peep-dired)) dired-x (global-set-key (kbd \u0026#34;C-x C-j\u0026#34;) \u0026#39;dired-jump) diredfl (diredfl-global-mode) peep-dired (setq peep-dired-ignored-extensions \u0026#39;(\u0026#34;mkv\u0026#34; \u0026#34;iso\u0026#34; \u0026#34;mp4\u0026#34; \u0026#34;pdf\u0026#34;)) dired-hide-dotfiles (defun my-dired-mode-hook ()  \u0026#34;My `dired\u0026#39;mode hook.\u0026#34;  ;; To hide dot-files by default  (dired-hide-dotfiles-mode))  (define-key dired-mode-map \u0026#34;.\u0026#34; #\u0026#39;dired-hide-dotfiles-mode) (add-hook \u0026#39;dired-mode-hook #\u0026#39;my-dired-mode-hook) dired-git-info (setq dgi-auto-hide-details-p nil)  (with-eval-after-load \u0026#39;dired  (define-key dired-mode-map \u0026#34;)\u0026#34; \u0026#39;dired-git-info-mode))  (add-hook \u0026#39;dired-after-readin-hook \u0026#39;dired-git-info-auto-enable) hungry delete (require \u0026#39;hungry-delete)  (setq hungry-delete-chars-to-skip \u0026#34; \\f\u000b\u0026#34;)  (add-hook \u0026#39;after-init-hook \u0026#39;global-hungry-delete-mode) auto save (require \u0026#39;auto-save)  (add-hook \u0026#39;after-init-hook \u0026#39;auto-save-enable)  (setq auto-save-silent t  auto-save-delete-trailing-whitespace t  auto-save-list-file-prefix (expand-file-name \u0026#34;auto-save-list/.saves-\u0026#34; dn-cache-directory))  (add-hook \u0026#39;org-capture-mode-hook #\u0026#39;(lambda nil (setq auto-save-delete-trailing-whitespace nil))) save place (setq save-place-file (expand-file-name \u0026#34;saveplace\u0026#34; dn-cache-directory))  (save-place-mode) save hist (setq savehist-file (expand-file-name \u0026#34;savehist\u0026#34; dn-cache-directory)  history-length 1000  savehist-save-minibuffer-history 1  savehist-additional-variables \u0026#39;(kill-ring \tsearch-ring \tregexp-search-ring)  history-delete-duplicates t)  (savehist-mode) Undo (global-undo-fu-session-mode)  (setq undo-fu-session-directory (expand-file-name \u0026#34;undo-fu-session\u0026#34; dn-cache-directory)) Vundo (require \u0026#39;vundo) (setq vundo-glyph-alist vundo-unicode-symbols) ctrlf ;; (require \u0026#39;ctrlf)  (ctrlf-mode) google-this (google-this-mode) vertico (customize-set-variable \u0026#39;vertico-cycle t)  (with-eval-after-load \u0026#39;vertico  (define-key vertico-map (kbd \u0026#34;C-j\u0026#34;) \u0026#39;vertico-directory-up))  (vertico-mode) marginalia (customize-set-variable \u0026#39;marginalia-annotators \u0026#39;(marginalia-annotators-heavy marginalia-annotators-light nil))  (marginalia-mode) consult (add-hook \u0026#39;completion-list-mode-hook \u0026#39;consult-preview-at-point-mode)  (global-set-key (kbd \u0026#34;C-x C-b\u0026#34;) \u0026#39;consult-buffer) (global-set-key (kbd \u0026#34;M-y\u0026#34;) \u0026#39;consult-yank-pop) consult-dir (require \u0026#39;consult-dir)  (global-set-key (kbd \u0026#34;C-x C-d\u0026#34;) \u0026#39;consult-dir)  (with-eval-after-load \u0026#39;vertico  (define-key vertico-map (kbd \u0026#34;C-x C-d\u0026#34;) \u0026#39;consult-dir)  (define-key vertico-map (kbd \u0026#34;C-x C-j\u0026#34;) \u0026#39;consult-dir-jump-file)) orderless (require \u0026#39;orderless)  (setq completion-styles \u0026#39;(orderless partial-completion)  completion-category-defaults nil  completion-category-overrides \u0026#39;((file (styles . (partial-completion))))) corfu (setq corfu-auto t  corfu-cycle t  corfu-quit-at-boundary t  corfu-auto-prefix 2  corfu-preselect-first t  corfu-quit-no-match t)  (with-eval-after-load \u0026#39;corfu  (define-key corfu-map (kbd \u0026#34;C-n\u0026#34;) \u0026#39;corfu-next)  (define-key corfu-map (kbd \u0026#34;C-p\u0026#34;) \u0026#39;corfu-previous)  (define-key corfu-map (kbd \u0026#34;\u0026lt;escape\u0026gt;\u0026#34;) \u0026#39;corfu-quit))  (corfu-global-mode) corfu-doc (require \u0026#39;corfu-doc)  (add-hook \u0026#39;corfu-mode-hook \u0026#39;corfu-doc-mode)  (setq corfu-doc-delay 0.5  corfu-doc-max-width 70  corfu-doc-max-height 20)  (define-key corfu-map (kbd \u0026#34;M-p\u0026#34;) \u0026#39;corfu-doc-scroll-down) (define-key corfu-map (kbd \u0026#34;M-n\u0026#34;) \u0026#39;corfu-doc-scroll-up) embark (global-set-key [remap describe-bindings] #\u0026#39;embark-bindings)  (global-set-key (kbd \u0026#34;C-.\u0026#34;) \u0026#39;embark-act) (global-set-key (kbd \u0026#34;M-.\u0026#34;) \u0026#39;embark-dwim)  ;; Use Embark to show bindings in a key prefix with `C-h` (setq prefix-help-command #\u0026#39;embark-prefix-help-command) prescient (require \u0026#39;prescient) dabbrev (global-set-key (kbd \u0026#34;M-/\u0026#34;) \u0026#39;dabbrev-completion) (global-set-key (kbd \u0026#34;C-M-/\u0026#34;) \u0026#39;dabbrev-expand) cape (require \u0026#39;cape)  (global-set-key (kbd \u0026#34;C-c p p\u0026#34;) \u0026#39;completion-at-point) (global-set-key (kbd \u0026#34;C-c p t\u0026#34;) \u0026#39;complete-tag) (global-set-key (kbd \u0026#34;C-c p d\u0026#34;) \u0026#39;cape-dabbrev) (global-set-key (kbd \u0026#34;C-c p f\u0026#34;) \u0026#39;cape-file) (global-set-key (kbd \u0026#34;C-c p k\u0026#34;) \u0026#39;cape-keyword) (global-set-key (kbd \u0026#34;C-c p s\u0026#34;) \u0026#39;cape-symbol) (global-set-key (kbd \u0026#34;C-c p a\u0026#34;) \u0026#39;cape-abbrev) (global-set-key (kbd \u0026#34;C-c p i\u0026#34;) \u0026#39;cape-ispell) (global-set-key (kbd \u0026#34;C-c p l\u0026#34;) \u0026#39;cape-line) (global-set-key (kbd \u0026#34;C-c p w\u0026#34;) \u0026#39;cape-dict) (global-set-key (kbd \u0026#34;C-c p \\\\\u0026#34;) \u0026#39;cape-tex) (global-set-key (kbd \u0026#34;C-c p \u0026amp;\u0026#34;) \u0026#39;cape-sgml) (global-set-key (kbd \u0026#34;C-c p r\u0026#34;) \u0026#39;cape-rfc1345)  (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-file) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-tex) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dabbrev) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-keyword) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-sgml) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-rfc1345) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-abbrev) (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-ispell) ;; (add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-dict) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-symbol) ;;(add-to-list \u0026#39;completion-at-point-functions #\u0026#39;cape-line) tempel (require \u0026#39;tempel)  (setq tempel-path \u0026#34;~/.emacs.d/template/tempel\u0026#34;)  (defun tempel-setup-capf ()  ;; Add the Tempel Capf to `completion-at-point-functions\u0026#39;. `tempel-expand\u0026#39;  ;; only triggers on exact matches. Alternatively use `tempel-complete\u0026#39; if  ;; you want to see all matches, but then Tempel will probably trigger too  ;; often when you don\u0026#39;t expect it.  ;; NOTE: We add `tempel-expand\u0026#39; *before* the main programming mode Capf,  ;; such that it will be tried first.  (setq-local completion-at-point-functions \t(cons #\u0026#39;tempel-expand \tcompletion-at-point-functions)))  (add-hook \u0026#39;text-mode-hook \u0026#39;tempel-setup-capf)  (global-set-key (kbd \u0026#34;M-+\u0026#34;) \u0026#39;tempel-complete) (global-set-key (kbd \u0026#34;M-*\u0026#34;) \u0026#39;tempel-insert) Open in external apps 有些时候需要使用外部应用打开相应的文件，比如打印文件的时候。目前还没有发现直接使用 Emacs 打印文件的方法。\n这里只使用 safari 打开相应的文件，如需要使用其他的应用，可以参照博客。\n(defun xah-html-open-in-safari ()  \u0026#34;Open the current file or `dired\u0026#39;marked files in Mac\u0026#39;s Safari browser. If the file is not saved, save it first. URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html\u0026#39;Version 2018-02-26\u0026#34;  (interactive)  (let* ( \t($file-list \t(if (string-equal major-mode \u0026#34;dired-mode\u0026#34;) \t(dired-get-marked-files) \t(list (buffer-file-name)))) \t($do-it-p (if (\u0026lt;= (length $file-list) 5) \tt \t(y-or-n-p \u0026#34;Open more than 5 files? \u0026#34;))))  (when $do-it-p  (cond  ((string-equal system-type \u0026#34;darwin\u0026#34;) \t(mapc \t(lambda ($fpath) \t(when (buffer-modified-p ) \t(save-buffer)) \t(shell-command \t(format \u0026#34;open -a Safari.app \\\u0026#34;%s\\\u0026#34;\u0026#34; $fpath))) $file-list)))))) Language configuration LSP: Language service protocol eldoc (eldoc-mode) eglot (add-hook \u0026#39;python-mode-hook \u0026#39;eglot-ensure) Language spell check and translate ispell (setq ispell-program-name \u0026#34;aspell\u0026#34;  ispell-extra-args \u0026#39;(\u0026#34;--sug-mode=ultra\u0026#34; \u0026#34;--lang=en_US\u0026#34; \u0026#34;--run-together\u0026#34;)) flyspell  (add-hook \u0026#39;text-mode-hook \u0026#39;flyspell-mode)  (with-eval-after-load \u0026#39;flyspell  (define-key flyspell-mode-map (kbd \u0026#34;C-;\u0026#34;) nil)  (define-key flyspell-mode-map (kbd \u0026#34;C-,\u0026#34;) nil)  (define-key flyspell-mode-map (kbd \u0026#34;C-.\u0026#34;) nil))  (setq flyspell-duplicate-distance 0  flyspell-mark-duplications-flag nil) flyspell-correct  (global-set-key (kbd \u0026#34;C-;\u0026#34;) \u0026#39; flyspell-correct-wrapper)  (setq flyspell-correct-interface #\u0026#39;flyspell-correct-popup) fanyi 此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。\n(require \u0026#39;fanyi)  (custom-set-variables \u0026#39;(fanyi-providers \u0026#39;( \t;; fanyi-haici-provider \tfanyi-youdao-thesaurus-provider \t;; fanyi-etymon-provider \t;; fanyi-longman-provider \t;; fanyi-libre-provider \t))) Powerthesaurus (require \u0026#39;powerthesaurus) Smog https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3\nhttps://wiki.christophchamp.com/index.php?title=Style_and_Diction\n(require \u0026#39;smog)  (setq smog-command \u0026#34;style -L en\u0026#34;) osx-dictionary (require \u0026#39;osx-dictionary)  (setq osx-dictionary-use-chinese-text-segmentation t) go-translate 此包可对整句进行翻译。\n(require \u0026#39;go-translate)  (setq gts-translate-list \u0026#39;((\u0026#34;en\u0026#34; \u0026#34;zh\u0026#34;)))  (setq gts-default-translator (gts-translator \t:picker (gts-noprompt-picker) \t:engines (list \t(gts-bing-engine) \t(gts-google-engine :parser (gts-google-summary-parser)) \t;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url \u0026#34;https://translate.google.com\u0026#34;) \t) \t:render (gts-buffer-render))) Program language Markdown (add-to-list \u0026#39;auto-mode-alist \t\u0026#39;(\u0026#34;README\\\\.md\\\\\u0026#39;\u0026#34; . gfm-mode)) Beancount (setq beancount-electric-currency t)  (add-to-list \u0026#39;auto-mode-alist \t\u0026#39;(\u0026#34;\\\\.bean\\\\\u0026#39;\u0026#34; . beancount-mode))  (add-hook \u0026#39;beancount-mode-hook #\u0026#39;outline-minor-mode) (add-hook \u0026#39;beancount-mode-hook #\u0026#39;(lambda nil \t(setq-local electric-indent-chars nil)))  (with-eval-after-load \u0026#39;beancount  (define-key beancount-mode-map (kbd \u0026#34;C-c C-n\u0026#34;) \u0026#39;outline-next-visible-heading)  (define-key beancount-mode-map (kbd \u0026#34;C-c C-p\u0026#34;) \u0026#39;outline-previous-visible-heading))  (add-to-list \u0026#39;all-the-icons-icon-alist \t\u0026#39;(\u0026#34;\\\\.bean\\\\\u0026#39;\u0026#34; all-the-icons-material \u0026#34;attach_money\u0026#34; :face all-the-icons-lblue)) (add-to-list \u0026#39;all-the-icons-mode-icon-alist \t\u0026#39;(beancount-mode all-the-icons-material \u0026#34;attach_money\u0026#34; :face all-the-icons-lblue)) CSV (add-to-list \u0026#39;auto-mode-alist \t\u0026#39;(\u0026#34;\\\\.csv\\\\\u0026#39;\u0026#34; . csv-mode)) Yaml (add-to-list \u0026#39;auto-mode-alist \t\u0026#39;(\u0026#34;\\\\.yaml\\\\\u0026#39;\u0026#34; . yaml-mode)) Python (setq python-shell-interpreter \u0026#34;python3\u0026#34;  python-indent-guess-indent-offset nil) Organize life with org-mode 使用纯文本组织生活，是一种哲学，是一种生活方式。此 Blog 是践行此哲学的开端。\nBetter Default (setq org-modules \u0026#39;()  org-deadline-warning-days 7  org-return-follows-link t  org-agenda-dim-blocked-tasks t  org-image-actual-width nil  org-display-remote-inline-images \u0026#39;download  org-log-into-drawer t  org-fast-tag-selection-single-key \u0026#39;expert  org-adapt-indentation nil  org-fontify-quote-and-verse-blocks t  org-support-shift-select t  ;; org--leading-stars t  org-treat-S-cursor-todo-selection-as-state-change nil)   Word wrap\n我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。\n(add-hook \u0026#39;org-mode-hook \u0026#39;menu-bar--wrap-long-lines-window-edge) ;; (global-visual-line-mode 1)  ;; (setq word-wrap-by-category t)     todo keywords and faces\nIf you do not provide the separator bar, the last state is used as the DONE state.\n(setq org-todo-keywords  \u0026#39;((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;STARTED\u0026#34; \u0026#34;|\u0026#34; \u0026#34;WAIT(w@)\u0026#34; \u0026#34;SOMEDAY(s@)\u0026#34; \u0026#34;CNCL(c@/!)\u0026#34; \u0026#34;DONE(d)\u0026#34;)))  (setq org-todo-keyword-faces  \u0026#39;((\u0026#34;TODO\u0026#34; :foreground \u0026#34;Red\u0026#34; :weight bold) \t(\u0026#34;NEXT\u0026#34; :foreground \u0026#34;Forest green\u0026#34; :weight bold) \t(\u0026#34;SOMEDAY\u0026#34; :foreground \u0026#34;blue\u0026#34; :weight bold) \t(\u0026#34;DONE\u0026#34; :foreground \u0026#34;#705628\u0026#34; :weight bold) \t(\u0026#34;WAIT\u0026#34; :foreground \u0026#34;Orange\u0026#34; :weight bold) \t(\u0026#34;CNCL\u0026#34; :foreground \u0026#34;#b4534b\u0026#34; :weight bold)))     todo state triggers\n(setq org-todo-state-tags-triggers  (quote ((\u0026#34;CNCL\u0026#34; (\u0026#34;CNCL\u0026#34; . t)) \t(\u0026#34;WAIT\u0026#34; (\u0026#34;WAIT\u0026#34; . t)) \t(\u0026#34;SOMEDAY\u0026#34; (\u0026#34;WAIT\u0026#34;) (\u0026#34;SOMEDAY\u0026#34; . t)) \t(done (\u0026#34;WAIT\u0026#34;) (\u0026#34;SOMEDAY\u0026#34;)) \t(\u0026#34;TODO\u0026#34; (\u0026#34;WAIT\u0026#34;) (\u0026#34;CNCL\u0026#34;) (\u0026#34;SOMEDAY\u0026#34;)) \t(\u0026#34;NEXT\u0026#34; (\u0026#34;WAIT\u0026#34;) (\u0026#34;CNCL\u0026#34;) (\u0026#34;SOMEDAY\u0026#34;)) \t(\u0026#34;DONE\u0026#34; (\u0026#34;WAIT\u0026#34;) (\u0026#34;CNCL\u0026#34;) (\u0026#34;SOMEDAY\u0026#34;)))))     org priority\n(setq org-priority-faces \u0026#39;((?A . \u0026#39;(bold org-priority)) \t(?B . org-priority) \t(?C . \u0026#39;(shadow org-priority))))     org emphasis color\n(defface my-org-emphasis-bold  \u0026#39;((default :inherit bold)  (((class color) (min-colors 88) (background light))  :foreground \u0026#34;#a60000\u0026#34;)  (((class color) (min-colors 88) (background dark))  :foreground \u0026#34;#ff8059\u0026#34;))  \u0026#34;My bold emphasis for Org.\u0026#34;  :group \u0026#39;org-faces)  (defface my-org-emphasis-italic  \u0026#39;((default :inherit italic)  (((class color) (min-colors 88) (background light))  :foreground \u0026#34;#005e00\u0026#34;)  (((class color) (min-colors 88) (background dark))  :foreground \u0026#34;#44bc44\u0026#34;))  \u0026#34;My italic emphasis for Org.\u0026#34;  :group \u0026#39;org-faces)  (defface my-org-emphasis-underline  \u0026#39;((default :inherit underline)  (((class color) (min-colors 88) (background light))  :foreground \u0026#34;#813e00\u0026#34;)  (((class color) (min-colors 88) (background dark))  :foreground \u0026#34;#d0bc00\u0026#34;))  \u0026#34;My underline emphasis for Org.\u0026#34;  :group \u0026#39;org-faces)  (defface my-org-emphasis-strike-through  \u0026#39;((((class color) (min-colors 88) (background light))  :strike-through \u0026#34;#972500\u0026#34; :foreground \u0026#34;#505050\u0026#34;)  (((class color) (min-colors 88) (background dark))  :strike-through \u0026#34;#ef8b50\u0026#34; :foreground \u0026#34;#a8a8a8\u0026#34;))  \u0026#34;My strike-through emphasis for Org.\u0026#34;  :group \u0026#39;org-faces)  (defface my-org-emphasis-verbatim  \u0026#39;((((class color) (min-colors 88) (background light))  :background \u0026#34;#F7B80A\u0026#34;)  (((class color) (min-colors 88) (background dark))  :background \u0026#34;#6DA906\u0026#34;))  \u0026#34;My strike-through emphasis for Org.\u0026#34;  :group \u0026#39;org-faces)  (setq org-emphasis-alist  \u0026#39;((\u0026#34;*\u0026#34; my-org-emphasis-bold) \t(\u0026#34;/\u0026#34; my-org-emphasis-italic) \t(\u0026#34;_\u0026#34; my-org-emphasis-underline) \t(\u0026#34;~\u0026#34; org-code verbatim) \t(\u0026#34;+\u0026#34; my-org-emphasis-strike-through) \t(\u0026#34;=\u0026#34; my-org-emphasis-verbatim)))     org-babel-load-languages\n根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，相关讨论见 Emacs-china 论坛。\n(org-babel-do-load-languages  \u0026#39;org-babel-load-languages  \u0026#39;((emacs-lisp . t)))  (defun my/org-babel-execute-src-block (\u0026amp;optional _arg info _params)  \u0026#34;Load language if needed\u0026#34;  (let* ((lang (nth 0 info)) \t(sym (if (member (downcase lang) \u0026#39;(\u0026#34;c\u0026#34; \u0026#34;cpp\u0026#34; \u0026#34;c++\u0026#34;)) \u0026#39;C (intern lang))) \t(backup-languages org-babel-load-languages))  ;; - (LANG . nil) 明确禁止的语言，不加载。  ;; - (LANG . t) 已加载过的语言，不重复载。  (unless (assoc sym backup-languages)  (condition-case err \t(progn \t(org-babel-do-load-languages \u0026#39;org-babel-load-languages (list (cons sym t))) \t(setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages))) \t(file-missing \t(setq-default org-babel-load-languages backup-languages) \terr)))))  (advice-add \u0026#39;org-babel-execute-src-block :before \u0026#39;my/org-babel-execute-src-block)     org-capture\n(setq org-capture-templates  \u0026#39;((\u0026#34;i\u0026#34; \u0026#34;Inbox - todo item\u0026#34; entry (file (lambda () (expand-file-name \u0026#34;todos/inbox.org\u0026#34; dn-galaxy)))  \u0026#34;* TODO %?\\n%U\\n\\n\u0026#34;)))  (defun my/org-capture-inbox ()  (interactive)  (org-capture nil \u0026#34;i\u0026#34;))     org-attach\n(setq org-attach-id-to-path-function-list  \u0026#39;(org-attach-id-ts-folder-format \torg-attach-id-uuid-folder-format)) (setq org-attach-dir-relative t)     org-refile\n(setq org-refile-targets \u0026#39;((nil :maxlevel . 9) \t(org-agenda-files :maxlevel . 9))) (setq org-refile-use-outline-path t) (setq org-outline-path-complete-in-steps nil) (setq org-refile-allow-creating-parent-nodes \u0026#39;confirm) (setq org-refile-use-outline-path \u0026#39;file) (setq org-refile-active-region-within-subtree t)     org-archive\n(customize-set-variable \u0026#39;org-archive-location \u0026#34;~/Nextcloud/L.Personal.Galaxy/todos/gtd.org_archive::datetree/* From %s\u0026#34;)     org-habit\n(add-to-list \u0026#39;org-modules \u0026#39;org-habit t)     org-id\n(setq org-id-method \u0026#39;ts) (setq org-id-link-to-org-use-id \u0026#39;create-if-interactive) (setq org-id-locations-file (expand-file-name \u0026#34;.org-id-locations\u0026#34; dn-cache-directory))   Copy id to clipboard\n(defun dn/copy-idlink-to-clipboard ()  \u0026#34;Copy idlink to clipboard.\u0026#34;  (interactive)  (when (eq major-mode \u0026#39;org-agenda-mode) ;switch to orgmode  (org-agenda-show)  (org-agenda-goto))  (when (eq major-mode \u0026#39;org-mode) ; do this only in org-mode buffers  (let* ((mytmphead (nth 4 (org-heading-components))) \t(mytmpid (funcall \u0026#39;org-id-get-create)) \t(mytmplink (format \u0026#34;[[id:%s][%s]]\u0026#34; mytmpid mytmphead)))  (kill-new mytmplink)  (message \u0026#34;Copied %s to killring (clipboard)\u0026#34; mytmplink)))  (switch-to-buffer (concat (format-time-string \u0026#34;%Y-%m-%d\u0026#34;) \u0026#34;.org\u0026#34;)))  (global-set-key (kbd \u0026#34;\u0026lt;f8\u0026gt;\u0026#34;) \u0026#39;dn/copy-idlink-to-clipboard)       org-clock\n(org-clock-persistence-insinuate)   (setq org-clock-into-drawer \u0026#34;LOGCLOCK\u0026#34;) (setq org-clock-out-remove-zero-time-clocks t) (setq org-clock-out-when-done t) (setq org-clock-persist t) (setq org-clock-report-include-clocking-task t) (setq org-clock-persist-file (expand-file-name \u0026#34;org-clock-save.el\u0026#34; dn-cache-directory))   switch task from TODO to STARTED\n(defun bh/is-task-p ()  \u0026#34;Any task with a todo keyword and no subtask\u0026#34;  (save-restriction  (widen)  (let ((has-subtask) \t(subtree-end (save-excursion (org-end-of-subtree t))) \t(is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))  (save-excursion \t(forward-line 1) \t(while (and (not has-subtask) \t(\u0026lt; (point) subtree-end) \t(re-search-forward \u0026#34;^\\*+ \u0026#34; subtree-end t)) \t(when (member (org-get-todo-state) org-todo-keywords-1) \t(setq has-subtask t))))  (and is-a-task (not has-subtask)))))  (defun bh/clock-in-to-next (kw)  \u0026#34;Switch a task from TODO to NEXT when clocking in. Skips capture tasks, projects, and subprojects. Switch projects and subprojects from NEXT back to TODO\u0026#34;  (when (not (and (boundp \u0026#39;org-capture-mode) org-capture-mode))  (cond  ((and (member (org-get-todo-state) (list \u0026#34;TODO\u0026#34;)) \t(bh/is-task-p))  \u0026#34;NEXT\u0026#34;)  ((and (member (org-get-todo-state) (list \u0026#34;NEXT\u0026#34;)) \t(bh/is-project-p))  \u0026#34;TODO\u0026#34;))))       org-num\n(add-hook \u0026#39;org-mode-hook \u0026#39;org-num-mode)   Packages enhance org   auto-tangle\n(unless  (fboundp \u0026#39;org-auto-tangle-mode)  (autoload #\u0026#39;org-auto-tangle-mode \u0026#34;org-auto-tangle\u0026#34; nil t))  (add-hook \u0026#39;org-mode-hook \u0026#39;org-auto-tangle-mode)   toc-org\n(add-hook \u0026#39;org-mode-hook \u0026#39;toc-org-mode)       org-superstar\n(add-hook \u0026#39;org-mode-hook \u0026#39;org-superstar-mode)     org-download\n(customize-set-variable \u0026#39;org-download-image-dir \u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/pic\u0026#34;) (customize-set-variable \u0026#39;org-download-screenshot-method \u0026#39;screencapture) (customize-set-variable \u0026#39;org-download-abbreviate-filename-function \u0026#39;expand-file-name) (customize-set-variable \u0026#39;org-download-timestamp \u0026#34;%Y%m%d%H%M%S\u0026#34;) (customize-set-variable \u0026#39;org-download-display-inline-images nil) (customize-set-variable \u0026#39;org-download-heading-lvl nil) (customize-set-variable \u0026#39;org-download-annotate-function (lambda (_link) \u0026#34;\u0026#34;)) (customize-set-variable \u0026#39;org-download-image-attr-list \u0026#39;(\u0026#34;#+NAME: \u0026#34; \u0026#34;#+CAPTION: \u0026#34; \u0026#34;#+ATTR_LATEX: :width 10cm :placement [!htpb]\u0026#34;))  (add-hook \u0026#39;org-mode-hook \u0026#39;org-download-enable)  (advice-add \u0026#39;org-download-clipboard :after \u0026#39;org-download-rename-last-file) (defun my/replace-org-download-file-path ()  (interactive)  (previous-line)  (replace-string \u0026#34;/Users/duanning\u0026#34; \u0026#34;~\u0026#34;))  (advice-add \u0026#39;org-download-clipboard :after \u0026#39;my/replace-org-download-file-path)     org-auto-tangle\n(add-hook \u0026#39;org-mode-hook \u0026#39;org-auto-tangle-mode)     olivetti\n设置 olivetti 的主体宽度，黄金分割率，此分割具有美感。\n(setq olivetti-body-width 0.618)  (add-hook \u0026#39;org-mode-hook \u0026#39;olivetti-mode) (add-hook \u0026#39;mu4e-main-mode-hook \u0026#39;olivetti-mode) 感谢 patrolli . 一个更强大的是 writeroom 这个包，但是其中有些功能我用不到，有些我自己己配置。\n此代码实现的功能是当窗口只有一个 buffer ，或者窗口布局是上下形式的时候，开启该模式，如果存在左右布局，就关闭该模式。有个问题是自己不能手动关闭 Olivetti 模式，暂时就不起用这个了。\n(defun my/olivetti-mode ()  (if (and (eq (buffer-local-value \u0026#39;major-mode (current-buffer)) \u0026#39;org-mode) \t(\u0026gt; (window-width) (/ (frame-width) 2)))  (olivetti-mode 1)  (olivetti-mode 0)))  (add-hook \u0026#39;find-file-hook \u0026#39;my/olivetti-mode) (add-hook \u0026#39;window-configuration-change-hook \u0026#39;my/olivetti-mode)     org-appear\n(require \u0026#39;org-appear)  (setq org-appear-trigger \u0026#39;manual  org-appear-autolinks t)  (add-hook \u0026#39;org-mode-hook \u0026#39;org-appear-mode)  (add-hook \u0026#39;org-mode-hook (lambda () \t(add-hook \u0026#39;meow-insert-enter-hook #\u0026#39;org-appear-manual-start nil t) \t(add-hook \u0026#39;meow-insert-exit-hook #\u0026#39;org-appear-manual-stop nil t)))     org-cliplink\n(require \u0026#39;org-cliplink)   Note taking   org-roam\n(unless  (fboundp \u0026#39;org-roam-db-autosync-enable)  (autoload #\u0026#39;org-roam-db-autosync-enable \u0026#34;org-roam\u0026#34; nil t))  (if sys-termuxp  (setq org-roam-database-connector \u0026#39;sqlite3))  (add-hook \u0026#39;after-init-hook \u0026#39;org-roam-db-autosync-enable) ;; (add-hook \u0026#39;org-roam-mode-hook \u0026#39;turn-on-visual-line-mode) (add-hook \u0026#39;org-mode-hook (lambda () \t(setq-local time-stamp-active t \ttime-stamp-start \u0026#34;#\\\\+MODIFIED:[ \\t]*\u0026#34; \ttime-stamp-end \u0026#34;$\u0026#34; \ttime-stamp-format \u0026#34;\\[%Y-%m-%d %3a %H:%M\\]\u0026#34;) \t(add-hook \u0026#39;before-save-hook \u0026#39;time-stamp nil \u0026#39;local)))  (with-eval-after-load \u0026#39;org-roam ;; https://jethrokuan.github.io/org-roam-guide/ (cl-defmethod org-roam-node-type ((node org-roam-node))  \u0026#34;Return the TYPE of NODE.\u0026#34;  (condition-case nil  (file-name-nondirectory  (directory-file-name \t(file-name-directory \t(file-relative-name (org-roam-node-file node) org-roam-directory))))  (error \u0026#34;\u0026#34;)))  ;; Codes blow are used to general a hierachy for title nodes that under a file ;; https://github.com/nowislewis/nowisemacs/blob/master/init.org (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))  \u0026#34;Return the value of \\\u0026#34;#+title:\\\u0026#34; (if any) from file that NODE resides in. If there\u0026#39;s no file-level title in the file, return empty string.\u0026#34;  (or (if (= (org-roam-node-level node) 0) \t(org-roam-node-title node) \t(org-roam-get-keyword \u0026#34;TITLE\u0026#34; (org-roam-node-file node)))  \u0026#34;\u0026#34;))  (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))  \u0026#34;Return hierarchy for NODE, constructed of its file title, OLP and direct title. If some elements are missing, they will be stripped out.\u0026#34;  (let ((title (org-roam-node-title node)) \t(olp (org-roam-node-olp node)) \t(level (org-roam-node-level node)) \t(filetitle (org-roam-node-doom-filetitle node)) \t(separator (propertize \u0026#34; \u0026gt; \u0026#34; \u0026#39;face \u0026#39;shadow)))  (cl-case level  ;; node is a top-level file  (0 filetitle)  ;; node is a level 1 heading  (1 (concat (propertize filetitle \u0026#39;face \u0026#39;(shadow italic)) \tseparator title))  ;; node is a heading with an arbitrary outline path  (t (concat (propertize filetitle \u0026#39;face \u0026#39;(shadow italic)) \tseparator (propertize (string-join olp \u0026#34; \u0026gt; \u0026#34;) \u0026#39;face \u0026#39;(shadow italic)) \tseparator title))))) )  (setq org-roam-db-gc-threshold most-positive-fixnum  org-roam-completion-everywhere t  org-roam-directory (file-truename dn-roam)  org-roam-db-location (expand-file-name \u0026#34;org-roam.db\u0026#34; dn-cache-directory)  org-roam-node-display-template (concat \u0026#34;${type:15} ${doom-hierarchy:*} \u0026#34; (propertize \u0026#34;${tags:20}\u0026#34; \u0026#39;face \u0026#39;org-tag)))  (setq org-roam-capture-templates \u0026#39;((\u0026#34;a\u0026#34; \u0026#34;articles\u0026#34; plain \u0026#34;%?\u0026#34; \t:target (file+head \u0026#34;articles/${slug}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t) \t(\u0026#34;b\u0026#34; \u0026#34;Books\u0026#34; plain (file \u0026#34;~/.emacs.d/template/readinglog\u0026#34;) \t:target (file+head \u0026#34;books/${slug}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t) \t(\u0026#34;d\u0026#34; \u0026#34;default\u0026#34; plain \u0026#34;%?\u0026#34; \t:target (file+head \u0026#34;main/${slug}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t) \t(\u0026#34;p\u0026#34; \u0026#34;people\u0026#34; plain (file \u0026#34;~/.emacs.d/template/crm\u0026#34;) \t:target (file+head \u0026#34;crm/${slug}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t) \t(\u0026#34;r\u0026#34; \u0026#34;reference\u0026#34; plain (file \u0026#34;~/.emacs.d/template/reference\u0026#34;) \t:target (file+head \u0026#34;ref/${citekey}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t) \t(\u0026#34;w\u0026#34; \u0026#34;work\u0026#34; plain \u0026#34;%?\u0026#34; \t:target (file+head \u0026#34;work/${slug}.org\u0026#34; \t\u0026#34;#+TITLE: ${title}\\n#+CREATED: %U\\n#+MODIFIED: \\n\u0026#34;) \t:unnarrowed t)))     diary\n此处的实现来自晨间日记的奇迹的这本书。在当前的日期中显示过去的日记，这样就可以看到过去的今天自己干了什么，这个信息还是挺有用的。\n(defun my/history-morning-diary-body ()  (insert (format \u0026#34;** %s-%s\\n\u0026#34; (+ i init-year) cur-date))  (insert (concat \u0026#34;#+transclude: [[file:\u0026#34; (format \u0026#34;%s-%s.org\u0026#34; (+ i init-year) cur-date) \u0026#34;::Morning Diary]] :only-contents\\n\u0026#34;)))  (defun my/insert-history-morning-diary ()  \u0026#34;Insert my history diary to today diary, for convenient reflection my past time.\u0026#34;  (let* ((init-year 2022) \t(cur-year (format-time-string \u0026#34;%Y\u0026#34;)) \t(year-span (- (string-to-number (format-time-string \u0026#34;%Y\u0026#34;)) init-year)) \t(cur-date (format-time-string \u0026#34;%m-%d\u0026#34;)))  (cond  ((and (org-roam-dailies--daily-note-p) (= 0 year-span))  (progn \t(goto-char (org-find-exact-headline-in-buffer \u0026#34;History Diary\u0026#34;)) \t(forward-line) \t(insert \u0026#34;First Year Of Your Diary! KEEP NOTING EVERYTHING! Best Wishes!\\n\u0026#34;)))  ((and (org-roam-dailies--daily-note-p) (\u0026lt; 0 year-span))  (progn \t(goto-char (org-find-exact-headline-in-buffer \u0026#34;History Diary\u0026#34;)) \t(forward-line) \t(if (\u0026lt; year-span 4) \t(dotimes (i year-span) \t(my/history-morning-diary-body)) \t(dotimes (i 4) \t(my/history-morning-diary-body))))))))  (defun my/org-roam-dailies-exclude ()  (goto-char (point-min))  (org-set-property \u0026#34;ROAM_EXCLUDE\u0026#34; \u0026#34;t\u0026#34;)  (goto-char (point-max)))  (defun my/org-roam-morning-diary-body (tpl)  \u0026#34;Insert diary content to org-roam-dailies-today according TPL\u0026#34;  (org-roam-dailies-goto-today)  (my/org-roam-dailies-exclude)  (insert \u0026#34;\\n* Random Notes\\n\\n* GTD [/]\\n\\n* History Diary\\n\\n* Morning Diary\\n\\n* Clock Report\\n\\n\u0026#34;)  (my/insert-history-morning-diary)  (org-transclusion-add-all)  (goto-char (org-find-exact-headline-in-buffer \u0026#34;Clock Report\u0026#34;))  (forward-line)  (tempel-insert tpl)  (org-clock-report)  (goto-char (org-find-exact-headline-in-buffer \u0026#34;Morning Diary\u0026#34;))  (forward-line)  (tempel-insert \u0026#39;diary))  (defun my/omd-clock-report ()  \u0026#34;Update omd(org morning diary) clock report\u0026#34;  (goto-char (org-find-exact-headline-in-buffer \u0026#34;Clock Report\u0026#34;))  (forward-line)  (org-ctrl-c-ctrl-c))  (defun my/org-roam-morning-diary ()  \u0026#34;If org roam dailies today exist, then go to the file , update clock report and jump to Events If org roam dailies today do not exist, the create it. Weekend and daytime use different templeate to create org-clock-report\u0026#34;  (interactive)  (let* ((date (format-time-string \u0026#34;%Y-%m-%d\u0026#34;)) \t(org-roam-dailies-today (concat dn-roam \u0026#34;/daily/\u0026#34; date \u0026#34;.org\u0026#34;)) \t(weeknum (format-time-string \u0026#34;%u\u0026#34;)))  (org-roam-dailies-goto-today)  (if (file-exists-p org-roam-dailies-today) \t(progn \t(my/omd-clock-report) \t(goto-char (org-find-exact-headline-in-buffer \u0026#34;Random Notes\u0026#34;)))  (cond ((equal weeknum 7) \t(my/org-roam-morning-diary-body \u0026#39;weekend)) \t((not (equal weeknum 7)) \t(my/org-roam-morning-diary-body \u0026#39;clockday))))))  (global-set-key (kbd \u0026#34;\u0026lt;f6\u0026gt;\u0026#34;) \u0026#39;my/org-roam-morning-diary)     org-roam-ui\n(setq org-roam-ui-sync-theme t) (setq org-roam-ui-follow t) (setq org-roam-ui-update-on-save t) (setq org-roam-ui-open-on-start t)  (with-eval-after-load \u0026#39;org-roam-ui  (require \u0026#39;websocket))     org-roam buffer\n当当前打开的文件是 org-roam 文件时，自动打开 org-roam-buffer 。总是打开 org-roam-buffer 不太实用，并不是总是需要看这个 buffer 。得思考何时才需要使用，或者手动切换更合适。 https://github.com/org-roam/org-roam/issues/507\n(defun tim/org-roam-buffer-show (_)  (if (and  ;; don\u0026#39;t do anything if we\u0026#39;re in the minibuffer  (not (minibufferp))  ;; show org-roam buffer if the current buffer has a org-roam file  (xor (org-roam-file-p) (eq \u0026#39;visible (org-roam-buffer--visibility))))  (org-roam-buffer-toggle)))  (add-hook \u0026#39;window-buffer-change-functions \u0026#39;tim/org-roam-buffer-show)     search org-roam-node with rg\n(defun bms/org-roam-rg-search ()  \u0026#34;Search org-roam directory using consult-ripgrep. With live-preview.\u0026#34;  (interactive)  (let ((consult-ripgrep-command \t\u0026#34;rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS\u0026#34;))  (consult-ripgrep org-roam-directory)))   Bibtex manage   bibtex\n(setq bibtex-autokey-year-length 4) (setq bibtex-autokey-name-year-separator \u0026#34;-\u0026#34;) (setq bibtex-autokey-year-title-separator \u0026#34;-\u0026#34;) (setq bibtex-autokey-titleword-separator \u0026#34;-\u0026#34;) (setq bibtex-autokey-titlewords 2) (setq bibtex-autokey-titlewords-stretch 1) (setq bibtex-autokey-titleword-length 5)     bibtex-completion\n(setq bibtex-completion-library-path \u0026#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf\u0026#34;  bibtex-completion-bibliography \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib\u0026#34; \t\u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\u0026#34;)  bibtex-completion-notes-path \u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/ref\u0026#34;  bibtex-completion-additional-search-fields \u0026#39;(keywords journal booktitle)  bibtex-completion-pdf-symbol \u0026#34;P\u0026#34;  ;; bibtex-completion-pdf-symbol (all-the-icons-octicon \u0026#34;file-pdf\u0026#34;  ;; :height 1  ;; :v-adjust -0.05  ;; :face \u0026#39;font-lock-doc-face)  bibtex-completion-notes-symbol \u0026#34;N\u0026#34;  ;; bibtex-completion-notes-symbol (all-the-icons-octicon \u0026#34;file-text\u0026#34;  ;; :height 1  ;; :v-adjust -0.05  ;; :face \u0026#39;font-lock-doc-face)  bibtex-completion-display-formats \u0026#39;((article . \u0026#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\u0026#34;) \t(inbook . \u0026#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\u0026#34;) \t(incollection . \u0026#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) \t(inproceedings . \u0026#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) \t(t . \u0026#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}\u0026#34;))) ;; (setq bibtex-completion-pdf-symbol (all-the-icons-octicon \u0026#34;file-pdf\u0026#34;))     ebib\n(unless  (fboundp \u0026#39;ebib)  (autoload #\u0026#39;ebib \u0026#34;ebib\u0026#34; nil t))  (setq ebib-preload-bib-files \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib\u0026#34; \t\u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/Book.bib\u0026#34;)) (setq ebib-file-search-dirs \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf\u0026#34;)) (setq ebib-keywords (expand-file-name \u0026#34;ref/keywords.txt\u0026#34; dn-roam)) (setq ebib-notes-directory (expand-file-name \u0026#34;ref\u0026#34; dn-roam)) (setq ebib-filters-default-file (expand-file-name \u0026#34;ref/ebib-filters\u0026#34; dn-roam)) (setq ebib-reading-list-file (expand-file-name \u0026#34;ref/reading_list.org\u0026#34; dn-roam)) (setq ebib-keywords-field-keep-sorted t) (setq ebib-keywords-file-save-on-exit \u0026#39;always) ;; (setq ebib-index-columns \u0026#39;((\u0026#34;Entry Key\u0026#34; 30 t) (\u0026#34;Note\u0026#34; 1 nil) (\u0026#34;Year\u0026#34; 6 t) (\u0026#34;Author/Editor\u0026#34; 30 nil) (\u0026#34;Title\u0026#34; 50 t))) (setq ebib-index-columns \u0026#39;((\u0026#34;Entry Key\u0026#34; 30 t) (\u0026#34;Note\u0026#34; 1 nil) (\u0026#34;Title\u0026#34; 50 t))) (setq ebib-file-associations \u0026#39;((\u0026#34;ps\u0026#34; . \u0026#34;gv\u0026#34;)))  (global-set-key (kbd \u0026#34;\u0026lt;f2\u0026gt;\u0026#34;) \u0026#39;ebib)     import bib to ebib from zotero\n(defun my/ebib-import-from-zotero ()  \u0026#34;Import entry from zotero to ebib.\u0026#34;  (interactive)  (ebib)  (find-file \u0026#34;~/Documents/zotero.bib\u0026#34;)  (ebib-import-entries)  (quit-window-delete)  (ebib-quit-entry-buffer))     oc-csl\n(if (version\u0026lt; \u0026#34;9.5\u0026#34; org-version)  (progn  (require \u0026#39;oc-csl)  (setq org-cite-global-bibliography \u0026#39;(\u0026#34;/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib\u0026#34; \t\u0026#34;/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib\u0026#34;))  (setq org-cite-insert-processor \u0026#39;citar \torg-cite-follow-processor \u0026#39;citar \torg-cite-activate-processor \u0026#39;citar)))     citar\n(setq citar-bibliography \u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib\u0026#34;  citar-templates \u0026#39;((main . \u0026#34;${author editor:30} ${date year issued:4} ${title:48}\u0026#34;) \t(suffix . \u0026#34;${=key= id:15} ${=type=:12} ${tags keywords:*}\u0026#34;) \t(preview . \u0026#34;${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\u0026#34;) \t(note . \u0026#34;#+title: Notes on ${author editor}, ${title}\u0026#34;))  citar-at-point-function \u0026#39;embark-act  citar-open-note-function \u0026#39;orb-citar-edit-note  citar-notes-paths \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/ref\u0026#34;)  citar-library-paths \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf\u0026#34;))  (setq citar-symbols  `((file ,(all-the-icons-faicon \u0026#34;file-o\u0026#34; :face \u0026#39;all-the-icons-green :v-adjust -0.1) . \u0026#34; \u0026#34;) \t(note ,(all-the-icons-material \u0026#34;speaker_notes\u0026#34; :face \u0026#39;all-the-icons-blue :v-adjust -0.3) . \u0026#34; \u0026#34;) \t(link ,(all-the-icons-octicon \u0026#34;link\u0026#34; :face \u0026#39;all-the-icons-orange :v-adjust 0.01) . \u0026#34; \u0026#34;))) (setq citar-symbol-separator \u0026#34; \u0026#34;)     consult-bibtex\n(require \u0026#39;consult-bibtex)     org-roam-bibtex\n(setq orb-note-actions-interface \u0026#39;default  orb-roam-ref-format \u0026#39;org-cite)  (org-roam-bibtex-mode)   Tasks manage   Enhance function\n    org-gtd\n(unless  (fboundp \u0026#39;org-edna-mode)  (autoload #\u0026#39;org-edna-mode \u0026#34;org-gtd\u0026#34; nil t))  (require \u0026#39;org-gtd)  (setq org-edna-use-inheritance t  org-gtd-directory (expand-file-name \u0026#34;todos\u0026#34; dn-galaxy))  (add-hook \u0026#39;org-mode-hook #\u0026#39;org-edna-mode)  (with-eval-after-load \u0026#39;org-gtd  (define-key org-gtd-process-map (kbd \u0026#34;C-c C-c\u0026#34;) \u0026#39;org-gtd-choose))     org-agenda\n(add-hook \u0026#39;org-agenda-finalize-hook #\u0026#39;org-agenda-find-same-or-today-or-agenda 90)  (setq org-agenda-hide-tags-regexp (regexp-opt \u0026#39;(\u0026#34;project\u0026#34;))) ;; hide project tag (setq org-agenda-files `(,org-gtd-directory)) (setq org-agenda-prefix-format \u0026#39;((agenda . \u0026#34; %i %?-12t% s\u0026#34;) \t(todo . \u0026#34; %i\u0026#34;) \t(tags . \u0026#34; %i %-12:c\u0026#34;) \t(search . \u0026#34; %i %-12:c\u0026#34;)))  (setq org-agenda-tags-todo-honor-ignore-options t  org-agenda-start-on-weekday nil  org-agenda-dim-blocked-tasks nil  org-agenda-compact-blocks t  org-agenda-to-appt t)  (defun my/org-agenda ()  (interactive)  (org-agenda nil \u0026#34; \u0026#34;))  (with-eval-after-load \u0026#39;org  (define-key org-mode-map (kbd \u0026#34;C-,\u0026#34;) nil)  (define-key org-mode-map (kbd \u0026#34;C-\u0026#39;\u0026#34;) nil))     Dynamic agenda\n;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html (defun vulpea-project-p ()  \u0026#34;Return non-nil if current buffer has any todo entry. TODO entries marked as done are ignored, meaning the this function returns nil if current buffer contains only completed tasks.\u0026#34;  (seq-find ; (3)  (lambda (type)  (or (eq type \u0026#39;todo) \t(eq type \u0026#39;done)))  (org-element-map ; (2)  (org-element-parse-buffer \u0026#39;headline) ; (1)  \u0026#39;headline  (lambda (h)  (org-element-property :todo-type h)))))  (defun vulpea-project-update-tag ()  \u0026#34;Update PROJECT tag in the current buffer.\u0026#34;  (when (and (not (active-minibuffer-window)) \t(vulpea-buffer-p))  (save-excursion  (goto-char (point-min))  (let* ((tags (vulpea-buffer-tags-get)) \t(original-tags tags)) \t(if (vulpea-project-p) \t(setq tags (cons \u0026#34;project\u0026#34; tags)) \t(setq tags (remove \u0026#34;project\u0026#34; tags)))  \t;; cleanup duplicates \t(setq tags (seq-uniq tags))  \t;; update tags if changed \t(when (or (seq-difference tags original-tags) \t(seq-difference original-tags tags)) \t(apply #\u0026#39;vulpea-buffer-tags-set tags))))))  (defun vulpea-buffer-p ()  \u0026#34;Return non-nil if the currently visited buffer is a note.\u0026#34;  (and buffer-file-name  (string-prefix-p \t(expand-file-name (file-name-as-directory org-roam-directory)) \t(file-name-directory buffer-file-name))))  ;; (defun vulpea-project-files () ;; \u0026#34;Return a list of note files containing \u0026#39;project\u0026#39; tag.\u0026#34; ; ;; (seq-uniq ;; (seq-map ;; #\u0026#39;car ;; (org-roam-db-query ;; [:select [nodes:file] ;; :from tags ;; :left-join nodes ;; :on (= tags:node-id nodes:id) ;; :where (like tag (quote \u0026#34;%\\\u0026#34;project\\\u0026#34;%\u0026#34;))]))))  ;; (defun vulpea-agenda-files-update (\u0026amp;rest _) ;; \u0026#34;Update the value of `org-agenda-files\u0026#39;.\u0026#34; ;; (setq org-agenda-files (vulpea-project-files)))   ;; functions borrowed from `vulpea\u0026#39; library ;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el  (defun vulpea-buffer-tags-get ()  \u0026#34;Return filetags value in current buffer.\u0026#34;  (vulpea-buffer-prop-get-list \u0026#34;filetags\u0026#34; \u0026#34;[ :]\u0026#34;))  (defun vulpea-buffer-tags-set (\u0026amp;rest tags)  \u0026#34;Set TAGS in current buffer. If filetags value is already set, replace it.\u0026#34;  (if tags  (vulpea-buffer-prop-set  \u0026#34;filetags\u0026#34; (concat \u0026#34;:\u0026#34; (string-join tags \u0026#34;:\u0026#34;) \u0026#34;:\u0026#34;))  (vulpea-buffer-prop-remove \u0026#34;filetags\u0026#34;)))  (defun vulpea-buffer-tags-add (tag)  \u0026#34;Add a TAG to filetags in current buffer.\u0026#34;  (let* ((tags (vulpea-buffer-tags-get)) \t(tags (append tags (list tag))))  (apply #\u0026#39;vulpea-buffer-tags-set tags)))  (defun vulpea-buffer-tags-remove (tag)  \u0026#34;Remove a TAG from filetags in current buffer.\u0026#34;  (let* ((tags (vulpea-buffer-tags-get)) \t(tags (delete tag tags)))  (apply #\u0026#39;vulpea-buffer-tags-set tags)))  (defun vulpea-buffer-prop-set (name value)  \u0026#34;Set a file property called NAME to VALUE in buffer file. If the property is already set, replace its value.\u0026#34;  (setq name (downcase name))  (org-with-point-at 1  (let ((case-fold-search t))  (if (re-search-forward (concat \u0026#34;^#\\\\+\u0026#34; name \u0026#34;:\\\\(.*\\\\)\u0026#34;) \t(point-max) t) \t(replace-match (concat \u0026#34;#+\u0026#34; name \u0026#34;: \u0026#34; value) \u0026#39;fixedcase) \t(while (and (not (eobp)) \t(looking-at \u0026#34;^[#:]\u0026#34;)) \t(if (save-excursion (end-of-line) (eobp)) \t(progn \t(end-of-line) \t(insert \u0026#34;\\n\u0026#34;)) \t(forward-line) \t(beginning-of-line))) \t(insert \u0026#34;#+\u0026#34; name \u0026#34;: \u0026#34; value \u0026#34;\\n\u0026#34;)))))  (defun vulpea-buffer-prop-set-list (name values \u0026amp;optional separators)  \u0026#34;Set a file property called NAME to VALUES in current buffer. VALUES are quoted and combined into single string using `combine-and-quote-strings\u0026#39;. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators\u0026#39;, normally \\\u0026#34;[ \\f\\t\\n\\r\\v]+\\\u0026#34;, and OMIT-NULLS is forced to t. If the property is already set, replace its value.\u0026#34;  (vulpea-buffer-prop-set  name (combine-and-quote-strings values separators)))  (defun vulpea-buffer-prop-get (name)  \u0026#34;Get a buffer property called NAME as a string.\u0026#34;  (org-with-point-at 1  (when (re-search-forward (concat \u0026#34;^#\\\\+\u0026#34; name \u0026#34;: \\\\(.*\\\\)\u0026#34;) \t(point-max) t)  (buffer-substring-no-properties  (match-beginning 1)  (match-end 1)))))  (defun vulpea-buffer-prop-get-list (name \u0026amp;optional separators)  \u0026#34;Get a buffer property NAME as a list using SEPARATORS. If SEPARATORS is non-nil, it should be a regular expression matching text that separates, but is not part of, the substrings. If nil it defaults to `split-string-default-separators\u0026#39;, normally \\\u0026#34;[ \\f\\t\\n\\r\\v]+\\\u0026#34;, and OMIT-NULLS is forced to t.\u0026#34;  (let ((value (vulpea-buffer-prop-get name)))  (when (and value (not (string-empty-p value)))  (split-string-and-unquote value separators))))  (defun vulpea-buffer-prop-remove (name)  \u0026#34;Remove a buffer property called NAME.\u0026#34;  (org-with-point-at 1  (when (re-search-forward (concat \u0026#34;\\\\(^#\\\\+\u0026#34; name \u0026#34;:.*\\n?\\\\)\u0026#34;) \t(point-max) t)  (replace-match \u0026#34;\u0026#34;))))  ;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/ (defun my/org-roam-filter-by-tag (tag-name)  (lambda (node)  (member tag-name (org-roam-node-tags node))))  (defun my/org-roam-list-notes-by-tag (tag-name)  (mapcar #\u0026#39;org-roam-node-file \t(seq-filter \t(my/org-roam-filter-by-tag tag-name) \t(org-roam-node-list))))  (defun my/org-roam-refresh-agenda-list ()  (interactive)  (dolist (project-file (my/org-roam-list-notes-by-tag \u0026#34;project\u0026#34;))  (add-to-list \u0026#39;org-agenda-files project-file)))  (add-hook \u0026#39;find-file-hook #\u0026#39;vulpea-project-update-tag) (add-hook \u0026#39;before-save-hook #\u0026#39;vulpea-project-update-tag) ;; (add-hook \u0026#39;org-agenda-mode-hook #\u0026#39;my/org-roam-refresh-agenda-list) (add-hook \u0026#39;after-init-hook #\u0026#39;my/org-roam-refresh-agenda-list)     Org agenda view\n(setq org-agenda-custom-commands  \u0026#39;((\u0026#34; \u0026#34; \u0026#34;Agendas\u0026#34; \t((agenda \u0026#34;\u0026#34; ((org-agenda-span \u0026#39;day) \t(org-super-agenda-groups \t\u0026#39;((:name \u0026#34;Today with specific time\u0026#34; \t:time-grid t \t:order 1) \t(:name \u0026#34;Habit and Daily Review: DO IT EVERYDAY\u0026#34; \t:and (:scheduled t :tag (\u0026#34;Habit\u0026#34; \u0026#34;Review\u0026#34;) :todo \u0026#34;NEXT\u0026#34;) \t:order 2) \t(:name \u0026#34;Life and Family: WITH SCHEDULED TODAY\u0026#34; \t:and (:tag (\u0026#34;Family\u0026#34; \u0026#34;Son\u0026#34; \u0026#34;Daughter\u0026#34; \u0026#34;Wife\u0026#34; \u0026#34;Parents\u0026#34; \u0026#34;Life\u0026#34; \u0026#34;Memorial\u0026#34; \u0026#34;Insurance\u0026#34;) :scheduled today) \t:order 2) \t(:name \u0026#34;Finance\u0026#34; \t:and (:tag (\u0026#34;Finance\u0026#34;) :scheduled today)) \t(:name \u0026#34;Due Today\u0026#34; \t:deadline today \t:face (:foreground \u0026#34;Red\u0026#34; :underline t) \t:order 0) \t(:name \u0026#34;Due Soon\u0026#34; \t:deadline future \t:order 3) \t(:name \u0026#34;Overdue\u0026#34; \t:deadline past \t:order 4) \t(:discard (:tag (\u0026#34;Review\u0026#34;))))))) \t(todo \u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;) \t(org-super-agenda-groups \t\u0026#39;((:name \u0026#34;Projects lists\u0026#34; \t:children t \t:order 0) \t(:name \u0026#34;Next List: DO IT ASAP.\u0026#34; \t:and (:todo \u0026#34;NEXT\u0026#34; :scheduled nil :deadline nil :not (:tag (\u0026#34;Review\u0026#34; \u0026#34;FunTime\u0026#34; \u0026#34;Reading\u0026#34;)))) \t(:name \u0026#34;Life and Family: WITHOUT SCHEDULED\u0026#34; \t:and (:tag (\u0026#34;Family\u0026#34; \u0026#34;Son\u0026#34; \u0026#34;Daughter\u0026#34; \u0026#34;Wife\u0026#34; \u0026#34;Parents\u0026#34; \u0026#34;Life\u0026#34; \u0026#34;Memorial\u0026#34;) :scheduled nil) \t:order 2) \t(:name \u0026#34;Work\u0026#34; \t:and (:tag (\u0026#34;Work\u0026#34;) :scheduled nil) \t:order 2) \t(:name \u0026#34;Reading lists\u0026#34; \t:tag \u0026#34;Reading\u0026#34;) \t(:name \u0026#34;Fun time\u0026#34; \t:and (:tag (\u0026#34;FunTime\u0026#34;) :scheduled nil)) ;; 此为 funtime ，无 scheduled ，因为有 scheduled ，当时间到的时该应该显示在 schedule 中。 \t(:name \u0026#34;COMPUTER SCIENCE\u0026#34; \t:and (:tag (\u0026#34;Emacs\u0026#34; \u0026#34;Arch\u0026#34; \u0026#34;Linux\u0026#34; \u0026#34;Ubuntu\u0026#34; \u0026#34;Windows\u0026#34; \u0026#34;Computer\u0026#34;)) \t:order 80) \t(:discard (:scheduled t :deadline t)))))) \t(todo \u0026#34;SOMEDAY\u0026#34; ((org-agenda-overriding-header \u0026#34;==============MAYBE FUTURE==============\u0026#34;))) \t(todo \u0026#34;WAIT\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;))) \t(todo \u0026#34;CNCL\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;)))))))  (add-hook \u0026#39;after-init-hook \u0026#39;org-super-agenda-mode) ;; (org-super-agenda-mode) (setq org-agenda-custom-commands  \u0026#39;((\u0026#34; \u0026#34; \u0026#34;Agendas\u0026#34; \t((agenda \u0026#34;\u0026#34; ((org-agenda-span \u0026#39;day) \t(org-super-agenda-groups \t\u0026#39;((:name \u0026#34;Scheduled earlier\u0026#34; \t:scheduled past) \t(:name \u0026#34;Today\u0026#34; \t:and (:scheduled today :not (:tag (\u0026#34;Family\u0026#34; \u0026#34;Reading\u0026#34;)))) \t(:name \u0026#34;Due Today\u0026#34; \t:deadline today \t:face (:foreground \u0026#34;Red\u0026#34; :underline t) \t:order 0) \t(:name \u0026#34;Due Soon\u0026#34; \t:deadline future \t:order 3) \t(:name \u0026#34;Overdue\u0026#34; \t:deadline past \t:order 4) \t(:discard (:anything t)))))) \t(todo \u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;) \t(org-super-agenda-groups \t\u0026#39;((:name \u0026#34;Next List: DO IT ASAP.\u0026#34; \t:and (:todo \u0026#34;NEXT\u0026#34; :scheduled nil :deadline nil :not (:tag (\u0026#34;Review\u0026#34; \u0026#34;FunTime\u0026#34; \u0026#34;Reading\u0026#34;)))) \t(:name \u0026#34;Family\u0026#34; \t:and (:tag (\u0026#34;Family\u0026#34; \u0026#34;Life\u0026#34; \u0026#34;Memorial\u0026#34; \u0026#34;Insurance\u0026#34;) :scheduled today)) \t(:name \u0026#34;Projects lists\u0026#34; \t:children t \t:order 0) \t(:habit t) \t(:name \u0026#34;Work\u0026#34; \t:and (:tag (\u0026#34;Work\u0026#34;) :scheduled nil) \t:order 2) \t(:name \u0026#34;Reading lists\u0026#34; \t:tag \u0026#34;Reading\u0026#34;) \t(:name \u0026#34;Fun time\u0026#34; \t:and (:tag (\u0026#34;FunTime\u0026#34;) :scheduled nil)) \t(:name \u0026#34;COMPUTER SCIENCE\u0026#34; \t:and (:tag (\u0026#34;Emacs\u0026#34; \u0026#34;Arch\u0026#34; \u0026#34;Linux\u0026#34; \u0026#34;Ubuntu\u0026#34; \u0026#34;Windows\u0026#34; \u0026#34;Computer\u0026#34;)) \t:order 80) \t(:discard (:scheduled t :deadline t)))))) \t(todo \u0026#34;SOMEDAY\u0026#34; ((org-agenda-overriding-header \u0026#34;==============MAYBE FUTURE==============\u0026#34;))) \t(todo \u0026#34;WAIT\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;))) \t(todo \u0026#34;CNCL\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;)))))))  (add-hook \u0026#39;after-init-hook \u0026#39;org-super-agenda-mode) (with-eval-after-load \u0026#39;org-super-agenda  (define-key org-super-agenda-header-map (kbd \u0026#34;j\u0026#34;) nil)  (define-key org-super-agenda-header-map (kbd \u0026#34;k\u0026#34;) nil))     org-caldav\n(require \u0026#39;org-caldav)  (setq org-caldav-calendar-id \u0026#34;gtd\u0026#34;)  (setq org-caldav-inbox \u0026#34;~/Nextcloud/L.Personal.Galaxy/todos/inbox.org\u0026#34;  org-caldav-files \u0026#39;(\u0026#34;~/Nextcloud/L.Personal.Galaxy/todos/org-gtd-tasks.org\u0026#34;))   (setq org-caldav-select-tags \u0026#39;(\u0026#34;gtd\u0026#34;)) (setq org-caldav-exclude-tags \u0026#39;(\u0026#34;nogtd\u0026#34;)) (setq org-icalendar-timezone \u0026#34;Asia/Shanghai\u0026#34;)  (setq org-icalendar-include-todo \u0026#39;all) (setq org-caldav-todo-percent-states \u0026#39;((0 \u0026#34;SOMEDAY\u0026#34;) \t(1 \u0026#34;TODO\u0026#34;) \t(2 \u0026#34;NEXT\u0026#34;) \t(10 \u0026#34;WAIT\u0026#34;) \t(100 \u0026#34;DONE\u0026#34;))) (setq org-caldav-sync-todo t) 动态的更新 org-caldav-files ，和 org-agenda-files 一样。\n(defun my/org-caldav-refresh-list ()  (interactive)  (dolist (project-file (my/org-roam-list-notes-by-tag \u0026#34;project\u0026#34;))  (add-to-list \u0026#39;org-caldav-files project-file)))  (add-hook \u0026#39;after-init-hook #\u0026#39;my/org-caldav-refresh-list) 只当8点到23点之间，自动与服务器同步。当 Emacs 闲置 5 分钟时进行同步，以免卡 Emacs 。\n(defun my/org-caldav-sync ()  (interactive)  (org-caldav-sync)  (quit-window-delete))  ;; (defun my/org-caldav-sync-start () ;; (interactive) ;; (let* ((current-time (string-to-number (format-time-string \u0026#34;%H\u0026#34;))) ;; (morning-time 8) ;; (evening-time 23)) ;; (if (and (\u0026lt; morning-time current-time) ;; (\u0026lt; current-time evening-time)) ;; (run-with-idle-timer 10 t #\u0026#39;my/org-caldav-sync) ;; (my/org-caldav-sync))))  (let* ((current-time (string-to-number (format-time-string \u0026#34;%H\u0026#34;)))  (morning-time 8)  (evening-time 23))  (if (and (\u0026lt; morning-time current-time) \t(\u0026lt; current-time evening-time))  (run-with-idle-timer 60 t #\u0026#39;my/org-caldav-sync)))   Org Export   ox-hugo\n(with-eval-after-load \u0026#39;ox  (require \u0026#39;ox-hugo))     export org to docx with pandoc\n(defun org-export-docx ()  \u0026#34;Convert org to docx.\u0026#34;  (interactive)  (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) \u0026#34;.docx\u0026#34;)) \t(template-file (expand-file-name \u0026#34;template.docx\u0026#34; dn-template-directory)))  (shell-command (format \u0026#34;pandoc %s -o %s --reference-doc=%s\u0026#34; (buffer-file-name) docx-file template-file))  (message \u0026#34;Convert finish: %s\u0026#34; docx-file)))   Latex Defaults (setq org-highlight-latex-and-related \u0026#39;(latex script)) ox-latex (setq org-highlight-latex-and-related \u0026#39;(latex script))  (with-eval-after-load \u0026#39;ox-latex  (add-to-list \u0026#39;org-latex-classes \t\u0026#39;(\u0026#34;dissertation\u0026#34; \t\u0026#34;\\\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]\u0026#34; \t(\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) \t(\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) \t(\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) \t(\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) \t(\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) \t(\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))))  (setq org-latex-compiler \u0026#34;xelatex\u0026#34;  org-latex-pdf-process \u0026#39;(\u0026#34;xelatex -interaction nonstopmode %f\u0026#34; \t\u0026#34;bibtex %b\u0026#34; \t\u0026#34;xelatex -interaction nonstopmode %f\u0026#34; \t\u0026#34;xelatex -interaction nonstopmode %f\u0026#34; \t\u0026#34;rm -fr %b.out %b.log %b.tex %b.brf %b.bbl\u0026#34;)  org-latex-logfiles-extensions \u0026#39;(\u0026#34;lof\u0026#34; \u0026#34;lot\u0026#34; \u0026#34;tex~\u0026#34; \u0026#34;aux\u0026#34; \u0026#34;idx\u0026#34; \u0026#34;log\u0026#34; \u0026#34;out\u0026#34; \u0026#34;toc\u0026#34; \u0026#34;nav\u0026#34; \u0026#34;snm\u0026#34; \u0026#34;vrb\u0026#34; \u0026#34;dvi\u0026#34; \u0026#34;fdb_latexmk\u0026#34; \u0026#34;blg\u0026#34; \u0026#34;brf\u0026#34; \u0026#34;fls\u0026#34; \u0026#34;entoc\u0026#34; \u0026#34;ps\u0026#34; \u0026#34;spl\u0026#34; \u0026#34;bbl\u0026#34;)  org-latex-prefer-user-labels t) org-latex-impatient 可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。\n(require \u0026#39;org-latex-impatient)  (add-hook \u0026#39;org-mode-hook \u0026#39;org-latex-impatient-mode)  (setq org-latex-impatient-tex2svg-bin \u0026#34;~/node_modules/mathjax-node-cli/bin/tex2svg\u0026#34;)  (setq org-latex-impatient-scale 3.0) Application Calendar (require \u0026#39;cal-china-x)  (setq calendar-mode-line-format nil)  (setq calendar-mark-holidays-flag t  cal-china-x-important-holidays cal-china-x-chinese-holidays  cal-china-x-general-holidays \u0026#39;((holiday-lunar 1 15 \u0026#34;元宵节\u0026#34;) \t(holiday-lunar 7 7 \u0026#34;七夕节\u0026#34;) \t(holiday-fixed 3 8 \u0026#34;妇女节\u0026#34;) \t(holiday-fixed 3 12 \u0026#34;植树节\u0026#34;) \t(holiday-fixed 5 4 \u0026#34;青年节\u0026#34;) \t(holiday-fixed 6 1 \u0026#34;儿童节\u0026#34;) \t(holiday-fixed 9 10 \u0026#34;教师节\u0026#34;))  holiday-other-holidays \u0026#39;((holiday-fixed 2 14 \u0026#34;情人节\u0026#34;) \t(holiday-fixed 4 1 \u0026#34;愚人节\u0026#34;) \t(holiday-fixed 12 25 \u0026#34;圣诞节\u0026#34;) \t(holiday-float 5 0 2 \u0026#34;母亲节\u0026#34;) \t(holiday-float 6 0 3 \u0026#34;父亲节\u0026#34;) \t(holiday-float 11 4 4 \u0026#34;感恩节\u0026#34;))  calendar-holidays (append cal-china-x-important-holidays \tcal-china-x-general-holidays \tholiday-other-holidays)) PDF Reader pdf tools 如果不想高亮文件后打开标注，可以将 pdf-annot-activate-created-annotations 设置为 nil 。\n(pdf-tools-install t nil t nil)  (setq pdf-view-use-scaling t  pdf-view-use-imagemagick nil  pdf-annot-activate-created-annotations t  pdf-misc-print-program-executable \u0026#34;/usr/bin/lp\u0026#34;)  (add-to-list \u0026#39;revert-without-query \u0026#34;.+\\\\.pdf\u0026#34;)  (add-hook \u0026#39;pdf-tools-enabled-hook \u0026#39;pdf-view-themed-minor-mode)  (with-eval-after-load \u0026#39;pdf-outline  (define-key pdf-outline-buffer-mode-map (kbd \u0026#34;\u0026lt;RET\u0026gt;\u0026#34;) \u0026#39;pdf-outline-follow-link-and-quit)) pdf print 可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 Marcel van der Boom 的配置文件。\n(defun mrb/pdf-misc-print-pages(filename pages \u0026amp;optional interactive-p)  \u0026#34;Wrapper for `pdf-misc-print-document` to add page selection support\u0026#34;  (interactive (list (pdf-view-buffer-file-name) \t(read-string \u0026#34;Page range (empty for all pages): \u0026#34; \t(number-to-string (pdf-view-current-page))) \tt) pdf-view-mode)  (let ((pdf-misc-print-program-args \t(if (not (string-blank-p pages)) \t(cons (concat \u0026#34;-P \u0026#34; pages) pdf-misc-print-program-args) \tpdf-misc-print-program-args)))  (pdf-misc-print-document filename))) pdf key settings 绑定 w ，获得文件名，我不需要那一大串路径。\n(defun my/get-file-name ()  (interactive)  (kill-new (file-name-base (buffer-file-name)))  (message \u0026#34;Copied %s\u0026#34; (file-name-base (buffer-file-name))))  (define-key pdf-view-mode-map (kbd \u0026#34;w\u0026#34;) \u0026#39;my/get-file-name) 重新定义按键，相比原来的 C-x C-a h 等按键设定要方便的多。\n(define-key pdf-view-mode-map (kbd \u0026#34;h\u0026#34;) \u0026#39;pdf-annot-add-highlight-markup-annotation) (define-key pdf-view-mode-map (kbd \u0026#34;t\u0026#34;) \u0026#39;pdf-annot-add-text-annotation) (define-key pdf-view-mode-map (kbd \u0026#34;d\u0026#34;) \u0026#39;pdf-annot-delete) (define-key pdf-view-mode-map (kbd \u0026#34;q\u0026#34;) \u0026#39;kill-this-buffer)  (define-key pdf-view-mode-map [remap pdf-misc-print-document] \u0026#39;mrb/pdf-misc-print-pages)  (with-eval-after-load \u0026#39;pdf-annot  (define-key pdf-annot-edit-contents-minor-mode-map (kbd \u0026#34;\u0026lt;return\u0026gt;\u0026#34;) \u0026#39;pdf-annot-edit-contents-commit)  (define-key pdf-annot-edit-contents-minor-mode-map (kbd \u0026#34;\u0026lt;S-return\u0026gt;\u0026#34;) \u0026#39;newline)) save place saveplace-pdf-view 可以保存 pdf 视图的位置。\n(save-place-mode 1)  (with-eval-after-load \u0026#39;save-place  (advice-add \u0026#39;save-place-find-file-hook :around #\u0026#39;saveplace-pdf-view-find-file-advice)  (advice-add \u0026#39;save-place-to-alist :around #\u0026#39;saveplace-pdf-view-to-alist-advice)) pdf annotations Create pdf annotations file.\n(defun my/edit-notes ()  \u0026#34;Edit reference note base pdf name.\u0026#34;  (interactive)  (if (equal (file-name-extension (buffer-name)) \u0026#34;pdf\u0026#34;)  (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name)))  (consult-bibtex-edit-notes (consult-bibtex--read-entry)))) Extract pdf annotations with pdfannots.\n(defun my/org-delete-heading-content (heading)  \u0026#34;Delete content of specific HEADING\u0026#34;  (org-map-entries  (lambda ()  (let ((name (nth 4 (org-heading-components))))  (if (string= name heading) \t(save-restriction \t(org-mark-subtree) \t(forward-line) \t(delete-region (region-beginning) (region-end))))))))  (defun my/extract-pdf-annots-to-ref-note ()  (interactive)  (let (annots)  (setf annots (shell-command-to-string (format \u0026#34;pdfannots.py %s\u0026#34; (find-file (buffer-name)))))  (consult-bibtex-edit-notes (file-name-sans-extension (buffer-name)))  (my/org-delete-heading-content \u0026#34;Research Contribution\u0026#34;)  (goto-char (org-find-exact-headline-in-buffer \u0026#34;Research Contribution\u0026#34;))  (forward-line)  (dolist (item (split-string annots \u0026#34;\\n\u0026#34;))  (if (string-prefix-p \u0026#34; \u0026gt;\u0026#34; item) \t(princ (concat (replace-regexp-in-string \u0026#34; \u0026gt;\u0026#34; \u0026#34;+\u0026#34; item) \u0026#34;\\n\u0026#34;) \t(current-buffer)))))) GIT Magit Magit related configuration\n(setq transient-history-file (expand-file-name \u0026#34;transient/history.el\u0026#34; dn-cache-directory))  (with-eval-after-load \u0026#39;magit  (setq magit-display-buffer-function \u0026#39;magit-display-buffer-fullframe-status-topleft-v1)  (magit-add-section-hook \u0026#39;magit-status-sections-hook \t\u0026#39;magit-insert-modules \t\u0026#39;magit-insert-stashes \t\u0026#39;append)) git-timemachine (unless  (fboundp \u0026#39;git-timemachine)  (autoload #\u0026#39;git-timemachine \u0026#34;git-timemachine\u0026#34; nil t)) Browse at remote (require \u0026#39;browse-at-remote) Terminal eshell (global-set-key (kbd \u0026#34;C-`\u0026#34;) \u0026#39;eshell)  (setq eshell-directory-name (expand-file-name \u0026#34;eshell\u0026#34; dn-cache-directory)) eshell-info-banner (add-hook \u0026#39;eshell-banner-load-hook \u0026#39;eshell-info-banner-update-banner) shell path (exec-path-from-shell-initialize) Rss management elfeed (setq elfeed-db-directory (expand-file-name \u0026#34;elfeed\u0026#34; dn-cache-directory))  (add-hook \u0026#39;elfeed-search-mode-hook \u0026#39;elfeed-update)  (setq elfeed-show-entry-switch #\u0026#39;elfeed-display-buffer) elfeed buffer display. 代码借鉴自 karthink 的配置。这样可以去掉 elfeed-goodies 这个包了。\n(defun elfeed-display-buffer (buf \u0026amp;optional act)  (pop-to-buffer buf \u0026#39;((display-buffer-reuse-window display-buffer-in-side-window) \t(side . bottom) \t(window-height . 0.8) \t(reusable-frames . visible) \t(window-parameters \t(select . t) \t(quit . t) \t(popup . t))))) elfeed-org (with-eval-after-load \u0026#39;elfeed  (setq rmh-elfeed-org-files (list \u0026#34;~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org\u0026#34;))  (elfeed-org)) elfeed-score (with-eval-after-load \u0026#39;elfeed  (setq elfeed-score-rule-stats-file (expand-file-name \u0026#34;elfeed.stats\u0026#34; dn-cache-directory))  (elfeed-score-enable)  (define-key elfeed-search-mode-map \u0026#34;=\u0026#34; elfeed-score-map)) elfeed-summary (require \u0026#39;elfeed-summary)  (add-hook \u0026#39;elfeed-summary-mode-hook \u0026#39;elfeed-update) Email 我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（Installation）。 Macos 上安装的可见，Blog，目前最详细的。\nmu4e (unless  (fboundp \u0026#39;mu4e)  (autoload #\u0026#39;mu4e \u0026#34;mu4e\u0026#34; nil t))  (setq mu4e-mu-binary (executable-find \u0026#34;mu\u0026#34;)  mu4e-get-mail-command (concat (executable-find \u0026#34;mbsync\u0026#34;) \u0026#34; -a\u0026#34;))  (setq mu4e-maildir \u0026#34;~/.maildir\u0026#34;  mu4e-attachment-dir \u0026#34;~/Downloads/\u0026#34;)  (setq mu4e-use-fancy-chars t) (setq mu4e-headers-precise-alignment t)  ;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el (set-fontset-font t \u0026#39;(#xe0e1 . #xe0e1) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe159 . #xe159) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe7f5 . #xe7f5) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe5ca . #xe5ca) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe63f . #xe63f) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe0e1 . #xe0e1) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe151 . #xe151) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe2bc . #xe2bc) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe3b5 . #xe3b5) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe153 . #xe153) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe15f . #xe15f) (font-spec :family \u0026#34;Material Icons\u0026#34;)) (set-fontset-font t \u0026#39;(#xe92b . #xe92b) (font-spec :family \u0026#34;Material Icons\u0026#34;))  (setq mu4e-headers-seen-mark `(\u0026#34;S\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;mail_outline\u0026#34;) \t\u0026#39;face `(:family ,(all-the-icons-material-family) \t:foreground ,(face-background \u0026#39;default))))  mu4e-headers-new-mark `(\u0026#34;N\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;markunread\u0026#34;) \t\u0026#39;face `(:family ,(all-the-icons-material-family) \t:foreground ,(face-background \u0026#39;default))))  mu4e-headers-unread-mark `(\u0026#34;u\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;notifications_none\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-unread-face))  mu4e-headers-signed-mark `(\u0026#34;s\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;check\u0026#34;) \t\u0026#39;face `(:family ,(all-the-icons-material-family) \t:foreground \u0026#34;DarkCyan\u0026#34;)))  mu4e-headers-encrypted-mark `(\u0026#34;x\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;enhanced_encryption\u0026#34;) \t\u0026#39;face `(:family ,(all-the-icons-material-family) \t:foreground \u0026#34;CornflowerBlue\u0026#34;)))  mu4e-headers-draft-mark `(\u0026#34;D\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;drafts\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-draft-face))  mu4e-headers-attach-mark `(\u0026#34;a\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;attachment\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-attach-number-face))  mu4e-headers-passed-mark `(\u0026#34;P\u0026#34; . ,(propertize ; ❯ (I\u0026#39;m participated in thread) \t(all-the-icons-material \u0026#34;center_focus_weak\u0026#34;) \t\u0026#39;face `(:family ,(all-the-icons-material-family) \t:foreground \u0026#34;yellow\u0026#34;)))  mu4e-headers-flagged-mark `(\u0026#34;F\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;flag\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-flagged-face))  mu4e-headers-replied-mark `(\u0026#34;R\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;reply_all\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-replied-face))  mu4e-headers-trashed-mark `(\u0026#34;T\u0026#34; . ,(propertize \t(all-the-icons-material \u0026#34;delete_forever\u0026#34;) \t\u0026#39;face \u0026#39;mu4e-trashed-face)))  (setq mail-user-agent \u0026#39;mu4e-user-agent  mu4e-update-interval 600  mu4e-index-update-in-background t  mu4e-index-update-error-warning t  mu4e-view-show-images t  mu4e-view-image-max-width 800  mu4e-confirm-quit nil  mu4e-view-show-addresses t  mu4e-headers-include-related t  mu4e-headers-auto-update t  mu4e-index-update-error-warning nil  mu4e-index-cleanup t  mu4e-context-policy \u0026#39;pick-first  mu4e-headers-date-format \u0026#34;%d/%m/%y\u0026#34;  mu4e-headers-time-format \u0026#34;%H:%M\u0026#34;  mu4e-headers-fields \u0026#39;((:flags . 6) \t(:human-date . 9) \t(:subject . 90) \t(:from-or-to . 40) \t(:tags . 20))  mu4e-compose-reply-ignore-address \u0026#39;(\u0026#34;no-?reply\u0026#34; \u0026#34;duan_n@outlook.com\u0026#34;)  mu4e-bookmarks \u0026#39;((\u0026#34;flag:unread AND NOT flag:trashed\u0026#34; \u0026#34;Unread messages\u0026#34; ?u) \t(\u0026#34;date:today..now\u0026#34; \u0026#34;Today\u0026#39;s messages\u0026#34; ?t) \t(\u0026#34;date:7d..now\u0026#34; \u0026#34;Last 7 days\u0026#34; ?w) \t(\u0026#34;date:1d..now AND NOT list:emacs-orgmode.gnu.org\u0026#34; \u0026#34;Last 1 days\u0026#34; ?o) \t(\u0026#34;date:1d..now AND list:emacs-orgmode.gnu.org\u0026#34; \u0026#34;Last 1 days (org mode)\u0026#34; ?m) \t(\u0026#34;maildir:/drafts\u0026#34; \u0026#34;drafts\u0026#34; ?d) \t(\u0026#34;flag:flagged AND NOT flag:trashed\u0026#34; \u0026#34;flagged\u0026#34; ?f) \t(\u0026#34;mime:image/*\u0026#34; \u0026#34;Messages with images\u0026#34; ?p)))  (with-eval-after-load \u0026#39;mu4e  (setq mu4e-sent-folder \u0026#34;/outlook/Sent\u0026#34; \tmu4e-drafts-folder \u0026#34;/outlook/Drafts\u0026#34; \tmu4e-trash-folder \u0026#34;/outlook/Deleted\u0026#34; \tmu4e-refile-folder \u0026#34;/outlook/Archive\u0026#34;))  ;; (add-hook \u0026#39;after-init-hook \u0026#39;mu4e) (mu4e \u0026#39;background) mu4e-alert (with-eval-after-load \u0026#39;mu4e  (mu4e-alert-set-default-style \u0026#39;notifier)  (add-hook \u0026#39;after-init-hook #\u0026#39;mu4e-alert-enable-notifications)  (with-eval-after-load \u0026#39;doom-modeline  (mu4e-alert-enable-mode-line-display))) sent mail (setq message-send-mail-function \u0026#39;smtpmail-send-it) mu4e-column-faces (with-eval-after-load \u0026#39;mu4e  (mu4e-column-faces-mode)) Org-msg (setq org-msg-options \u0026#34;html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\\\n:t\u0026#34;  org-msg-startup \u0026#34;hidestars indent inlineimages\u0026#34;  org-msg-greeting-fmt \u0026#34;\\nHi%s,\\n\\n\u0026#34;  org-msg-recipient-names \u0026#39;((\u0026#34;jeremy.compostella@gmail.com\u0026#34; . \u0026#34;Jérémy\u0026#34;))  org-msg-greeting-name-limit 3  org-msg-default-alternatives \u0026#39;((new\t. (text html)) \t(reply-to-html\t. (text html)) \t(reply-to-text\t. (text)))  org-msg-convert-citation t  org-msg-signature \u0026#34; Regards, #+begin_signature -- *Duan Ning* /One Emacs to rule them all/ #+end_signature\u0026#34;)  (org-msg-mode) Telegaram 非官方的 telegram 客户端。\n(setq telega-server-libs-prefix \u0026#34;~/td/tdlib\u0026#34;) (setq telega-proxies (list \t\u0026#39;(:server \u0026#34;127.0.0.1\u0026#34; :port 7891 :enable t \t:type (:@type \u0026#34;proxyTypeSocks5\u0026#34;)))) Calibre https://calibredb.hkvim.com\n(setq calibredb-root-dir \u0026#34;~/Calibre Library\u0026#34;  calibredb-db-dir (expand-file-name \u0026#34;metadata.db\u0026#34; calibredb-root-dir)) (setq calibredb-format-all-the-icons t  calibredb-title-width 80  calibredb-size-show t) (setq calibredb-fetch-metadata-source-list \u0026#39;(\u0026#34;Google\u0026#34; \u0026#34;Amazon.com\u0026#34;)) Music 2022-04-14 目前使用不己， API NULL。需要包作者进行更新。\n(global-set-key (kbd \u0026#34;\u0026lt;f7\u0026gt;\u0026#34;) \u0026#39;netease-cloud-music)  (setq request-storage-directory (expand-file-name \u0026#34;request\u0026#34; dn-cache-directory))  (setq netease-cloud-music-cache-directory (expand-file-name \u0026#34;netease-cloud-music\u0026#34; dn-cache-directory)) Keybindings Keyfreq (keyfreq-mode 1)  (keyfreq-autosave-mode 1)  (setq keyfreq-file (expand-file-name \u0026#34;.emacs.keyfreq\u0026#34; dn-cache-directory))  (setq keyfreq-excluded-commands \u0026#39;(self-insert-command \tforward-char \tbackward-char \tprevious-line \tnext-line)) Meow  Meow is yet another modal editing mode for Emacs.\n (defun meow-setup ()  (meow-motion-overwrite-define-key  \u0026#39;(\u0026#34;j\u0026#34; . meow-next)  \u0026#39;(\u0026#34;k\u0026#34; . meow-prev))  (meow-leader-define-key  ;; SPC j/k will run the original command in MOTION state.  \u0026#39;(\u0026#34;j\u0026#34; . \u0026#34;H-j\u0026#34;)  \u0026#39;(\u0026#34;k\u0026#34; . \u0026#34;H-k\u0026#34;)  ;; Use SPC (0-9) for digit arguments.  \u0026#39;(\u0026#34;1\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;2\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;3\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;4\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;5\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;6\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;7\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;8\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;9\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;0\u0026#34; . meow-digit-argument)  \u0026#39;(\u0026#34;/\u0026#34; . meow-keypad-describe-key)  \u0026#39;(\u0026#34;?\u0026#34; . meow-cheatsheet))  (meow-normal-define-key  \u0026#39;(\u0026#34;0\u0026#34; . meow-expand-0)  \u0026#39;(\u0026#34;9\u0026#34; . meow-expand-9)  \u0026#39;(\u0026#34;8\u0026#34; . meow-expand-8)  \u0026#39;(\u0026#34;7\u0026#34; . meow-expand-7)  \u0026#39;(\u0026#34;6\u0026#34; . meow-expand-6)  \u0026#39;(\u0026#34;5\u0026#34; . meow-expand-5)  \u0026#39;(\u0026#34;4\u0026#34; . meow-expand-4)  \u0026#39;(\u0026#34;3\u0026#34; . meow-expand-3)  \u0026#39;(\u0026#34;2\u0026#34; . meow-expand-2)  \u0026#39;(\u0026#34;1\u0026#34; . meow-expand-1)  \u0026#39;(\u0026#34;-\u0026#34; . negative-argument)  \u0026#39;(\u0026#34;;\u0026#34; . meow-reverse)  \u0026#39;(\u0026#34;,\u0026#34; . meow-inner-of-thing)  \u0026#39;(\u0026#34;.\u0026#34; . meow-bounds-of-thing)  \u0026#39;(\u0026#34;[\u0026#34; . meow-beginning-of-thing)  \u0026#39;(\u0026#34;]\u0026#34; . meow-end-of-thing)  \u0026#39;(\u0026#34;a\u0026#34; . meow-append)  \u0026#39;(\u0026#34;A\u0026#34; . meow-open-below)  \u0026#39;(\u0026#34;b\u0026#34; . meow-back-word)  \u0026#39;(\u0026#34;B\u0026#34; . meow-back-symbol)  \u0026#39;(\u0026#34;c\u0026#34; . meow-change)  \u0026#39;(\u0026#34;d\u0026#34; . meow-delete)  \u0026#39;(\u0026#34;D\u0026#34; . meow-backward-delete)  \u0026#39;(\u0026#34;e\u0026#34; . meow-next-word)  \u0026#39;(\u0026#34;E\u0026#34; . meow-next-symbol)  \u0026#39;(\u0026#34;f\u0026#34; . meow-find)  \u0026#39;(\u0026#34;g\u0026#34; . meow-cancel-selection)  \u0026#39;(\u0026#34;G\u0026#34; . meow-grab)  \u0026#39;(\u0026#34;h\u0026#34; . meow-left)  \u0026#39;(\u0026#34;H\u0026#34; . meow-left-expand)  \u0026#39;(\u0026#34;i\u0026#34; . meow-insert)  \u0026#39;(\u0026#34;I\u0026#34; . meow-open-above)  \u0026#39;(\u0026#34;j\u0026#34; . meow-next)  \u0026#39;(\u0026#34;J\u0026#34; . meow-next-expand)  \u0026#39;(\u0026#34;k\u0026#34; . meow-prev)  \u0026#39;(\u0026#34;K\u0026#34; . meow-prev-expand)  \u0026#39;(\u0026#34;l\u0026#34; . meow-right)  \u0026#39;(\u0026#34;L\u0026#34; . meow-right-expand)  \u0026#39;(\u0026#34;m\u0026#34; . meow-join)  \u0026#39;(\u0026#34;n\u0026#34; . meow-search)  \u0026#39;(\u0026#34;o\u0026#34; . meow-block)  \u0026#39;(\u0026#34;O\u0026#34; . meow-to-block)  \u0026#39;(\u0026#34;p\u0026#34; . meow-yank)  \u0026#39;(\u0026#34;q\u0026#34; . meow-quit)  \u0026#39;(\u0026#34;Q\u0026#34; . meow-goto-line)  \u0026#39;(\u0026#34;r\u0026#34; . meow-replace)  \u0026#39;(\u0026#34;R\u0026#34; . meow-swap-grab)  \u0026#39;(\u0026#34;s\u0026#34; . meow-kill)  \u0026#39;(\u0026#34;t\u0026#34; . meow-till)  \u0026#39;(\u0026#34;u\u0026#34; . undo)  \u0026#39;(\u0026#34;U\u0026#34; . undo-redo)  ;; \u0026#39;(\u0026#34;u\u0026#34; . meow-undo)  ;; \u0026#39;(\u0026#34;U\u0026#34; . meow-undo-in-selection)  \u0026#39;(\u0026#34;v\u0026#34; . meow-visit)  \u0026#39;(\u0026#34;w\u0026#34; . meow-mark-word)  \u0026#39;(\u0026#34;W\u0026#34; . meow-mark-symbol)  \u0026#39;(\u0026#34;x\u0026#34; . meow-line)  \u0026#39;(\u0026#34;X\u0026#34; . meow-goto-line)  \u0026#39;(\u0026#34;y\u0026#34; . meow-save)  \u0026#39;(\u0026#34;Y\u0026#34; . meow-sync-grab)  \u0026#39;(\u0026#34;z\u0026#34; . meow-pop-selection)  \u0026#39;(\u0026#34;\u0026#39;\u0026#34; . repeat)  \u0026#39;(\u0026#34;\u0026lt;escape\u0026gt;\u0026#34; . mode-line-other-buffer)))  (add-hook \u0026#39;after-init-hook \u0026#39;meow-setup)  (meow-global-mode)  (setq meow-use-clipboard t)  (add-to-list \u0026#39;meow-mode-state-list \u0026#39;(netease-cloud-music-mode . motion)) (add-to-list \u0026#39;meow-mode-state-list \u0026#39;(osx-dictionary-mode . motion)) (add-to-list \u0026#39;meow-mode-state-list \u0026#39;(stock-tracker-mode . motion)) One Key (require \u0026#39;one-key)  (setq one-key-popup-window nil) one key for bibtex (one-key-create-menu  \u0026#34;BIBTEX\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Actions\u0026#34;) . orb-note-actions)  ((\u0026#34;o\u0026#34; . \u0026#34;open\u0026#34;) . consult-bibtex-open-any)  ((\u0026#34;e\u0026#34; . \u0026#34;entry\u0026#34;) . consult-bibtex-show-entry)  ((\u0026#34;n\u0026#34; . \u0026#34;note\u0026#34;) . my/edit-notes)  ((\u0026#34;x\u0026#34; . \u0026#34;extract annots\u0026#34;) . my/extract-pdf-annots-to-ref-note))  t) one key for org download (one-key-create-menu  \u0026#34;DOWNLOAD\u0026#34;  \u0026#39;(((\u0026#34;c\u0026#34; . \u0026#34;clipboard\u0026#34;) . org-download-clipboard)  ((\u0026#34;i\u0026#34; . \u0026#34;image\u0026#34;) . org-download-image)  ((\u0026#34;s\u0026#34; . \u0026#34;screenshot\u0026#34;) . org-download-screenshot))  t) one key for language (one-key-create-menu  \u0026#34;LANGUAGE\u0026#34;  \u0026#39;(((\u0026#34;t\u0026#34; . \u0026#34;Translate\u0026#34;) . gts-do-translate)  ((\u0026#34;f\u0026#34; . \u0026#34;Fanyi Point\u0026#34;) . fanyi-dwim2)  ((\u0026#34;F\u0026#34; . \u0026#34;Fanyi Input\u0026#34;) . fanyi-dwim)  ((\u0026#34;d\u0026#34; . \u0026#34;Dictionary Point\u0026#34;) . osx-dictionary-search-pointer)  ((\u0026#34;D\u0026#34; . \u0026#34;Dictionary Input\u0026#34;) . osx-dictionary-search-input)  ((\u0026#34;p\u0026#34; . \u0026#34;Powerthesaurus\u0026#34;) . powerthesaurus-lookup-dwim)  ((\u0026#34;s\u0026#34; . \u0026#34;Style region\u0026#34;) . smog-check)  ((\u0026#34;S\u0026#34; . \u0026#34;Style buffer\u0026#34;) . smog-check-buffer))  t) one key for file (one-key-create-menu  \u0026#34;FILE\u0026#34;  \u0026#39;(((\u0026#34;f\u0026#34; . \u0026#34;FINANCE\u0026#34;) . one-key-menu-beancount)  ((\u0026#34;r\u0026#34; . \u0026#34;recent\u0026#34;) . consult-recent-file)  ((\u0026#34;o\u0026#34; . \u0026#34;open\u0026#34;) . one-key-menu-specific-file)  ((\u0026#34;e\u0026#34; . \u0026#34;External\u0026#34;) . xah-html-open-in-safari))  t) one key for directory (one-key-create-menu  \u0026#34;DIRECTORY\u0026#34;  \u0026#39;(((\u0026#34;c\u0026#34; . \u0026#34;Cloud\u0026#34;) . (lambda () (interactive) (dired \u0026#34;~/Nextcloud/\u0026#34;)))  ((\u0026#34;d\u0026#34; . \u0026#34;Downloads\u0026#34;) . (lambda () (interactive) (dired \u0026#34;~/Downloads/\u0026#34;)))  ((\u0026#34;p\u0026#34; . \u0026#34;Pictures\u0026#34;) . (lambda () (interactive) (dired \u0026#34;~/Pictures/\u0026#34;))))  t) one key for open specific file (one-key-create-menu  \u0026#34;SPECIFIC-FILE\u0026#34;  \u0026#39;(((\u0026#34;b\u0026#34; . \u0026#34;Blog file\u0026#34;) . (lambda () (interactive) (find-file \u0026#34;~/hugo-source/content-org/all-posts.org\u0026#34;)))  ((\u0026#34;I\u0026#34; . \u0026#34;README.org\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;README.org\u0026#34; user-emacs-directory))))  ((\u0026#34;i\u0026#34; . \u0026#34;Inbox\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;daily/inbox.org\u0026#34; dn-galaxy))))  ((\u0026#34;r\u0026#34; . \u0026#34;rss\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;main/elfeed.org\u0026#34; dn-roam))))  ((\u0026#34;g\u0026#34; . \u0026#34;gtd\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;todos/org-gtd-tasks.org\u0026#34; dn-galaxy))))  ((\u0026#34;a\u0026#34; . \u0026#34;alipay\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;alipay.bean\u0026#34; dn-finance-year))))  ((\u0026#34;m\u0026#34; . \u0026#34;Beancount main\u0026#34;) . (lambda () (interactive) (find-file (expand-file-name \u0026#34;main.bean\u0026#34; dn-finance)))))  t) one key for org (one-key-create-menu  \u0026#34;ORG\u0026#34;  \u0026#39;(((\u0026#34;c\u0026#34; . \u0026#34;Clock\u0026#34;) . one-key-menu-org-clock)  ((\u0026#34;d\u0026#34; . \u0026#34;Download\u0026#34;) . one-key-menu-download)  ((\u0026#34;p\u0026#34; . \u0026#34;Process\u0026#34;) . org-gtd-process-inbox)  ((\u0026#34;l\u0026#34; . \u0026#34;cliplink\u0026#34;) . org-cliplink)  ((\u0026#34;i\u0026#34; . \u0026#34;ID\u0026#34;) . org-id-get-create))  t)   org-clock\n(one-key-create-menu  \u0026#34;ORG-CLOCK\u0026#34;  \u0026#39;(((\u0026#34;i\u0026#34; . \u0026#34;In\u0026#34;) . org-clock-in)  ((\u0026#34;o\u0026#34; . \u0026#34;Out\u0026#34;) . org-clock-out)  ((\u0026#34;g\u0026#34; . \u0026#34;goto\u0026#34;) . org-clock-goto)  ((\u0026#34;l\u0026#34; . \u0026#34;last\u0026#34;) . org-clock-in-last))  t)   one key for org transclusion (one-key-create-menu  \u0026#34;TRANSCLUSION\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Add\u0026#34;) . org-transclusion-add)  ((\u0026#34;A\u0026#34; . \u0026#34;Add all\u0026#34;) . org-transclusion-add-all)  ((\u0026#34;r\u0026#34; . \u0026#34;Remove\u0026#34;) . org-transclusion-remove)  ((\u0026#34;R\u0026#34; . \u0026#34;Remove all\u0026#34;) . org-transclusion-remove-all)  ((\u0026#34;g\u0026#34; . \u0026#34;Refresh\u0026#34;) . org-transclusion-refresh)  ((\u0026#34;m\u0026#34; . \u0026#34;make\u0026#34;) . org-transclusion-make-from-link)  ((\u0026#34;o\u0026#34; . \u0026#34;Open\u0026#34;) . org-transclusion-open-source)  ((\u0026#34;e\u0026#34; . \u0026#34;Edit\u0026#34;) . org-transclusion-live-sync-start))  t) one key for org roam (one-key-create-menu  \u0026#34;ROAM\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Alias\u0026#34;) . one-key-menu-roam-alias)  ((\u0026#34;b\u0026#34; . \u0026#34;Roam Buffer\u0026#34;) . org-roam-buffer-toggle)  ((\u0026#34;c\u0026#34; . \u0026#34;Roam capture\u0026#34;) . org-roam-capture)  ((\u0026#34;d\u0026#34; . \u0026#34;Dailies\u0026#34;) . one-key-menu-roam-dailies)  ((\u0026#34;f\u0026#34; . \u0026#34;Node find\u0026#34;) . org-roam-node-find)  ((\u0026#34;i\u0026#34; . \u0026#34;Node insert\u0026#34;) . org-roam-node-insert)  ((\u0026#34;s\u0026#34; . \u0026#34;Search content\u0026#34;) . bms/org-roam-rg-search)  ((\u0026#34;t\u0026#34; . \u0026#34;Tags\u0026#34;) . one-key-menu-roam-tags)  ((\u0026#34;r\u0026#34; . \u0026#34;Ref\u0026#34;) . one-key-menu-roam-ref))  t)  (one-key-create-menu  \u0026#34;ROAM-ALIAS\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Add\u0026#34;) . org-roam-alias-add)  ((\u0026#34;r\u0026#34; . \u0026#34;Remove\u0026#34;) . org-roam-alias-remove))  t)  (one-key-create-menu  \u0026#34;ROAM-DAILIES\u0026#34;  \u0026#39;(((\u0026#34;t\u0026#34; . \u0026#34;Today\u0026#34;) . org-roam-dailies-find-today)  ((\u0026#34;y\u0026#34; . \u0026#34;Yesterday\u0026#34;) . org-roam-dailies-find-yesterday)  ((\u0026#34;d\u0026#34; . \u0026#34;Directory\u0026#34;) . org-roam-dailies-find-directory)  ((\u0026#34;a\u0026#34; . \u0026#34;Date\u0026#34;) . org-roam-dailies-find-date)  ((\u0026#34;p\u0026#34; . \u0026#34;Past Diary\u0026#34;) . my/history-morning-diary))  t)  (one-key-create-menu  \u0026#34;ROAM-REF\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Add\u0026#34;) . org-roam-ref-add)  ((\u0026#34;f\u0026#34; . \u0026#34;Find\u0026#34;) . org-roam-ref-find)  ((\u0026#34;r\u0026#34; . \u0026#34;Remove\u0026#34;) . org-roam-ref-remove))  t)  (one-key-create-menu  \u0026#34;ROAM-TAGS\u0026#34;  \u0026#39;(((\u0026#34;a\u0026#34; . \u0026#34;Add\u0026#34;) . org-roam-tag-add)  ((\u0026#34;c\u0026#34; . \u0026#34;Completion\u0026#34;) . org-roam-tag-completions)  ((\u0026#34;r\u0026#34; . \u0026#34;Remove\u0026#34;) . org-roam-tag-remove))  t) one key for window frame (one-key-create-menu  \u0026#34;WINDOWS\u0026#34;  \u0026#39;(((\u0026#34;c\u0026#34; . \u0026#34;Tabs:common\u0026#34;) . (lambda () (interactive) (centaur-tabs-switch-group \u0026#34;Common\u0026#34;)))  ((\u0026#34;d\u0026#34; . \u0026#34;Destroy\u0026#34;) . kill-this-buffer)  ((\u0026#34;g\u0026#34; . \u0026#34;Tabs:Groups\u0026#34;) . awesome-tab-switch-group)  ((\u0026#34;o\u0026#34; . \u0026#34;Tabs:org\u0026#34;) . (lambda () (interactive) (centaur-tabs-switch-group \u0026#34;OrgMode\u0026#34;)))  ((\u0026#34;h\u0026#34; . \u0026#34;Left\u0026#34;) . windmove-left)  ((\u0026#34;j\u0026#34; . \u0026#34;Down\u0026#34;) . windmove-down)  ((\u0026#34;k\u0026#34; . \u0026#34;Up\u0026#34;) . windmove-up)  ((\u0026#34;l\u0026#34; . \u0026#34;Right\u0026#34;) . windmove-right)  ((\u0026#34;e\u0026#34; . \u0026#34;Email\u0026#34;) . mu4e)  ((\u0026#34;r\u0026#34; . \u0026#34;rss\u0026#34;) . elfeed-summary)  ((\u0026#34;t\u0026#34; . \u0026#34;Telega\u0026#34;) . telega)  ((\u0026#34;m\u0026#34; . \u0026#34;Message\u0026#34;) . (lambda () (interactive) (switch-to-buffer \u0026#34;*Messages*\u0026#34;)))  ((\u0026#34;s\u0026#34; . \u0026#34;scratch\u0026#34;) . (lambda () (interactive) (switch-to-buffer \u0026#34;*scratch*\u0026#34;)))  ((\u0026#34;u\u0026#34; . \u0026#34;Winner Undo\u0026#34;) . winner-undo)  ((\u0026#34;v\u0026#34; . \u0026#34;vundo\u0026#34;) . vundo))  t) Bind meow leader with one-key-menu 不要绑定在 c m g 上，这几个键在 Meow 中被使用。\n(meow-leader-define-key  \u0026#39;(\u0026#34;a\u0026#34; . my/org-agenda)  \u0026#39;(\u0026#34;SPC\u0026#34; . meow-M-x)  \u0026#39;(\u0026#34;b\u0026#34; . one-key-menu-bibtex)  \u0026#39;(\u0026#34;d\u0026#34; . one-key-menu-directory)  \u0026#39;(\u0026#34;f\u0026#34; . one-key-menu-file)  \u0026#39;(\u0026#34;i\u0026#34; . my/org-capture-inbox)  \u0026#39;(\u0026#34;l\u0026#34; . one-key-menu-language)  \u0026#39;(\u0026#34;r\u0026#34; . one-key-menu-roam)  \u0026#39;(\u0026#34;o\u0026#34; . one-key-menu-org)  \u0026#39;(\u0026#34;s\u0026#34; . eshell)  \u0026#39;(\u0026#34;t\u0026#34; . one-key-menu-transclusion)  \u0026#39;(\u0026#34;w\u0026#34; . one-key-menu-windows)) ","permalink":"https://jousimies.github.io/posts/readme/","summary":"Interface Show   Introduction  The Borg assimilate Emacs packages as Git submodules.\n 我使用 borg 进行 Emacs 包的管理，详细的使用见 borg 官方手册。\n使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 左右（ Arch Emacs 27.2 ）。\n使用 org-mode 对 Emacs 的配置文件进行管理（见文学编程）， org-auto-tangle 自动将配置文件 tangle 到 init.el 文件中。默认会解析到 init.el 文件中，如果有不想解析或解析到其他文件的，在 src block 中加上 :tangle no 或 :tangle other.el 。\n一个 init.el 文件，不需要分离配置，管理起来，没什么 STRESS.\nWhy Emacs 对于一个非专业的程序员，使用此文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME 。","title":"Jousimies's Personal Emacs Configuration"},{"content":" If I have seen further, it is by standing on the shoulders of giants. \u0026mdash;- Sir Isaac Newton\n  https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs  ","permalink":"https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/","summary":" If I have seen further, it is by standing on the shoulders of giants. \u0026mdash;- Sir Isaac Newton\n  https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs  ","title":"Emacs 配置参考集"},{"content":"今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。\nGithub 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。\n  https://github.com/Jousimies/Jousimies.github.io\n对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。\n  https://github.com/Jousimies/hugo-source\n这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。\n  以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。\n管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。\n关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。\nclone 仓库 将上面创建的 hugo-source 项目仓库 clone 到本地，主页仓库不需要 clone 地本地。\ncd ~ git clone git@github.com:Jousimies/hugo-source.git #替换成自己的地址 HUGO hugo 安装 Macos 上通过以下命令安装。其他的操作系统参考：Install Hugo | Hugo\nbrew install hugo 通过 hugo version 查看版本，后面会用到。\nHugo quick start 这部分可以参考 Quick Start — ox-hugo - Org to Hugo exporter 中的说明。\n设及到的操作有以下三个：\ncd hugo-source hugo new site hugo-source --force # 这里必需要使用 --force git submodule add https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 echo \u0026#39;theme = \u0026#34;PaperMod\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml 以上的命令中必需要 force ，因为我是先创建的仓库 hugo-source 。 至于先创建 site 的方式，自己查资料吧，这边不说。\n需要注意的是 Quick Start — ox-hugo - Org to Hugo exporter 中第4步关于主题的设置，它推荐的是使用 hugo modules ，但是我这边会出现 hugo moduel download 然后就没有反应，所以 我推荐使用 git submodele 的方式管理主题 。\n有些教程中是使用 git clone 的方式管理主题，但是强烈建议不要直接使用 git clone 的方式管理主题，否则后面 git 配置的时候会报仓库嵌套的问题。虽然可以解决，但是我觉得麻烦，不如这里直接使用 submodule 的方式管理。\n上面的使用的是 GitHub - adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme. 这个主题。\n写文章 我使用 emacs 中的 org-mode 写，如果你要使用 markdown 写的请参考其他的教程。\n我选择把所有的文章放到一个 org 文档中，如果要分开放，自己查资料。\ncd ~/hugo-source #这里的地址取决你的仓库名 mkdir content-org cd content-org touch all-posts.org 我把 org 原始文件 all-posts.org 放到了 content-org 文件夹中，这两个你都可以用其他的名称。\n在 emacs 中打开 all-posts.org 这个文件，编辑这个文件。\n格式可以参考以下这张图： 其中 export_file_name 你可以自己定。如果一个 title 加了 TODO ，导出时在 hugo 中会显示 draft ，改成 DONE 就会去掉。\n导出 org 文档为 markdown Hugo 使用 markdown 渲染，所以要将 org 文档转换成 markdown 格式。这个在 emacs 中是使用 ox-hugo 这个包实现。\nox-hugo 的配置很简单：\n(with-eval-after-load \u0026#39;ox  (require \u0026#39;ox-hugo)) 使用 C-c C-e H H 将 org 文档转换成 markdown 文档。这个命令会将 org 中的 subtree 转换成多个 markdown 文件。如果使用 C-c C-e H h 的话，会将 all-posts.org 转换成 all-posts.md 这一个文档。\n我使用的是 C-c C-e H H 这个命令。\nhugo 预览 本地使用 hugo server 预览自己的文件。执行下面两个命令后，就可以用浏览器打开 localhost:1313 预览自己的 blog 了。\ncd hugo-source hugo server 生成静态文件 cd hugo-sourch hugo 这部分必需要做 。\nGithub Actions 配置文件 cd hugo-source mkdir -p .github/workflows touch hugo.yml #这个文件名没有影响，只要是 XXX.yml 文件就行 编辑 hugo.yml 这个文件，其中的内容可以参考：GitHub Pages action · Actions · GitHub Marketplace · GitHub\n需要注意的地方我给出了说明，其中特别要注意 deploy_key 这一项。 我这里使用 deploy_key 进行身份验证。\n name: GitHub Pages  on:  push:  branches:  - main  #默认使用 main  pull_request:  jobs:  deploy:  runs-on: ubuntu-20.04  concurrency:  group: ${{ github.workflow }}-${{ github.ref }} #不用改  steps:  - uses: actions/checkout@v3 \twith: \tsubmodules: true # Fetch Hugo themes (true OR recursive) \tfetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo \tuses: peaceiris/actions-hugo@v2 \twith: \thugo-version: \u0026#39;0.97.3\u0026#39; #改成自己所用的 hugo 版本 \textended: true   - name: Build \trun: hugo --minify   - name: Deploy \tuses: peaceiris/actions-gh-pages@v3 \twith: \tdeploy_key: ${{ secrets.DEPLOY_TOKEN }} #注意这个 DEPLOY_TOKEN \texternal_repository: Jousimies/Jousimies.github.io # 改成自己的仓库地址 \tpublish_branch: main #默认使用 main \tpublish_dir: ./public #不用改 github actions deploy key 上面编辑好了 hugo.yml 这个文件，下面要设置 github-actions 这一项。\n首先要生成 ssh key 。\ncd ~ ssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; 以上命令会在 ~ 目录下生成 gh-pages （私钥）和 gh-pages.pub （公钥）两个文件。这两个文件要分别用到上面建的两个 github 仓库中。\n  打开 https://github.com/Jousimies/hugo-source/settings/secrets/actions/new （改成自己的项目仓库地址）贴入 gh-pages 中的内容。\n注意 Name 那一项里必需填 DEPOLY_TOKEN 。其实是上面 hugo.yml 中 ${{ secrets.DEPLOY_TOKEN }} 设置和这里要对应上，否则 github 运行 action 时会报没有 depoly token 的错误。\n  打开 https://github.com/Jousimies/Jousimies.github.io/settings/keys/new （改成自己的主页仓库地址）贴入 gh-pages.pub 中的内容。\n这里的 title 随便填。\n  PUSH 仓库 cd hugo-source git add -A git commit -m \u0026#34;Init push\u0026#34; 当成功 push 仓库后， github 会自动运行 actions ，在 https://github.com/Jousimies/hugo-source/actions （切换成自己的项目仓库地址）中可以查看 workflow 的状况。\n如果显示是个绿色的勾，那么恭喜你成功了。稍后打开 https://jousimies.github.io 就能看到自己的博客内容了。\n","permalink":"https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/","summary":"今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。\nGithub 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。\n  https://github.com/Jousimies/Jousimies.github.io\n对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。\n  https://github.com/Jousimies/hugo-source\n这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。\n  以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。\n管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。\n关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。","title":"使用 Emacs(ox-hugo) + Hugo + Github-pages + Github-actions 管理 blog"},{"content":" 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。 \u0026mdash;- 苏珊哈克\n ","permalink":"https://jousimies.github.io/posts/%E5%93%B2%E5%AD%A6%E5%92%8C%E9%80%BB%E8%BE%91/","summary":" 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。 \u0026mdash;- 苏珊哈克\n ","title":"哲学和逻辑"},{"content":"这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。\n知识的管理涉及到知识的获取、组织、分享和应用四个方面。\n文献管理与阅读流程   通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。\n  通过阅读文献的参考文献进行文献的挖掘。\n  现在文献一般都有网页版，可以方便的进行相关的探索。\n  通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。\n  zotero需要安装插件，better bibtex for zotero。\n  export libray，需要勾选自动更新题录选项。\n  文献的最终管理通过jabref软件进行。\n  将第2步中导出的题录，import到jabref中的当前库中。\n  alt + f8 整理下entry。\n  这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。\n  打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。\n  决定是否深入进行阅读。\n  文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：\n   分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么    这部分是阅读一篇文献需要解决的问题。\n  架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。\n  以上的内容会被jabref自动识别。\n  文献的记录通过vscode进行，通过编辑latex进行记录，并生成pdf文件。\n  笔记和个人事务的管理   obsidian软件可以方便的进行md文件的写作和管理，取代tiddlywiki进行笔记的管理。\n  tiddlywiki编辑界面不友好。\n  md文件可以通过pandoc方便的导出为pdf文件或docx类型的文档，并且可以指定样式。\n  个人事务通过微软的To Do软件进行。\n  emacs中的org很好很强大，但是对于手机端的使用不够友善。\n  大多数情况下，很难像柳比歇夫一样全部面面俱到的记录。\n  可以通过手机端的tasker进行日程的简单记录，替代emacs中的强大记录功能。\n  ","permalink":"https://jousimies.github.io/posts/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/","summary":"这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。\n知识的管理涉及到知识的获取、组织、分享和应用四个方面。\n文献管理与阅读流程   通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。\n  通过阅读文献的参考文献进行文献的挖掘。\n  现在文献一般都有网页版，可以方便的进行相关的探索。\n  通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。\n  zotero需要安装插件，better bibtex for zotero。\n  export libray，需要勾选自动更新题录选项。\n  文献的最终管理通过jabref软件进行。\n  将第2步中导出的题录，import到jabref中的当前库中。\n  alt + f8 整理下entry。\n  这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。\n  打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。\n  决定是否深入进行阅读。\n  文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：\n   分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么    这部分是阅读一篇文献需要解决的问题。\n  架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。","title":"知识管理"}]