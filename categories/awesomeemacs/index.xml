<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>AwesomeEmacs on 探索世界，践行人生</title><link>https://jousimies.github.io/categories/awesomeemacs/</link><description>Recent content in AwesomeEmacs on 探索世界，践行人生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jousimies.github.io/categories/awesomeemacs/index.xml" rel="self" type="application/rss+xml"/><item><title>Emacs 配置参考集</title><link>https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/</guid><description> If I have seen further, it is by standing on the shoulders of giants. &amp;mdash;- Sir Isaac Newton
https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs</description><content:encoded><![CDATA[<blockquote>
<p>If I have seen further, it is by standing on the shoulders of giants. &mdash;- Sir Isaac Newton</p>
</blockquote>
<ul>
<li><a href="https://github.com/bbatsov/prelude">https://github.com/bbatsov/prelude</a></li>
<li><a href="https://github.com/syl20bnr/spacemacs">https://github.com/syl20bnr/spacemacs</a></li>
<li><a href="https://github.com/seagle0128/.emacs.d">https://github.com/seagle0128/.emacs.d</a></li>
<li><a href="https://github.com/hlissner/doom-emacs">https://github.com/hlissner/doom-emacs</a></li>
<li><a href="https://github.com/remacs/remacs">https://github.com/remacs/remacs</a></li>
<li><a href="https://github.com/redguardtoo/emacs.d">https://github.com/redguardtoo/emacs.d</a></li>
<li><a href="https://github.com/manateelazycat/lazycat-emacs">https://github.com/manateelazycat/lazycat-emacs</a></li>
<li><a href="https://github.com/purcell/emacs.d">https://github.com/purcell/emacs.d</a></li>
<li><a href="https://github.com/MatthewZMD/.emacs.d">https://github.com/MatthewZMD/.emacs.d</a></li>
<li><a href="https://sachachua.com/dotemacs/">https://sachachua.com/dotemacs/</a></li>
<li><a href="https://github.com/raxod502/radian">https://github.com/raxod502/radian</a></li>
<li><a href="https://tecosaur.github.io/emacs-config/config.html">https://tecosaur.github.io/emacs-config/config.html</a></li>
<li><a href="https://github.com/mrvdb/emacs-config">https://github.com/mrvdb/emacs-config</a>
<a href="https://qua.name/mrb/an-org-babel-based-emacs-configuration">https://qua.name/mrb/an-org-babel-based-emacs-configuration</a></li>
<li><a href="https://github.com/willbchang/ward-emacs">https://github.com/willbchang/ward-emacs</a></li>
</ul>
]]></content:encoded></item><item><title>使用 Emacs(ox-hugo) + Hugo + Github-pages + Github-actions 管理 blog</title><link>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/</guid><description>今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。
Github 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。
https://github.com/Jousimies/Jousimies.github.io
对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。
https://github.com/Jousimies/hugo-source
这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。
以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。
管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。
关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。</description><content:encoded><![CDATA[<p>今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。</p>
<h2 id="github-基础">Github 基础</h2>
<h3 id="创建仓库">创建仓库</h3>
<p>这部分先创建下面两个 github 仓库。具体的过程看<a href="https://docs.github.com/en/get-started/quickstart/create-a-repo">官方的手册</a> （如果这部分你不清楚，建议先补下相关知识）。</p>
<ul>
<li>
<p><a href="https://github.com/Jousimies/Jousimies.github.io">https://github.com/Jousimies/Jousimies.github.io</a></p>
<p>对于 hugo 而言，这个仓库 <strong>需要是 public 的</strong> ，不能是 private 的。这个仓库名必需要 <code>XXXX.github.io</code> 的形式。</p>
</li>
<li>
<p><a href="https://github.com/Jousimies/hugo-source">https://github.com/Jousimies/hugo-source</a></p>
<p>这个仓库可以是 public 的，也可以是 private 的。 <strong>建议选 private</strong>  。</p>
</li>
</ul>
<p><strong>以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。</strong></p>
<h3 id="管理仓库-ssh-方式">管理仓库 - SSH 方式</h3>
<p>虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。</p>
<p>关于 ssh 管理仓库的知识，这部分可以看 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">官方手册</a> 。 <strong>这部分必需要做</strong> 。</p>
<h3 id="clone-仓库">clone 仓库</h3>
<p>将上面创建的 hugo-source 项目仓库 clone 到本地，主页仓库不需要 clone 地本地。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~
</span></span><span style="display:flex;"><span>git clone git@github.com:Jousimies/hugo-source.git <span style="color:#75715e">#替换成自己的地址</span>
</span></span></code></pre></div><h2 id="hugo">HUGO</h2>
<h3 id="hugo-安装">hugo 安装</h3>
<p>Macos 上通过以下命令安装。其他的操作系统参考：<a href="https://gohugo.io/getting-started/installing">Install Hugo | Hugo</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install hugo
</span></span></code></pre></div><p>通过 <code>hugo version</code> 查看版本，后面会用到。</p>
<h3 id="hugo-quick-start">Hugo quick start</h3>
<p>这部分可以参考 <a href="https://ox-hugo.scripter.co/doc/quick-start/">Quick Start — ox-hugo - Org to Hugo exporter</a> 中的说明。</p>
<p>设及到的操作有以下三个：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>hugo new site hugo-source --force <span style="color:#75715e"># 这里必需要使用 --force</span>
</span></span><span style="display:flex;"><span>git submodule add https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;theme = &#34;PaperMod&#34;&#39;</span> &gt;&gt; config.toml
</span></span></code></pre></div><p>以上的命令中必需要 <code>force</code> ，因为我是先创建的仓库 hugo-source 。
至于先创建 site 的方式，自己查资料吧，这边不说。</p>
<p>需要注意的是 <a href="https://ox-hugo.scripter.co/doc/quick-start/">Quick Start — ox-hugo - Org to Hugo exporter</a> 中第4步关于主题的设置，它推荐的是使用 hugo modules ，但是我这边会出现 hugo moduel download 然后就没有反应，所以 <strong>我推荐使用 git submodele 的方式管理主题</strong> 。</p>
<p>有些教程中是使用 git clone 的方式管理主题，但是强烈建议不要直接使用 git clone 的方式管理主题，否则后面 git 配置的时候会报仓库嵌套的问题。虽然可以解决，但是我觉得麻烦，不如这里直接使用 submodule 的方式管理。</p>
<p>上面的使用的是 <a href="https://github.com/adityatelange/hugo-PaperMod">GitHub - adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme.</a> 这个主题。</p>
<h3 id="写文章">写文章</h3>
<p>我使用 emacs 中的 org-mode 写，如果你要使用 markdown 写的请参考其他的教程。</p>
<p>我选择把所有的文章放到一个 org 文档中，如果要分开放，自己查资料。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~/hugo-source <span style="color:#75715e">#这里的地址取决你的仓库名</span>
</span></span><span style="display:flex;"><span>mkdir content-org
</span></span><span style="display:flex;"><span>cd content-org
</span></span><span style="display:flex;"><span>touch all-posts.org
</span></span></code></pre></div><p>我把 org 原始文件 <code>all-posts.org</code> 放到了 content-org 文件夹中，这两个你都可以用其他的名称。</p>
<p>在 emacs 中打开 <code>all-posts.org</code> 这个文件，编辑这个文件。</p>
<p>格式可以参考以下这张图： <img loading="lazy" src="https://www.xianmin.org/image/other/ox-hugo-01.png" alt=""  />
</p>
<p>其中 <code>export_file_name</code> 你可以自己定。如果一个 title 加了 <code>TODO</code> ，导出时在 hugo 中会显示 draft ，改成 <code>DONE</code> 就会去掉。</p>
<h4 id="导出-org-文档为-markdown">导出 org 文档为 markdown</h4>
<p>Hugo 使用 markdown 渲染，所以要将 org 文档转换成 markdown 格式。这个在 emacs 中是使用 ox-hugo 这个包实现。</p>
<p>ox-hugo 的配置很简单：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;ox</span>
</span></span><span style="display:flex;"><span>  (require <span style="color:#e6db74">&#39;ox-hugo</span>))
</span></span></code></pre></div><p>使用 <code>C-c C-e H H</code> 将 org 文档转换成 markdown 文档。这个命令会将 org 中的 subtree 转换成多个 markdown 文件。如果使用 <code>C-c C-e H h</code> 的话，会将 <code>all-posts.org</code> 转换成 <code>all-posts.md</code> 这一个文档。</p>
<p>我使用的是 <code>C-c C-e H H</code> 这个命令。</p>
<h3 id="hugo-预览">hugo 预览</h3>
<p>本地使用 hugo server 预览自己的文件。执行下面两个命令后，就可以用浏览器打开 localhost:1313 预览自己的 blog 了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>hugo server
</span></span></code></pre></div><h3 id="生成静态文件">生成静态文件</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-sourch
</span></span><span style="display:flex;"><span>hugo
</span></span></code></pre></div><p><strong>这部分必需要做</strong> 。</p>
<h2 id="github-actions-配置文件">Github Actions 配置文件</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>mkdir -p .github/workflows
</span></span><span style="display:flex;"><span>touch hugo.yml <span style="color:#75715e">#这个文件名没有影响，只要是 XXX.yml 文件就行</span>
</span></span></code></pre></div><p>编辑 <code>hugo.yml</code> 这个文件，其中的内容可以参考：<a href="https://github.com/marketplace/actions/github-pages-action">GitHub Pages action · Actions · GitHub Marketplace · GitHub</a></p>
<p>需要注意的地方我给出了说明，其中特别要注意 <code>deploy_key</code> 这一项。 我这里使用 deploy_key 进行身份验证。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">GitHub Pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main </span> <span style="color:#75715e">#默认使用 main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-20.04</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">concurrency</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">group</span>: <span style="color:#ae81ff">${{ github.workflow }}-${{ github.ref }}</span> <span style="color:#75715e">#不用改</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>    <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;0.97.3&#39;</span> <span style="color:#75715e">#改成自己所用的 hugo 版本</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">extended</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">deploy_key</span>: <span style="color:#ae81ff">${{ secrets.DEPLOY_TOKEN }}</span> <span style="color:#75715e">#注意这个 DEPLOY_TOKEN</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">external_repository</span>: <span style="color:#ae81ff">Jousimies/Jousimies.github.io</span> <span style="color:#75715e"># 改成自己的仓库地址</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">publish_branch</span>: <span style="color:#ae81ff">main</span> <span style="color:#75715e">#默认使用 main</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span> <span style="color:#75715e">#不用改</span>
</span></span></code></pre></div><h3 id="github-actions-deploy-key">github actions deploy key</h3>
<p>上面编辑好了 hugo.yml 这个文件，下面要设置 github-actions 这一项。</p>
<p>首先要生成 ssh key 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~
</span></span><span style="display:flex;"><span>ssh-keygen -t rsa -b <span style="color:#ae81ff">4096</span> -C <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>git config user.email<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> -f gh-pages -N <span style="color:#e6db74">&#34;&#34;</span>
</span></span></code></pre></div><p>以上命令会在 <code>~</code> 目录下生成 <code>gh-pages</code> （私钥）和 <code>gh-pages.pub</code> （公钥）两个文件。这两个文件要分别用到上面建的两个 github 仓库中。</p>
<ul>
<li>
<p>打开 <a href="https://github.com/Jousimies/hugo-source/settings/secrets/actions/new">https://github.com/Jousimies/hugo-source/settings/secrets/actions/new</a> （改成自己的项目仓库地址）贴入 <code>gh-pages</code> 中的内容。</p>
<p>注意 <code>Name</code> 那一项里必需填 <code>DEPOLY_TOKEN</code> 。其实是上面 hugo.yml 中 <code>${{ secrets.DEPLOY_TOKEN }}</code> 设置和这里要对应上，否则 github 运行 action 时会报没有 depoly token 的错误。</p>
</li>
<li>
<p>打开 <a href="https://github.com/Jousimies/Jousimies.github.io/settings/keys/new">https://github.com/Jousimies/Jousimies.github.io/settings/keys/new</a> （改成自己的主页仓库地址）贴入 <code>gh-pages.pub</code> 中的内容。</p>
<p>这里的 title 随便填。</p>
</li>
</ul>
<h3 id="push-仓库">PUSH 仓库</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>git add -A
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Init push&#34;</span>
</span></span></code></pre></div><p>当成功 push 仓库后， github 会自动运行 actions ，在 <a href="https://github.com/Jousimies/hugo-source/actions">https://github.com/Jousimies/hugo-source/actions</a> （切换成自己的项目仓库地址）中可以查看 workflow 的状况。</p>
<p>如果显示是个绿色的勾，那么恭喜你成功了。稍后打开 <a href="https://jousimies.github.io">https://jousimies.github.io</a> 就能看到自己的博客内容了。</p>
]]></content:encoded></item></channel></rss>