<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>探索世界，践行人生</title><link>https://jousimies.github.io/</link><description>Recent content on 探索世界，践行人生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jousimies.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Jousimies's Personal Emacs Configuration</title><link>https://jousimies.github.io/posts/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/readme/</guid><description>Interface Show Introduction The Borg assimilate Emacs packages as Git submodules.
我使用 borg 进行 Emacs 包的管理，详细的使用见 borg 官方手册。
使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 左右（ Arch Emacs 27.2 ）。
使用 org-mode 对 Emacs 的配置文件进行管理（见文学编程）， org-auto-tangle 自动将配置文件 tangle 到 init.el 文件中。默认会解析到 init.el 文件中，如果有不想解析或解析到其他文件的，在 src block 中加上 :tangle no 或 :tangle other.el 。
一个 init.el 文件，不需要分离配置，管理起来，没什么 STRESS.
Why Emacs 对于一个非专业的程序员，使用此文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME 。</description><content:encoded><![CDATA[<h2 id="interface-show">Interface Show</h2>
<figure>
    <img loading="lazy" src="/ox-hugo/interface.png" width="1000px"/> 
</figure>

<h2 id="introduction">Introduction</h2>
<blockquote>
<p>The Borg assimilate Emacs packages as Git submodules.</p>
</blockquote>
<p>我使用 <a href="https://github.com/emacscollective/borg">borg</a> 进行 Emacs 包的管理，详细的使用见 borg <a href="https://emacsmirror.net/manual/borg/">官方手册</a>。</p>
<p>使用 borg 管理有个好处是， borg-assimilate 后的包和 Emacs 的内置包一样，不需要使用 use-package 或 leaf 此类包对配置文件进行包裹。不会增超 Emacs 的启动时间，我目前有一百多个包，启动时间在 1.6s 左右（ Arch Emacs 27.2 ）。</p>
<p>使用 org-mode 对 Emacs 的配置文件进行管理（见<a href="https://en.wikipedia.org/wiki/Literate_programming">文学编程</a>）， org-auto-tangle 自动将配置文件 tangle 到 init.el 文件中。默认会解析到 init.el 文件中，如果有不想解析或解析到其他文件的，在 src block 中加上 :tangle no 或 :tangle other.el 。</p>
<p>一个 init.el 文件，不需要分离配置，管理起来，没什么 STRESS.</p>
<h3 id="why-emacs">Why Emacs</h3>
<p>对于一个非专业的程序员，使用此文本编辑器对自己的生活进行方方面面的管理，简直是 AWESOME 。</p>
<p>Emacs 具有强大的生态，可以进行文件管理，财务管理，事务管理，邮件管理，还可以用来听音乐，看视频。</p>
<h3 id="about-other-note-taking-software">About other note taking software</h3>
<p>我使用过的笔记软件有很多，在遇到 Emacs 前，尝试过的有 PKM 软件， Mediawiki ， Tiddly wiki ， Onenote ，印象笔记，蚂蚁笔记， Simplenote ， Joplin 等等。当然也尝试过 markdown 。</p>
<p>我为什么不使用类似 onenote ，印象笔记等软件？</p>
<p>Onenote 是私有格式，意味着当我需要夸平台时，其专有格式会给我带来麻烦。印象笔记也是如此，而且印象笔记的付费一言难尽。以上尝试的软件都没能长久使用，或多或少的存在痛点。</p>
<p>更重要的是不符合我关于笔记是 ​<strong>本地可控，纯文本</strong>​ 的需求。</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<blockquote>
<p>If I have seen further, it is by standing on the shoulders of giants. &mdash;- Sir Isaac Newton</p>
</blockquote>
<p>谢谢以下配置的作者，从他们那学到了很多关于 Emacs 的知识。排名不分先后。</p>
<ul>
<li><a href="https://github.com/bbatsov/prelude">https://github.com/bbatsov/prelude</a></li>
<li><a href="https://github.com/syl20bnr/spacemacs">https://github.com/syl20bnr/spacemacs</a></li>
<li><a href="https://github.com/seagle0128/.emacs.d">https://github.com/seagle0128/.emacs.d</a></li>
<li><a href="https://github.com/hlissner/doom-emacs">https://github.com/hlissner/doom-emacs</a></li>
<li><a href="https://github.com/remacs/remacs">https://github.com/remacs/remacs</a></li>
<li><a href="https://github.com/redguardtoo/emacs.d">https://github.com/redguardtoo/emacs.d</a></li>
<li><a href="https://github.com/manateelazycat/lazycat-emacs">https://github.com/manateelazycat/lazycat-emacs</a></li>
<li><a href="https://github.com/purcell/emacs.d">https://github.com/purcell/emacs.d</a></li>
<li><a href="https://github.com/MatthewZMD/.emacs.d">https://github.com/MatthewZMD/.emacs.d</a></li>
<li><a href="https://sachachua.com/dotemacs/">https://sachachua.com/dotemacs/</a></li>
<li><a href="https://github.com/raxod502/radian">https://github.com/raxod502/radian</a></li>
<li><a href="https://tecosaur.github.io/emacs-config/config.html">https://tecosaur.github.io/emacs-config/config.html</a></li>
</ul>
<h2 id="rudimentary-configuration">Rudimentary configuration</h2>
<p>Make this file run (slightly) faster with lexical binding (see <a href="https://nullprogram.com/blog/2016/12/22/">Blog</a>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span><span style="color:#75715e">;; init.el --- My personal emacs configuration -*- lexical-binding: t; -*-</span>
</span></span></code></pre></div><h3 id="early-init">Early Init</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span><span style="color:#75715e">;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Defer garbage collection further back in the startup process</span>
</span></span><span style="display:flex;"><span>(setq gc-cons-threshold most-positive-fixnum
</span></span><span style="display:flex;"><span>      gc-cons-percentage <span style="color:#ae81ff">0.6</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; In Emacs 27+, package initialization occurs before `user-init-file&#39; is</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; loaded, but after `early-init-file&#39;. Doom handles package initialization, so</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; we must prevent Emacs from doing it early!</span>
</span></span><span style="display:flex;"><span>(setq package-enable-at-startup <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Do not allow loading from the package cache (same reason).</span>
</span></span><span style="display:flex;"><span>(setq package-quickstart <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.</span>
</span></span><span style="display:flex;"><span>(setq inhibit-startup-message <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq inhibit-splash-screen <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(push <span style="color:#f92672">&#39;</span>(menu-bar-lines <span style="color:#f92672">.</span> <span style="color:#ae81ff">0</span>) default-frame-alist)
</span></span><span style="display:flex;"><span>(push <span style="color:#f92672">&#39;</span>(tool-bar-lines <span style="color:#f92672">.</span> <span style="color:#ae81ff">0</span>) default-frame-alist)
</span></span><span style="display:flex;"><span>(push <span style="color:#f92672">&#39;</span>(vertical-scroll-bars) default-frame-alist)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Resizing the Emacs frame can be a terribly expensive part of changing the</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; font. By inhibiting this, we easily halve startup times with fonts that are</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; larger than the system default.</span>
</span></span><span style="display:flex;"><span>(setq frame-inhibit-implied-resize <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq inhibit-compacting-font-caches <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq use-file-dialog <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Make the initial buffer load faster by setting its mode to fundamental-mode</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq initial-major-mode &#39;fundamental-mode)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; compiled ahead-of-time when they are installed and site files are compiled</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; when gccemacs is installed.</span>
</span></span><span style="display:flex;"><span>(setq comp-deferred-compilation <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Disable mode-line, It&#39;s uglily after theme changed</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq-default mode-line-format nil)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;; early-init.el ends here</span>
</span></span></code></pre></div><h3 id="borg-package-manage">Borg - Package manage</h3>
<p>Update:2022-03-06. 目前我使用 borg 和 leaf 管现我的 Emacs 配置文件， borg 很好的替代了 git submodule ，不用终端直接进行 Emacs 包的管理。 leaf 目前是作为 use-package 的替代品使用，其他的还有 setup.el ，但是目前没有深入的去探索。</p>
<p>Update:2022-03-07 能否剥离 leaf ？目前己全删除 leaf 相关包.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;load-path</span> (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;packages/borg&#34;</span> user-emacs-directory))
</span></span><span style="display:flex;"><span>(eval-and-compile
</span></span><span style="display:flex;"><span>  (require <span style="color:#e6db74">&#39;borg</span>)
</span></span><span style="display:flex;"><span>  (borg-initialize))
</span></span></code></pre></div><h3 id="start-and-close-emacs">Start and close emacs</h3>
<h4 id="speedup">Speedup</h4>
<p>该配置来自 <a href="https://github.com/seagle0128/.emacs.d/blob/master/init.el">Centaur Emacs</a> ，可以有效减少 Emacs 的启动时间，约 0.5s 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq auto-mode-case-fold <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(unless (or (<span style="color:#a6e22e">daemonp</span>) noninteractive)
</span></span><span style="display:flex;"><span>  (let ((old-file-name-handler-alist file-name-handler-alist))
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">;; If `file-name-handler-alist&#39; is nil, no 256 colors in TUI</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">;; @see https://emacs-china.org/t/spacemacs-centaur-emacs/3802/839</span>
</span></span><span style="display:flex;"><span>    (setq file-name-handler-alist
</span></span><span style="display:flex;"><span>	  (unless (display-graphic-p)
</span></span><span style="display:flex;"><span>	    <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;\\(?:\\.tzst\\|\\.zst\\|\\.dz\\|\\.txz\\|\\.xz\\|\\.lzma\\|\\.lz\\|\\.g?z\\|\\.\\(?:tgz\\|svgz\\|sifz\\)\\|\\.tbz2?\\|\\.bz2\\|\\.Z\\)\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)?\\&#39;&#34;</span> <span style="color:#f92672">.</span> jka-compr-handler))))
</span></span><span style="display:flex;"><span>    (add-hook <span style="color:#e6db74">&#39;emacs-startup-hook</span>
</span></span><span style="display:flex;"><span>	      (lambda ()
</span></span><span style="display:flex;"><span>		<span style="color:#e6db74">&#34;Recover file name handlers.&#34;</span>
</span></span><span style="display:flex;"><span>		(setq file-name-handler-alist
</span></span><span style="display:flex;"><span>		      (delete-dups (<span style="color:#a6e22e">append</span> file-name-handler-alist
</span></span><span style="display:flex;"><span>					   old-file-name-handler-alist)))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq gc-cons-threshold most-positive-fixnum
</span></span><span style="display:flex;"><span>      gc-cons-percentage <span style="color:#ae81ff">0.5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;emacs-startup-hook</span>
</span></span><span style="display:flex;"><span>	  (lambda ()
</span></span><span style="display:flex;"><span>	    <span style="color:#e6db74">&#34;Recover GC values after startup.&#34;</span>
</span></span><span style="display:flex;"><span>	    (setq gc-cons-threshold <span style="color:#ae81ff">800000</span>
</span></span><span style="display:flex;"><span>		  gc-cons-percentage <span style="color:#ae81ff">0.1</span>)))
</span></span></code></pre></div><h4 id="gcmh">gcmh</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(gcmh-mode)
</span></span></code></pre></div><h4 id="restart-emacs">restart-emacs</h4>
<p>Never exit Emacs ！！！</p>
<p>防止自己误按 C-x C-c 导致 Emacs 退出， So stupid behavior 。 如果想要退出，使用 M-x save-buffers-kill-emacs 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-x C-c&#34;</span>) <span style="color:#e6db74">&#39;restart-emacs</span>)
</span></span></code></pre></div><h3 id="personal-information">Personal information</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq <span style="color:#a6e22e">user-full-name</span> <span style="color:#e6db74">&#34;DN&#34;</span>
</span></span><span style="display:flex;"><span>      user-mail-address <span style="color:#e6db74">&#34;duan_n@outlook.com&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq auth-sources <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/.authinfo&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; auth-source-cache-expiry nil)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq auth-sources &#39;(macos-keychain-generic))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq auth-sources (quote (macos-keychain-internet macos-keychain-generic)))</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq epa-pinentry-mode <span style="color:#e6db74">&#39;loopback</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(pinentry-start)
</span></span></code></pre></div><h3 id="variables">Variables</h3>
<p>自定义一些变量，方便配置文件位置或争对特定系统进行相关设定。</p>
<h4 id="folder">folder</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defvar dn-cloud <span style="color:#e6db74">&#34;~/Nextcloud&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder is My cloud.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-galaxy (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;L.Personal.Galaxy&#34;</span> dn-cloud)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder stores all the plain text files of my life.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-roam (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;roam&#34;</span> dn-galaxy)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This is the org-roam folder.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-finance (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;finance&#34;</span> dn-galaxy)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder stores all my finance files.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-finance-year (<span style="color:#a6e22e">expand-file-name</span> (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y&#34;</span>) dn-finance)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder stores all my finance files of current year.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-pdf-storage (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;storage/pdf&#34;</span> dn-galaxy)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder stores all the pdf files.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-cache-directory <span style="color:#e6db74">&#34;~/.cache/emacs&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;This folder stores all EMACS cache file.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar dn-template-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;template&#34;</span> (file-truename user-emacs-directory)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar default-search-engine-url <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;Google&#34;</span> <span style="color:#e6db74">&#34;www.google.com&#34;</span>))
</span></span></code></pre></div><h4 id="system-type">system type</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defvar sys-linux
</span></span><span style="display:flex;"><span>  (and (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>) (<span style="color:#a6e22e">null</span> (getenv <span style="color:#e6db74">&#34;ANDROID_ROOT&#34;</span>)))
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;GNU Emacs is running on Linux, not termux.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar sys-winp
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;windows-nt</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Are we running on a WinTel system?&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar sys-macp
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;darwin</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Are we running on a mac system&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar sys-wslp
</span></span><span style="display:flex;"><span>  (and (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>)
</span></span><span style="display:flex;"><span>       (<span style="color:#a6e22e">string-match</span> <span style="color:#e6db74">&#34;-[Mm]icrosoft&#34;</span> operating-system-release))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Are we running on a GNU/Linux system?&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defvar sys-termuxp
</span></span><span style="display:flex;"><span>  (and (<span style="color:#a6e22e">eq</span> system-type <span style="color:#e6db74">&#39;gnu/linux</span>) (not (<span style="color:#a6e22e">null</span> (getenv <span style="color:#e6db74">&#34;ANDROID_ROOT&#34;</span>))))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GNU Emacs is running on Termux, not Linux system.&#34;</span>)
</span></span></code></pre></div><h3 id="better-defaults">Better defaults</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(if (<span style="color:#a6e22e">boundp</span> <span style="color:#e6db74">&#39;use-short-answers</span>)
</span></span><span style="display:flex;"><span>    (setq use-short-answers <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>  (advice-add <span style="color:#e6db74">&#39;yes-or-no-p</span> :override <span style="color:#a6e22e">#&#39;</span>y-or-n-p))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq help-window-select <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq ring-bell-function <span style="color:#e6db74">&#39;ignore</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Do not saves duplicates in kill-ring</span>
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;kill-do-not-save-duplicates</span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="system-code-type">system code type</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(prefer-coding-system <span style="color:#e6db74">&#39;utf-8</span>)
</span></span><span style="display:flex;"><span>(set-default-coding-systems <span style="color:#e6db74">&#39;utf-8</span>)
</span></span><span style="display:flex;"><span>(set-terminal-coding-system <span style="color:#e6db74">&#39;utf-8</span>)
</span></span><span style="display:flex;"><span>(set-keyboard-coding-system <span style="color:#e6db74">&#39;utf-8</span>)
</span></span></code></pre></div><h4 id="dialog-box">dialog box</h4>
<p>Never popup dialog box.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq use-dialog-box <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><h4 id="define-fringe-bitmap">define-fringe-bitmap</h4>
<p>Word wrap at window edge, hide the right and left curly arrow. So ugly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(<span style="color:#a6e22e">define-fringe-bitmap</span> <span style="color:#e6db74">&#39;right-curly-arrow</span>  [])
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-fringe-bitmap</span> <span style="color:#e6db74">&#39;left-curly-arrow</span>  [])
</span></span></code></pre></div><h4 id="hide-mouse">hide mouse</h4>
<p>Builtin function. Hide mouse when type.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(mouse-avoidance-mode <span style="color:#e6db74">&#39;banish</span>)
</span></span></code></pre></div><h4 id="builtin-modes">builtin modes</h4>
<p>Emacs 有很多的内置 mode ，这些 mode 实现简单，功能很强大。这部份的详细介绍，可以参见 <a href="https://github.com/condy0919/emacs-newbie/blob/master/introduction-to-builtin-modes.md">Emacs builtin modes 功能介绍</a>。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>paren</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq show-paren-style <span style="color:#e6db74">&#39;mixed</span>
</span></span><span style="display:flex;"><span>      show-paren-when-point-inside-paren <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      show-paren-when-point-in-periphery <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(show-paren-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>elec-pair</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(electric-pair-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>linum</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq display-line-numbers <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;display-line-numbers-mode</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>simple</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span><span style="color:#75715e">;; (eval-expression-print-length)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (eval-expression-print-level)</span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> (lambda ()
</span></span><span style="display:flex;"><span>			     (line-number-mode)
</span></span><span style="display:flex;"><span>			     (column-number-mode)
</span></span><span style="display:flex;"><span>			     (size-indication-mode)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>bookmark</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq bookmark-default-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;storage/bookmarks&#34;</span> dn-galaxy))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>autorevert</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-auto-revert-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>subword</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-subword-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>winner</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq winner-dont-bind-my-keys <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(winner-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>server</p>
<p>According to this <a href="https://emacshorrors.com/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html">blog</a>, use <code>server-process</code> instead of <code>server-ruanning-p</code> 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless (bound-and-true-p server-process)
</span></span><span style="display:flex;"><span>  (server-start))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>prettify-symbols-mode</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq prettify-symbols-alist <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;lambda&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">?λ</span>)
</span></span><span style="display:flex;"><span>			       (<span style="color:#e6db74">&#34;function&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">?𝑓</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;prettify-symbols-mode</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>so-long</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-so-long-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>delsel</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(delete-selection-mode)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>webjump</p>
<p>基本用不上，我使用 google-this 这个包。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq webjump-sites <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;Emacs China&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;https://emacs-china.org&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		      (<span style="color:#e6db74">&#34;DuckDuckGo&#34;</span> <span style="color:#f92672">.</span> [simple-query <span style="color:#e6db74">&#34;duckduckgo.com&#34;</span>
</span></span><span style="display:flex;"><span>						    <span style="color:#e6db74">&#34;duckduckgo.com/?q=&#34;</span> <span style="color:#e6db74">&#34;&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		      (<span style="color:#e6db74">&#34;Douban read&#34;</span> <span style="color:#f92672">.</span> [simple-query <span style="color:#e6db74">&#34;https://search.douban.com&#34;</span>
</span></span><span style="display:flex;"><span>						     <span style="color:#e6db74">&#34;https://search.douban.com/book/subject_search?search_text=&#34;</span> <span style="color:#e6db74">&#34;&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		      (<span style="color:#e6db74">&#34;Google&#34;</span> <span style="color:#f92672">.</span> [simple-query <span style="color:#e6db74">&#34;https://www.google.com&#34;</span>
</span></span><span style="display:flex;"><span>						<span style="color:#e6db74">&#34;https://www.google.com/search?q=&#34;</span> <span style="color:#e6db74">&#34;&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		      (<span style="color:#e6db74">&#34;Baidu&#34;</span> <span style="color:#f92672">.</span> [simple-query <span style="color:#e6db74">&#34;https://www.baidu.com&#34;</span>
</span></span><span style="display:flex;"><span>					       <span style="color:#e6db74">&#34;https://www.baidu.com/s?ie=utf-8&amp;wd=&#34;</span> <span style="color:#e6db74">&#34;&#34;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		      (<span style="color:#e6db74">&#34;Wikipedia&#34;</span> <span style="color:#f92672">.</span> [simple-query <span style="color:#e6db74">&#34;https://wikipedia.org&#34;</span>
</span></span><span style="display:flex;"><span>						   <span style="color:#e6db74">&#34;https://wikipedia.org/wiki/&#34;</span> <span style="color:#e6db74">&#34;&#34;</span>])))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;s-/&#34;</span>) <span style="color:#e6db74">&#39;webjump</span>)
</span></span></code></pre></div></li>
</ul>
<h4 id="large-file">large file</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq large-file-warning-threshold <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><h4 id="custom-file">Custom file</h4>
<p>Emacs 有时会将一些配置自动导入到此文件中。如果不配置，它会自动将配置附加到 init.el 文件中。我不喜欢这个文件，当其出现的时候，我会手动删除。也许可以写个 function 自动执行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq custom-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;custom.el&#34;</span> user-emacs-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (load custom-file t)</span>
</span></span></code></pre></div><h4 id="private-file">Private file</h4>
<p>私有配置不进行同步。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq private-file <span style="color:#e6db74">&#34;~/.emacs.d/private.el&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">load</span> private-file <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h2 id="user-interface">User interface</h2>
<p>2022-03-07 目前我喜欢极简的界面。</p>
<h3 id="fonts">Fonts</h3>
<p>Update:2022-03-07 很想把 sarasa 这个字体去掉，但是目前还不知道怎么配置，主要是在 org-table 中要能实现中英文的等宽。另处我不想使用 cnfonts 或 valign 此类包。</p>
<p>Update:2022-03-08 仅在 org-table 中使用 sarasa 字根。目前没什么好的能够替代 <a href="https://github.com/be5invis/Sarasa-Gothic">sarasa</a> 的字体。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(set-face-attribute <span style="color:#e6db74">&#39;default</span> <span style="color:#66d9ef">nil</span> :family <span style="color:#e6db74">&#34;Sarasa Mono SC&#34;</span> :weight <span style="color:#e6db74">&#39;regular</span> :height <span style="color:#ae81ff">160</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#e6db74">&#39;han</span> (<span style="color:#a6e22e">font-spec</span> :name <span style="color:#e6db74">&#34;Source Han Serif SC&#34;</span> :size <span style="color:#ae81ff">16</span>))
</span></span></code></pre></div><h3 id="icon">Icon</h3>
<h4 id="all-the-icons">all-the-icons</h4>
<p>可以使 Emacs 显示 icon ，看上去更像是一个现代的编辑器。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;all-the-icons</span>)
</span></span></code></pre></div><h4 id="all-the-icons-completion">all-the-icons-completion</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(all-the-icons-completion-mode)
</span></span></code></pre></div><h4 id="kind-icon">kind-icon</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;kind-icon</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq kind-icon-default-face <span style="color:#e6db74">&#39;corfu-default</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;corfu</span>
</span></span><span style="display:flex;"><span>  (add-to-list <span style="color:#e6db74">&#39;corfu-margin-formatters</span> <span style="color:#a6e22e">#&#39;</span>kind-icon-margin-formatter))
</span></span></code></pre></div><h3 id="cursor">Cursor</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(blink-cursor-mode <span style="color:#ae81ff">-1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq-default cursor-in-non-selected-windows <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><p>我 Fork 了 <a href="https://github.com/Jousimies/im-cursor-chg">im-cursor-chg</a> 这个包，对其做了一些修改，以实现主题切换时能自动切换光标颜色。</p>
<h4 id="cursor-color">cursor color</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq im-cursor-color <span style="color:#e6db74">&#34;Red&#34;</span>)
</span></span><span style="display:flex;"><span>(cursor-chg-mode)
</span></span></code></pre></div><h3 id="themes">Themes</h3>
<p>我的默认主题是 modus-themes ，这个包的自定义性特别高，有黑白配色两套。</p>
<p>搭配 circadian 使用，可实现自动切换主题。</p>
<p>目前切换到了 Macos 上使用 Emacs ，<a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs-plus</a> 可根据系统主题自动切换 Emacs 主题。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq modus-themes-italic-constructs <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      modus-themes-bold-constructs <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      modus-themes-region <span style="color:#f92672">&#39;</span>(bg-only no-extend)
</span></span><span style="display:flex;"><span>      modus-themes-lang-checkers <span style="color:#f92672">&#39;</span>(background text-also straight-underline)
</span></span><span style="display:flex;"><span>      modus-themes-links <span style="color:#f92672">&#39;</span>(italic background faint neutral-underline)
</span></span><span style="display:flex;"><span>      modus-themes-hl-line <span style="color:#f92672">&#39;</span>(accented intense)
</span></span><span style="display:flex;"><span>      modus-themes-paren-match <span style="color:#f92672">&#39;</span>(intense)
</span></span><span style="display:flex;"><span>      modus-themes-org-blocks <span style="color:#e6db74">&#39;tinted-background</span>
</span></span><span style="display:flex;"><span>      modus-themes-org-agenda <span style="color:#f92672">&#39;</span>((header-block <span style="color:#f92672">.</span> (variable-pitch <span style="color:#ae81ff">1.2</span>))
</span></span><span style="display:flex;"><span>				(habit <span style="color:#f92672">.</span> traffic-light))
</span></span><span style="display:flex;"><span>      modus-themes-headings <span style="color:#f92672">&#39;</span>((<span style="color:#66d9ef">t</span> <span style="color:#f92672">.</span> (rainbow))))
</span></span></code></pre></div><h4 id="override-color-for-distraction-free">Override color for distraction free</h4>
<p>搭配 centaur-tabs 使用，默认的 tab bar 主题是灰度的，我不喜欢，我把它修改成了与主题色相配的黑白色。
bg-main bg-dim 控制背景色。 magenta-nuanced-bg 控制 org-src block 的背景色。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq modus-themes-operandi-color-overrides <span style="color:#f92672">&#39;</span>((bg-main <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#F2F0EF&#34;</span>)
</span></span><span style="display:flex;"><span>					      (bg-dim <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#F2F0EF&#34;</span>)
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-hl-line . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-active . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-inactive . &#34;#ffffff&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-tab-bar . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-tab-active . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (bg-tab-inactive . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					      <span style="color:#75715e">;; (blue . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					      (magenta-nuanced-bg <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#FFFFFF&#34;</span>)
</span></span><span style="display:flex;"><span>					      ))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq modus-themes-vivendi-color-overrides <span style="color:#f92672">&#39;</span>((bg-main <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#252321&#34;</span>)
</span></span><span style="display:flex;"><span>					     (bg-dim <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#252321&#34;</span>)
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-hl-line . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-active . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-inactive . &#34;#615F5D&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-tab-bar . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-tab-active . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (bg-tab-inactive . &#34;#252321&#34;)</span>
</span></span><span style="display:flex;"><span>					     <span style="color:#75715e">;; (blue . &#34;#F2F0EF&#34;)</span>
</span></span><span style="display:flex;"><span>					     (magenta-nuanced-bg <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#615F5D&#34;</span>)
</span></span><span style="display:flex;"><span>					     ))
</span></span></code></pre></div><h4 id="theme-auto-change">Theme auto change</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Theme change</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/apply-theme (appearance)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Load theme, taking current system APPEARANCE into consideration.&#34;</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">mapc</span> <span style="color:#a6e22e">#&#39;</span>disable-theme custom-enabled-themes)
</span></span><span style="display:flex;"><span>  (pcase appearance
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#39;light</span> (load-theme <span style="color:#e6db74">&#39;modus-operandi</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#e6db74">&#39;dark</span> (load-theme <span style="color:#e6db74">&#39;modus-vivendi</span> <span style="color:#66d9ef">t</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;ns-system-appearance-change-functions</span> <span style="color:#a6e22e">#&#39;</span>my/apply-theme)
</span></span></code></pre></div></li>
</ul>
<h3 id="dashboard">Dashboard</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq dashboard-startup-banner <span style="color:#e6db74">&#34;~/.emacs.d/banner.txt&#34;</span>
</span></span><span style="display:flex;"><span>      dashboard-center-content <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      dashboard-set-init-info <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      dashboard-set-file-icons <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      dashboard-modify-heading-icons <span style="color:#f92672">&#39;</span>((recents <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;file-text&#34;</span>)
</span></span><span style="display:flex;"><span>				       (bookmarks <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;book&#34;</span>))
</span></span><span style="display:flex;"><span>      dashboard-items <span style="color:#f92672">&#39;</span>((recents  <span style="color:#f92672">.</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>			(bookmarks <span style="color:#f92672">.</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>			(agenda <span style="color:#f92672">.</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>			(registers <span style="color:#f92672">.</span> <span style="color:#ae81ff">5</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq dashboard-set-navigator <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe03d</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe03d</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe051</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe051</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq dashboard-navigator-buttons
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">`</span>(
</span></span><span style="display:flex;"><span>	((<span style="color:#f92672">,</span>(all-the-icons-octicon <span style="color:#e6db74">&#34;mark-github&#34;</span> :height <span style="color:#ae81ff">1</span> :v-adjust <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>	  <span style="color:#e6db74">&#34;Homepage&#34;</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#e6db74">&#34;Browse homepage&#34;</span>
</span></span><span style="display:flex;"><span>	  (lambda (<span style="color:#66d9ef">&amp;rest</span> _) (browse-url <span style="color:#e6db74">&#34;https://github.com/Jousimies/.emacs.d&#34;</span>)))
</span></span><span style="display:flex;"><span>	 (<span style="color:#f92672">,</span>(all-the-icons-octicon <span style="color:#e6db74">&#34;tools&#34;</span> :height <span style="color:#ae81ff">1</span> :v-adjust <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>	  <span style="color:#e6db74">&#34;Settings&#34;</span> <span style="color:#e6db74">&#34;Open README file&#34;</span>
</span></span><span style="display:flex;"><span>	  (lambda (<span style="color:#66d9ef">&amp;rest</span> _) (find-file <span style="color:#e6db74">&#34;~/.emacs.d/README.org&#34;</span>)))
</span></span><span style="display:flex;"><span>	 (<span style="color:#f92672">,</span>(all-the-icons-faicon <span style="color:#e6db74">&#34;sitemap&#34;</span> :height <span style="color:#ae81ff">1</span> :v-adjust <span style="color:#ae81ff">0.0</span>)
</span></span><span style="display:flex;"><span>	  <span style="color:#e6db74">&#34;Blog&#34;</span> <span style="color:#e6db74">&#34;Browse Blog&#34;</span>
</span></span><span style="display:flex;"><span>	  (lambda (<span style="color:#66d9ef">&amp;rest</span> _) (browse-url <span style="color:#e6db74">&#34;https://jousimies.github.io&#34;</span>)))
</span></span><span style="display:flex;"><span>	 (<span style="color:#f92672">,</span>(all-the-icons-material <span style="color:#e6db74">&#34;queue_music&#34;</span> :height <span style="color:#ae81ff">1</span> :v-adjust <span style="color:#ae81ff">-0.2</span>)
</span></span><span style="display:flex;"><span>	  <span style="color:#e6db74">&#34;Music&#34;</span> <span style="color:#e6db74">&#34;Netease cloud music&#34;</span>
</span></span><span style="display:flex;"><span>	  (lambda (<span style="color:#66d9ef">&amp;rest</span> _) (netease-cloud-music))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq dashboard-footer-icon (all-the-icons-octicon <span style="color:#e6db74">&#34;dashboard&#34;</span>
</span></span><span style="display:flex;"><span>						   :height <span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span>						   :v-adjust <span style="color:#ae81ff">-0.05</span>
</span></span><span style="display:flex;"><span>						   :face <span style="color:#e6db74">&#39;font-lock-keyword-face</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq dashboard-footer-messages <span style="color:#f92672">`</span>(<span style="color:#f92672">,</span>(<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;Happy hacking, jousimies - Emacs &#34;</span>
</span></span><span style="display:flex;"><span>					   (all-the-icons-octicon <span style="color:#e6db74">&#34;heart&#34;</span>
</span></span><span style="display:flex;"><span>								  :height <span style="color:#ae81ff">1.1</span>
</span></span><span style="display:flex;"><span>								  :v-adjust <span style="color:#ae81ff">-0.05</span>)
</span></span><span style="display:flex;"><span>					   <span style="color:#e6db74">&#34; you!&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(dashboard-setup-startup-hook)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;&lt;f5&gt;&#34;</span>) <span style="color:#e6db74">&#39;dashboard-refresh-buffer</span>)
</span></span></code></pre></div><h3 id="rainbow-mode">rainbow-mode</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;rainbow-mode</span>)
</span></span></code></pre></div><h3 id="helpful">helpful</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key [remap describe-function] <span style="color:#e6db74">&#39;helpful-callable</span>)
</span></span><span style="display:flex;"><span>(global-set-key [remap describe-variable] <span style="color:#e6db74">&#39;helpful-variable</span>)
</span></span><span style="display:flex;"><span>(global-set-key [remap describe-key] <span style="color:#e6db74">&#39;helpful-key</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-h F&#34;</span>) <span style="color:#e6db74">&#39;helpful-function</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-h C&#34;</span>) <span style="color:#e6db74">&#39;helpful-command</span>)
</span></span></code></pre></div><h3 id="info-colors">info-colors</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;Info-selection-hook</span> <span style="color:#e6db74">&#39;info-colors-fontify-node</span>)
</span></span></code></pre></div><h3 id="goggles">goggles</h3>
<blockquote>
<p>Goggles highlights the modified region using pulse. Currently the commands undo, yank, kill and delete are supported.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq-default goggles-pulse <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;prog-mode-hook</span> <span style="color:#e6db74">&#39;goggles-mode</span>)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;text-mode-hook</span> <span style="color:#e6db74">&#39;goggles-mode</span>)
</span></span></code></pre></div><h3 id="emojify">emojify</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>global-emojify-mode)
</span></span></code></pre></div><h3 id="svg">svg</h3>
<p>将文字显示为图形，有很强的视觉效果，但是同时很容易使人分心，所以应该有所克制的使用此功能。 DISTRACT FREE ！！</p>
<h4 id="svg-lib">svg-lib</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq svg-lib-icons-dir (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;svg-lib&#34;</span> dn-cache-directory))
</span></span></code></pre></div><h4 id="define-gtd-keywords-faces">Define gtd keywords faces</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defface gtd-next
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#1d9537&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#007d65&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-wait
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#dea32c&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#fcaf17&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-someday
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#7d5886&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#c77eb5&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-cncl
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#999d9c&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#4f5555&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-a
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#f05b72&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#f58f98&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-b
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#1d9537&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#007d65&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface gtd-c
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#999d9c&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#4f5555&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;GTD face.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;gtd-faces</span>)
</span></span></code></pre></div><h4 id="svg-tag-mode">svg-tag-mode</h4>
<p><code>svg-tag-mode</code> 没有 autoload ，所以需要显式的 require 此包。不能使用 <code>global-svg-tag-mode~，目前己知的问题是会导致 ~netease-cloud-musci</code> 报 numperp 的错误。 mu4e 中的图标显示成灰度图像。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;svg-tag-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defconst date-re <span style="color:#e6db74">&#34;[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}&#34;</span>)
</span></span><span style="display:flex;"><span>(defconst time-re <span style="color:#e6db74">&#34;[0-9]\\{2\\}:[0-9]\\{2\\}&#34;</span>)
</span></span><span style="display:flex;"><span>(defconst day-re <span style="color:#e6db74">&#34;[A-Za-z]\\{3\\}&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun svg-progress-count (value)
</span></span><span style="display:flex;"><span>  (let* ((seq (<span style="color:#a6e22e">mapcar</span> <span style="color:#a6e22e">#&#39;string-to-number</span> (split-string value <span style="color:#e6db74">&#34;/&#34;</span>)))
</span></span><span style="display:flex;"><span>	 (count (<span style="color:#a6e22e">float</span> (<span style="color:#a6e22e">car</span> seq)))
</span></span><span style="display:flex;"><span>	 (total (<span style="color:#a6e22e">float</span> (cadr seq))))
</span></span><span style="display:flex;"><span>  (svg-image (svg-lib-concat
</span></span><span style="display:flex;"><span>	      (svg-lib-progress-bar (<span style="color:#a6e22e">/</span> count total) <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>				    :margin <span style="color:#ae81ff">0</span> :stroke <span style="color:#ae81ff">2</span> :radius <span style="color:#ae81ff">3</span> :padding <span style="color:#ae81ff">2</span> :width <span style="color:#ae81ff">11</span>)
</span></span><span style="display:flex;"><span>	      (svg-lib-tag value <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>			   :stroke <span style="color:#ae81ff">2</span> :padding <span style="color:#ae81ff">2</span> :margin <span style="color:#ae81ff">1</span>)) :ascent <span style="color:#e6db74">&#39;center</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq svg-tag-tags
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">`</span>((<span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;TODO&#34;</span> :face <span style="color:#e6db74">&#39;org-todo</span> :inverse <span style="color:#66d9ef">t</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;NEXT&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;NEXT&#34;</span> :face <span style="color:#e6db74">&#39;gtd-next</span> :inverse <span style="color:#66d9ef">t</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;WAIT&#34;</span> :face <span style="color:#e6db74">&#39;gtd-wait</span> :inverse <span style="color:#66d9ef">t</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;SOMEDAY&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;SOMEDAY&#34;</span> :face <span style="color:#e6db74">&#39;gtd-someday</span> :inverse <span style="color:#66d9ef">t</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;CNCL&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;CNCL&#34;</span> :face <span style="color:#e6db74">&#39;gtd-cncl</span> :inverse <span style="color:#66d9ef">t</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;DONE&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag) (svg-tag-make <span style="color:#e6db74">&#34;DONE&#34;</span> :face <span style="color:#e6db74">&#39;org-done</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;\\[#[A]\\]&#34;</span> <span style="color:#f92672">.</span> ( (lambda (tag)
</span></span><span style="display:flex;"><span>			      (svg-tag-make tag :face <span style="color:#e6db74">&#39;gtd-a</span>
</span></span><span style="display:flex;"><span>					    :inverse <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>					    :beg <span style="color:#ae81ff">2</span> :end <span style="color:#ae81ff">-1</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;\\[#[B]\\]&#34;</span> <span style="color:#f92672">.</span> ( (lambda (tag)
</span></span><span style="display:flex;"><span>			      (svg-tag-make tag :face <span style="color:#e6db74">&#39;gtd-b</span>
</span></span><span style="display:flex;"><span>					    :inverse <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>					    :beg <span style="color:#ae81ff">2</span> :end <span style="color:#ae81ff">-1</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;\\[#[C]\\]&#34;</span> <span style="color:#f92672">.</span> ( (lambda (tag)
</span></span><span style="display:flex;"><span>			      (svg-tag-make tag :face <span style="color:#e6db74">&#39;gtd-c</span>
</span></span><span style="display:flex;"><span>					    :inverse <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>					    :beg <span style="color:#ae81ff">2</span> :end <span style="color:#ae81ff">-1</span> :margin <span style="color:#ae81ff">0</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;\\(\\[[0-9]+/[0-9]+\\]\\)&#34;</span> <span style="color:#f92672">.</span> ((lambda (tag)
</span></span><span style="display:flex;"><span>					  (svg-progress-count (<span style="color:#a6e22e">substring</span> tag <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">-1</span>)))))
</span></span><span style="display:flex;"><span>	))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;svg-tag-mode</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (global-svg-tag-mode)</span>
</span></span></code></pre></div><h4 id="auto-update-svg-tag">Auto update svg-tag</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(advice-add <span style="color:#e6db74">&#39;modus-themes-toggle</span> :after <span style="color:#e6db74">&#39;svg-tag-mode-on</span>)
</span></span><span style="display:flex;"><span>(advice-add <span style="color:#e6db74">&#39;circadian-activate-latest-theme</span> :after <span style="color:#e6db74">&#39;svg-tag-mode-on</span>)
</span></span></code></pre></div><h3 id="lin">lin</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq lin-face <span style="color:#e6db74">&#39;lin-blue</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq lin-mode-hooks <span style="color:#f92672">&#39;</span>(bongo-mode-hook
</span></span><span style="display:flex;"><span>		       dired-mode-hook
</span></span><span style="display:flex;"><span>		       elfeed-search-mode-hook
</span></span><span style="display:flex;"><span>		       elfeed-summary-mode-hook
</span></span><span style="display:flex;"><span>		       elfeed-show-mode-hook
</span></span><span style="display:flex;"><span>		       git-rebase-mode-hook
</span></span><span style="display:flex;"><span>		       grep-mode-hook
</span></span><span style="display:flex;"><span>		       ibuffer-mode-hook
</span></span><span style="display:flex;"><span>		       ilist-mode-hook
</span></span><span style="display:flex;"><span>		       pdf-outline-minor-mode-hook
</span></span><span style="display:flex;"><span>		       ledger-report-mode-hook
</span></span><span style="display:flex;"><span>		       log-view-mode-hook
</span></span><span style="display:flex;"><span>		       magit-log-mode-hook
</span></span><span style="display:flex;"><span>		       mu4e-headers-mode
</span></span><span style="display:flex;"><span>		       notmuch-search-mode-hook
</span></span><span style="display:flex;"><span>		       notmuch-tree-mode-hook
</span></span><span style="display:flex;"><span>		       occur-mode-hook
</span></span><span style="display:flex;"><span>		       elfeed-show-mode-hook
</span></span><span style="display:flex;"><span>		       org-agenda-mode-hook
</span></span><span style="display:flex;"><span>		       proced-mode-hook
</span></span><span style="display:flex;"><span>		       ebib-entry-mode-hook
</span></span><span style="display:flex;"><span>		       ebib-index-mode-hook
</span></span><span style="display:flex;"><span>		       netease-cloud-music-mode-hook
</span></span><span style="display:flex;"><span>		       tabulated-list-mode-hook))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(lin-global-mode <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><h3 id="frame-management">Frame management</h3>
<h4 id="fullscreen">Fullscreen</h4>
<p>我总是全屏使用 Emacs。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(toggle-frame-fullscreen)
</span></span></code></pre></div><h4 id="quit-and-delete-window">Quit and delete window</h4>
<p>删除窗口，而不是只是隐藏它，见 <a href="https://www.reddit.com/r/emacs/comments/t1rvbd/help_wanted_emacs_doesnt_really_deletes_special/">Reddit</a> 。</p>
<p>这个对于一些临时 buffer 很有用，使用 ESC 进行最近 buffer 切换时，就不会出现不想要的 buffer ，如 \*fanyi\*, \*G0-Translator\* \*help\* 等。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun quit-window-delete (<span style="color:#66d9ef">&amp;optional</span> kill window)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Quit WINDOW, deleting it, and bury its buffer.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">WINDOW must be a live window and defaults to the selected one.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">With prefix argument KILL non-nil, kill the buffer instead of
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">burying it.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">This is similar to the version of </span><span style="color:#e6db74">`quit-window&#39;</span><span style="color:#e6db74"> that Emacs had before
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">the introduction of </span><span style="color:#e6db74">`quit-restore-window&#39;</span><span style="color:#e6db74">.  It ignores the information
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">stored in WINDOW&#39;s </span><span style="color:#e6db74">`quit-restore&#39;</span><span style="color:#e6db74"> window parameter.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">It deletes the WINDOW more often, rather than switching to another
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">buffer in it.  If WINDOW is alone in its frame then the frame is
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">deleted or iconified, according to option </span><span style="color:#e6db74">`frame-auto-hide-function&#39;</span><span style="color:#e6db74">.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive <span style="color:#e6db74">&#34;P&#34;</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">set-window-parameter</span> window <span style="color:#e6db74">&#39;quit-restore</span> <span style="color:#f92672">`</span>(frame frame <span style="color:#66d9ef">nil</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">current-buffer</span>)))
</span></span><span style="display:flex;"><span>  (quit-restore-window window (if kill <span style="color:#e6db74">&#39;kill</span> <span style="color:#e6db74">&#39;bury</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key [remap quit-window] <span style="color:#e6db74">&#39;quit-window-delete</span>)
</span></span><span style="display:flex;"><span>(global-set-key [remap meow-quit] <span style="color:#e6db74">&#39;quit-window-delete</span>)
</span></span></code></pre></div><h4 id="scroll-other-window">Scroll other window</h4>
<p>这个在并排使用两个 buffer 的时候很好用。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun dn/scroll-other-windown-down ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Scroll other window down.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (scroll-other-window-down <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun dn/scroll-other-windown ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Scroll other window up.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">scroll-other-window</span> <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-n&#34;</span>) <span style="color:#e6db74">&#39;dn/scroll-other-windown</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-p&#34;</span>) <span style="color:#e6db74">&#39;dn/scroll-other-windown-down</span>)
</span></span></code></pre></div><h4 id="org-src">Org-src</h4>
<p>默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org</span>
</span></span><span style="display:flex;"><span>  (setq org-src-window-setup <span style="color:#e6db74">&#39;current-window</span>))
</span></span></code></pre></div><h4 id="display-buffer-alist">display-buffer-alist</h4>
<p>我选择使用 display-buffer-alist 进行窗口的管理，有一些包如 popup ， shackle 等也可以使用。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>one-key buffer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq display-buffer-alist
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;*One-Key*&#34;</span>
</span></span><span style="display:flex;"><span>	(display-buffer-reuse-window
</span></span><span style="display:flex;"><span>	 display-buffer-in-side-window)
</span></span><span style="display:flex;"><span>	(side <span style="color:#f92672">.</span> bottom)
</span></span><span style="display:flex;"><span>	(reusable-frames <span style="color:#f92672">.</span> visible)
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>	 (select <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>	 (quit <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>	 (popup <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>	 (mode-line-format <span style="color:#f92672">.</span> none)
</span></span><span style="display:flex;"><span>	 (tab-line-format <span style="color:#f92672">.</span> none)))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>eshell buffer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;display-buffer-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;*eshell*&#34;</span>
</span></span><span style="display:flex;"><span>	       (display-buffer-reuse-window
</span></span><span style="display:flex;"><span>		display-buffer-in-side-window)
</span></span><span style="display:flex;"><span>	       (side <span style="color:#f92672">.</span> bottom)
</span></span><span style="display:flex;"><span>	       (window-height <span style="color:#f92672">.</span> <span style="color:#ae81ff">0.8</span>)
</span></span><span style="display:flex;"><span>	       (slot <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	       (<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>		(mode-line-format <span style="color:#f92672">.</span> none)
</span></span><span style="display:flex;"><span>		(tab-line-format <span style="color:#f92672">.</span> none))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>help buffer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;display-buffer-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;*Help*&#34;</span>
</span></span><span style="display:flex;"><span>	       (display-buffer-in-side-window)
</span></span><span style="display:flex;"><span>	       (side <span style="color:#f92672">.</span> right)
</span></span><span style="display:flex;"><span>	       (window-width <span style="color:#f92672">.</span> <span style="color:#ae81ff">0.5</span>)
</span></span><span style="display:flex;"><span>	       (slot <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	       (<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>		(mode-line-format <span style="color:#f92672">.</span> none)
</span></span><span style="display:flex;"><span>		(tab-line-format <span style="color:#f92672">.</span> none))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-roam buffer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;display-buffer-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\*org-roam\\*&#34;</span>
</span></span><span style="display:flex;"><span>	       (display-buffer-in-direction)
</span></span><span style="display:flex;"><span>	       (direction <span style="color:#f92672">.</span> right)
</span></span><span style="display:flex;"><span>	       (window-width <span style="color:#f92672">.</span> <span style="color:#ae81ff">0.25</span>)
</span></span><span style="display:flex;"><span>	       (window-height <span style="color:#f92672">.</span> fit-window-to-buffer)
</span></span><span style="display:flex;"><span>	       (<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>		(mode-line-format <span style="color:#f92672">.</span> none)
</span></span><span style="display:flex;"><span>		(tab-line-format <span style="color:#f92672">.</span> none))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Ilist buffer</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;display-buffer-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;*Ilist*&#34;</span>
</span></span><span style="display:flex;"><span>	       (display-buffer-in-side-window)
</span></span><span style="display:flex;"><span>	       (side <span style="color:#f92672">.</span> right)
</span></span><span style="display:flex;"><span>	       (window-width <span style="color:#f92672">.</span> <span style="color:#ae81ff">0.3</span>)
</span></span><span style="display:flex;"><span>	       (slot <span style="color:#f92672">.</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	       (<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>		(mode-line-format <span style="color:#f92672">.</span> none)
</span></span><span style="display:flex;"><span>		(tab-line-format <span style="color:#f92672">.</span> none))))
</span></span></code></pre></div></li>
</ul>
<h3 id="awesome-tray">Awesome Tray</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq awesome-tray-active-modules <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;date&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(awesome-tray-mode <span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><h4 id="update-awesome-tray-status">Update awesome tray status</h4>
<p>Enable awesome tray when theme changed。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defvar after-load-theme-hook <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Hook run after a color theme is loaded using </span><span style="color:#e6db74">`load-theme&#39;</span><span style="color:#e6db74">.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defadvice load-theme (after run-after-load-theme-hook activate)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Run </span><span style="color:#e6db74">`after-load-theme-hook&#39;</span><span style="color:#e6db74">.&#34;</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">run-hooks</span> <span style="color:#e6db74">&#39;after-load-theme-hook</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-load-theme-hook</span> <span style="color:#e6db74">&#39;awesome-tray-enable</span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h2 id="editor-enhancement-c-dot-r-dot-u-dot-d">Editor Enhancement &ndash; C.R.U.D</h2>
<p>编辑器的功能是为了更好的增删改查。</p>
<h3 id="rime">rime</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq rime-librime-root <span style="color:#e6db74">&#34;~/.emacs.d/librime/dist&#34;</span>
</span></span><span style="display:flex;"><span>      rime-emacs-module-header-root <span style="color:#e6db74">&#34;/opt/homebrew/opt/emacs-plus@28/include&#34;</span>
</span></span><span style="display:flex;"><span>      rime-user-data-dir <span style="color:#e6db74">&#34;~/Library/Rime/&#34;</span>
</span></span><span style="display:flex;"><span>      default-input-method <span style="color:#e6db74">&#34;rime&#34;</span>
</span></span><span style="display:flex;"><span>      rime-show-candidate <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq rime-disable-predicates <span style="color:#f92672">&#39;</span>(meow-normal-mode-p
</span></span><span style="display:flex;"><span>				meow-motion-mode-p
</span></span><span style="display:flex;"><span>				meow-keypad-mode-p
</span></span><span style="display:flex;"><span>				rime-predicate-prog-in-code-p
</span></span><span style="display:flex;"><span>				rime-predicate-org-in-src-block-p
</span></span><span style="display:flex;"><span>				rime-predicate-current-uppercase-letter-p))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq rime-inline-predicates <span style="color:#f92672">&#39;</span>(rime-predicate-space-after-cc-p
</span></span><span style="display:flex;"><span>			       rime-predicate-after-alphabet-char-p))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> (lambda () (set-input-method <span style="color:#e6db74">&#34;rime&#34;</span>)))
</span></span></code></pre></div><h3 id="rime-regexp">rime-regexp</h3>
<p>使用拼音进行中文的检索。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(rime-regexp-mode)
</span></span></code></pre></div><h3 id="autoinsert">autoinsert</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(define-auto-insert
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">cons</span> <span style="color:#e6db74">&#34;init-.*\\.el&#34;</span> <span style="color:#e6db74">&#34;Emacs Lisp Skeleton&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;Emacs Configuration Description: &#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;;;;; &#34;</span> (<span style="color:#a6e22e">file-name-nondirectory</span> (<span style="color:#a6e22e">buffer-file-name</span>)) <span style="color:#e6db74">&#34; --- &#34;</span> str
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">make-string</span> (<span style="color:#a6e22e">max</span> <span style="color:#ae81ff">2</span> (<span style="color:#a6e22e">-</span> <span style="color:#ae81ff">80</span> (<span style="color:#a6e22e">current-column</span>) <span style="color:#ae81ff">27</span>)) <span style="color:#e6db74">?\s</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;-*- lexical-binding: t; -*-&#34;</span> <span style="color:#f92672">&#39;</span>(setq lexical-binding <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">;; Copyright (C) &#34;</span> (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y&#34;</span>) <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">;;; Commentary:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">;; &#34;</span> _ <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">;;; Code:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">(provide &#39;&#34;</span>
</span></span><span style="display:flex;"><span>    (file-name-base (<span style="color:#a6e22e">buffer-file-name</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">;;; &#34;</span> (<span style="color:#a6e22e">file-name-nondirectory</span> (<span style="color:#a6e22e">buffer-file-name</span>)) <span style="color:#e6db74">&#34; ends here\n&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(auto-insert-mode)
</span></span></code></pre></div><h3 id="embrace">embrace</h3>
<p>这个包很方便的对文本进行括号的增删改。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;embrace</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(set-face-attribute <span style="color:#e6db74">&#39;embrace-help-pair-face</span> <span style="color:#66d9ef">nil</span> :inherit font-lock-function-name-face :inverse-video <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-,&#34;</span>) <span style="color:#e6db74">&#39;embrace-commander</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun embrace-org-mode-hook ()
</span></span><span style="display:flex;"><span>  (dolist (lst <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">?=</span> <span style="color:#e6db74">&#34; =&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;= &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?~</span> <span style="color:#e6db74">&#34; ~&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;~ &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?/</span> <span style="color:#e6db74">&#34; /&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;/ &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?*</span> <span style="color:#e6db74">&#34; *&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;* &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?_</span> <span style="color:#e6db74">&#34; _&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;_ &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?+</span> <span style="color:#e6db74">&#34; +&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;+ &#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">?k</span> <span style="color:#e6db74">&#34;@@html:&lt;kbd&gt;@@&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;@@html:&lt;/kbd&gt;@@&#34;</span>)))
</span></span><span style="display:flex;"><span>    (embrace-add-pair (<span style="color:#a6e22e">car</span> lst) (cadr lst) (cddr lst))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;embrace-org-mode-hook</span>)
</span></span></code></pre></div><h3 id="recent-file">recent file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>recentf-mode)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;kill-emacs-hook</span> <span style="color:#a6e22e">#&#39;</span>recentf-cleanup)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq recentf-save-file <span style="color:#e6db74">&#34;/Users/duanning/.cache/emacs/recentf&#34;</span>
</span></span><span style="display:flex;"><span>      recentf-max-saved-items <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>      recentf-exclude <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;[0-9]*-.*.org&#34;</span> <span style="color:#e6db74">&#34;slipbox&#34;</span> <span style="color:#e6db74">&#34;todos&#34;</span> <span style="color:#e6db74">&#34;recentf&#34;</span> <span style="color:#e6db74">&#34;M.Calibre&#34;</span> <span style="color:#e6db74">&#34;.elfeed&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq recentf-auto-cleanup (if (<span style="color:#a6e22e">daemonp</span>)
</span></span><span style="display:flex;"><span>			       <span style="color:#ae81ff">300</span>))
</span></span></code></pre></div><h3 id="dired-mode">dired-mode</h3>
<h4 id="files">files</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(make-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;backups/&#34;</span> dn-cache-directory) <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq confirm-kill-processes <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq backup-directory-alist <span style="color:#f92672">`</span>((<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;backups/&#34;</span> dn-cache-directory))))
</span></span></code></pre></div><h4 id="dired">dired</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq dired-recursive-deletes <span style="color:#e6db74">&#39;always</span>
</span></span><span style="display:flex;"><span>      dired-recursive-copies <span style="color:#e6db74">&#39;always</span>
</span></span><span style="display:flex;"><span>      global-auto-revert-non-file-buffers <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      auto-revert-verbose <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      dired-dwim-target <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      delete-by-moving-to-trash <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      load-prefer-newer <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      auto-revert-use-notify <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      auto-revert-interval <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>      insert-directory-program <span style="color:#e6db74">&#34;gls&#34;</span> dired-use-ls-dired <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      dired-listing-switches <span style="color:#e6db74">&#34;-al --group-directories-first&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">put</span> <span style="color:#e6db74">&#39;dired-find-alternate-file</span> <span style="color:#e6db74">&#39;disabled</span> <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;dired</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> dired-mode-map (kbd <span style="color:#e6db74">&#34;P&#34;</span>) <span style="color:#e6db74">&#39;peep-dired</span>))
</span></span></code></pre></div><h4 id="dired-x">dired-x</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-x C-j&#34;</span>) <span style="color:#e6db74">&#39;dired-jump</span>)
</span></span></code></pre></div><h4 id="diredfl">diredfl</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(diredfl-global-mode)
</span></span></code></pre></div><h4 id="peep-dired">peep-dired</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq peep-dired-ignored-extensions <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;mkv&#34;</span> <span style="color:#e6db74">&#34;iso&#34;</span> <span style="color:#e6db74">&#34;mp4&#34;</span> <span style="color:#e6db74">&#34;pdf&#34;</span>))
</span></span></code></pre></div><h4 id="dired-hide-dotfiles">dired-hide-dotfiles</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my-dired-mode-hook ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My </span><span style="color:#e6db74">`dired&#39;</span><span style="color:#e6db74"> mode hook.&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; To hide dot-files by default</span>
</span></span><span style="display:flex;"><span>  (dired-hide-dotfiles-mode))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> dired-mode-map <span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#a6e22e">#&#39;</span>dired-hide-dotfiles-mode)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;dired-mode-hook</span> <span style="color:#a6e22e">#&#39;</span>my-dired-mode-hook)
</span></span></code></pre></div><h4 id="dired-git-info">dired-git-info</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq dgi-auto-hide-details-p <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;dired</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> dired-mode-map <span style="color:#e6db74">&#34;)&#34;</span> <span style="color:#e6db74">&#39;dired-git-info-mode</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;dired-after-readin-hook</span> <span style="color:#e6db74">&#39;dired-git-info-auto-enable</span>)
</span></span></code></pre></div><h3 id="hungry-delete">hungry delete</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;hungry-delete</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq hungry-delete-chars-to-skip <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">\f&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;global-hungry-delete-mode</span>)
</span></span></code></pre></div><h3 id="auto-save">auto save</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;auto-save</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;auto-save-enable</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq auto-save-silent <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      auto-save-delete-trailing-whitespace <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      auto-save-list-file-prefix (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;auto-save-list/.saves-&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-capture-mode-hook</span> <span style="color:#a6e22e">#&#39;</span>(lambda <span style="color:#66d9ef">nil</span> (setq auto-save-delete-trailing-whitespace <span style="color:#66d9ef">nil</span>)))
</span></span></code></pre></div><h3 id="save-place">save place</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq save-place-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;saveplace&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(save-place-mode)
</span></span></code></pre></div><h3 id="save-hist">save hist</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq savehist-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;savehist&#34;</span> dn-cache-directory)
</span></span><span style="display:flex;"><span>      history-length <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>      savehist-save-minibuffer-history <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      savehist-additional-variables <span style="color:#f92672">&#39;</span>(kill-ring
</span></span><span style="display:flex;"><span>				      search-ring
</span></span><span style="display:flex;"><span>				      regexp-search-ring)
</span></span><span style="display:flex;"><span>      history-delete-duplicates <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(savehist-mode)
</span></span></code></pre></div><h3 id="undo">Undo</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-undo-fu-session-mode)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq undo-fu-session-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;undo-fu-session&#34;</span> dn-cache-directory))
</span></span></code></pre></div><h3 id="vundo">Vundo</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;vundo</span>)
</span></span><span style="display:flex;"><span>(setq vundo-glyph-alist vundo-unicode-symbols)
</span></span></code></pre></div><h3 id="ctrlf">ctrlf</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span><span style="color:#75715e">;; (require &#39;ctrlf)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(ctrlf-mode)
</span></span></code></pre></div><h3 id="google-this">google-this</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(google-this-mode)
</span></span></code></pre></div><h3 id="vertico">vertico</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;vertico-cycle</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;vertico</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> vertico-map (kbd <span style="color:#e6db74">&#34;C-j&#34;</span>) <span style="color:#e6db74">&#39;vertico-directory-up</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(vertico-mode)
</span></span></code></pre></div><h3 id="marginalia">marginalia</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;marginalia-annotators</span> <span style="color:#f92672">&#39;</span>(marginalia-annotators-heavy marginalia-annotators-light <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(marginalia-mode)
</span></span></code></pre></div><h3 id="consult">consult</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;completion-list-mode-hook</span> <span style="color:#e6db74">&#39;consult-preview-at-point-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-x C-b&#34;</span>) <span style="color:#e6db74">&#39;consult-buffer</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-y&#34;</span>) <span style="color:#e6db74">&#39;consult-yank-pop</span>)
</span></span></code></pre></div><h3 id="consult-dir">consult-dir</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;consult-dir</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-x C-d&#34;</span>) <span style="color:#e6db74">&#39;consult-dir</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;vertico</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> vertico-map (kbd <span style="color:#e6db74">&#34;C-x C-d&#34;</span>) <span style="color:#e6db74">&#39;consult-dir</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> vertico-map (kbd <span style="color:#e6db74">&#34;C-x C-j&#34;</span>) <span style="color:#e6db74">&#39;consult-dir-jump-file</span>))
</span></span></code></pre></div><h3 id="orderless">orderless</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;orderless</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq completion-styles <span style="color:#f92672">&#39;</span>(orderless partial-completion)
</span></span><span style="display:flex;"><span>      completion-category-defaults <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      completion-category-overrides <span style="color:#f92672">&#39;</span>((file (styles <span style="color:#f92672">.</span> (partial-completion)))))
</span></span></code></pre></div><h3 id="corfu">corfu</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq corfu-auto <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      corfu-cycle <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      corfu-quit-at-boundary <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      corfu-auto-prefix <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>      corfu-preselect-first <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      corfu-quit-no-match <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;corfu</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> corfu-map (kbd <span style="color:#e6db74">&#34;C-n&#34;</span>) <span style="color:#e6db74">&#39;corfu-next</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> corfu-map (kbd <span style="color:#e6db74">&#34;C-p&#34;</span>) <span style="color:#e6db74">&#39;corfu-previous</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> corfu-map (kbd <span style="color:#e6db74">&#34;&lt;escape&gt;&#34;</span>) <span style="color:#e6db74">&#39;corfu-quit</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(corfu-global-mode)
</span></span></code></pre></div><h3 id="corfu-doc">corfu-doc</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;corfu-doc</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;corfu-mode-hook</span> <span style="color:#e6db74">&#39;corfu-doc-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq corfu-doc-delay <span style="color:#ae81ff">0.5</span>
</span></span><span style="display:flex;"><span>      corfu-doc-max-width <span style="color:#ae81ff">70</span>
</span></span><span style="display:flex;"><span>      corfu-doc-max-height <span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> corfu-map (kbd <span style="color:#e6db74">&#34;M-p&#34;</span>) <span style="color:#e6db74">&#39;corfu-doc-scroll-down</span>)
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> corfu-map (kbd <span style="color:#e6db74">&#34;M-n&#34;</span>) <span style="color:#e6db74">&#39;corfu-doc-scroll-up</span>)
</span></span></code></pre></div><h3 id="embark">embark</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key [remap describe-bindings] <span style="color:#a6e22e">#&#39;</span>embark-bindings)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-.&#34;</span>) <span style="color:#e6db74">&#39;embark-act</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-.&#34;</span>) <span style="color:#e6db74">&#39;embark-dwim</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Use Embark to show bindings in a key prefix with `C-h`</span>
</span></span><span style="display:flex;"><span>(setq prefix-help-command <span style="color:#a6e22e">#&#39;</span>embark-prefix-help-command)
</span></span></code></pre></div><h3 id="prescient">prescient</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;prescient</span>)
</span></span></code></pre></div><h3 id="dabbrev">dabbrev</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-/&#34;</span>) <span style="color:#e6db74">&#39;dabbrev-completion</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-M-/&#34;</span>) <span style="color:#e6db74">&#39;dabbrev-expand</span>)
</span></span></code></pre></div><h3 id="cape">cape</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;cape</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p p&#34;</span>) <span style="color:#e6db74">&#39;completion-at-point</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p t&#34;</span>) <span style="color:#e6db74">&#39;complete-tag</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p d&#34;</span>) <span style="color:#e6db74">&#39;cape-dabbrev</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p f&#34;</span>) <span style="color:#e6db74">&#39;cape-file</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p k&#34;</span>) <span style="color:#e6db74">&#39;cape-keyword</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p s&#34;</span>) <span style="color:#e6db74">&#39;cape-symbol</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p a&#34;</span>) <span style="color:#e6db74">&#39;cape-abbrev</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p i&#34;</span>) <span style="color:#e6db74">&#39;cape-ispell</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p l&#34;</span>) <span style="color:#e6db74">&#39;cape-line</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p w&#34;</span>) <span style="color:#e6db74">&#39;cape-dict</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p \\&#34;</span>) <span style="color:#e6db74">&#39;cape-tex</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p &amp;&#34;</span>) <span style="color:#e6db74">&#39;cape-sgml</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-c p r&#34;</span>) <span style="color:#e6db74">&#39;cape-rfc1345</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;completion-at-point-functions</span> <span style="color:#a6e22e">#&#39;</span>cape-file)
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;completion-at-point-functions</span> <span style="color:#a6e22e">#&#39;</span>cape-tex)
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;completion-at-point-functions</span> <span style="color:#a6e22e">#&#39;</span>cape-dabbrev)
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;completion-at-point-functions</span> <span style="color:#a6e22e">#&#39;</span>cape-keyword)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;(add-to-list &#39;completion-at-point-functions #&#39;cape-sgml)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;(add-to-list &#39;completion-at-point-functions #&#39;cape-rfc1345)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;(add-to-list &#39;completion-at-point-functions #&#39;cape-abbrev)</span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;completion-at-point-functions</span> <span style="color:#a6e22e">#&#39;</span>cape-ispell)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (add-to-list &#39;completion-at-point-functions #&#39;cape-dict)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;(add-to-list &#39;completion-at-point-functions #&#39;cape-symbol)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;(add-to-list &#39;completion-at-point-functions #&#39;cape-line)</span>
</span></span></code></pre></div><h3 id="tempel">tempel</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;tempel</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq tempel-path <span style="color:#e6db74">&#34;~/.emacs.d/template/tempel&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun tempel-setup-capf ()
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; Add the Tempel Capf to `completion-at-point-functions&#39;. `tempel-expand&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; only triggers on exact matches. Alternatively use `tempel-complete&#39; if</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; you want to see all matches, but then Tempel will probably trigger too</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; often when you don&#39;t expect it.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; NOTE: We add `tempel-expand&#39; *before* the main programming mode Capf,</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">;; such that it will be tried first.</span>
</span></span><span style="display:flex;"><span>  (setq-local completion-at-point-functions
</span></span><span style="display:flex;"><span>	      (<span style="color:#a6e22e">cons</span> <span style="color:#a6e22e">#&#39;</span>tempel-expand
</span></span><span style="display:flex;"><span>		    completion-at-point-functions)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;text-mode-hook</span> <span style="color:#e6db74">&#39;tempel-setup-capf</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-+&#34;</span>) <span style="color:#e6db74">&#39;tempel-complete</span>)
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;M-*&#34;</span>) <span style="color:#e6db74">&#39;tempel-insert</span>)
</span></span></code></pre></div><h3 id="open-in-external-apps">Open in external apps</h3>
<p>有些时候需要使用外部应用打开相应的文件，比如打印文件的时候。目前还没有发现直接使用 Emacs 打印文件的方法。</p>
<p>这里只使用 safari 打开相应的文件，如需要使用其他的应用，可以参照<a href="http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html">博客</a>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun xah-html-open-in-safari ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Open the current file or </span><span style="color:#e6db74">`dired&#39;</span><span style="color:#e6db74"> marked files in Mac&#39;s Safari browser.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If the file is not saved, save it first.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">URL </span><span style="color:#e6db74">`http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html&#39;</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Version 2018-02-26&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (let* (
</span></span><span style="display:flex;"><span>	 ($file-list
</span></span><span style="display:flex;"><span>	  (if (<span style="color:#a6e22e">string-equal</span> major-mode <span style="color:#e6db74">&#34;dired-mode&#34;</span>)
</span></span><span style="display:flex;"><span>	      (dired-get-marked-files)
</span></span><span style="display:flex;"><span>	    (<span style="color:#a6e22e">list</span> (<span style="color:#a6e22e">buffer-file-name</span>))))
</span></span><span style="display:flex;"><span>	 ($do-it-p (if (<span style="color:#a6e22e">&lt;=</span> (<span style="color:#a6e22e">length</span> $file-list) <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>		       <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>		     (y-or-n-p <span style="color:#e6db74">&#34;Open more than 5 files? &#34;</span>))))
</span></span><span style="display:flex;"><span>    (when $do-it-p
</span></span><span style="display:flex;"><span>      (cond
</span></span><span style="display:flex;"><span>       ((<span style="color:#a6e22e">string-equal</span> system-type <span style="color:#e6db74">&#34;darwin&#34;</span>)
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">mapc</span>
</span></span><span style="display:flex;"><span>	 (lambda ($fpath)
</span></span><span style="display:flex;"><span>	   (when (<span style="color:#a6e22e">buffer-modified-p</span> )
</span></span><span style="display:flex;"><span>	     (save-buffer))
</span></span><span style="display:flex;"><span>	   (shell-command
</span></span><span style="display:flex;"><span>	    (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;open -a Safari.app \&#34;%s\&#34;&#34;</span> $fpath))) $file-list))))))
</span></span></code></pre></div><h2 id="language-configuration">Language configuration</h2>
<h3 id="lsp-language-service-protocol">LSP: Language service protocol</h3>
<h4 id="eldoc">eldoc</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(eldoc-mode)
</span></span></code></pre></div><h4 id="eglot">eglot</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;python-mode-hook</span> <span style="color:#e6db74">&#39;eglot-ensure</span>)
</span></span></code></pre></div><h3 id="language-spell-check-and-translate">Language spell check and translate</h3>
<h4 id="ispell">ispell</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq ispell-program-name <span style="color:#e6db74">&#34;aspell&#34;</span>
</span></span><span style="display:flex;"><span>      ispell-extra-args <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;--sug-mode=ultra&#34;</span> <span style="color:#e6db74">&#34;--lang=en_US&#34;</span> <span style="color:#e6db74">&#34;--run-together&#34;</span>))
</span></span></code></pre></div><h4 id="flyspell">flyspell</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;text-mode-hook</span> <span style="color:#e6db74">&#39;flyspell-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;flyspell</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> flyspell-mode-map (kbd <span style="color:#e6db74">&#34;C-;&#34;</span>) <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> flyspell-mode-map (kbd <span style="color:#e6db74">&#34;C-,&#34;</span>) <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> flyspell-mode-map (kbd <span style="color:#e6db74">&#34;C-.&#34;</span>) <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq flyspell-duplicate-distance <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>      flyspell-mark-duplications-flag <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><h4 id="flyspell-correct">flyspell-correct</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-;&#34;</span>) <span style="color:#f92672">&#39;</span> flyspell-correct-wrapper)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq flyspell-correct-interface <span style="color:#a6e22e">#&#39;</span>flyspell-correct-popup)
</span></span></code></pre></div><h4 id="fanyi">fanyi</h4>
<p>此包对单词进行查询。2022-04-14 目前使用有些 fanyi provider 有点慢，不知道是为什么。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;fanyi</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(custom-set-variables <span style="color:#f92672">&#39;</span>(fanyi-providers <span style="color:#f92672">&#39;</span>(
</span></span><span style="display:flex;"><span>					  <span style="color:#75715e">;; fanyi-haici-provider</span>
</span></span><span style="display:flex;"><span>					  fanyi-youdao-thesaurus-provider
</span></span><span style="display:flex;"><span>					  <span style="color:#75715e">;; fanyi-etymon-provider</span>
</span></span><span style="display:flex;"><span>					  <span style="color:#75715e">;; fanyi-longman-provider</span>
</span></span><span style="display:flex;"><span>					  <span style="color:#75715e">;; fanyi-libre-provider</span>
</span></span><span style="display:flex;"><span>					  )))
</span></span></code></pre></div><h4 id="powerthesaurus">Powerthesaurus</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;powerthesaurus</span>)
</span></span></code></pre></div><h4 id="smog">Smog</h4>
<p><a href="https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3">https://github.com/zzkt/smog/tree/28b053198ff9c1b142789614d85d7d762d9b0fa3</a></p>
<p><a href="https://wiki.christophchamp.com/index.php?title=Style_and_Diction">https://wiki.christophchamp.com/index.php?title=Style_and_Diction</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;smog</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq smog-command <span style="color:#e6db74">&#34;style -L en&#34;</span>)
</span></span></code></pre></div><h4 id="osx-dictionary">osx-dictionary</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;osx-dictionary</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq osx-dictionary-use-chinese-text-segmentation <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="go-translate">go-translate</h4>
<p>此包可对整句进行翻译。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;go-translate</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq gts-translate-list <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;en&#34;</span> <span style="color:#e6db74">&#34;zh&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq gts-default-translator (gts-translator
</span></span><span style="display:flex;"><span>			      :picker (gts-noprompt-picker)
</span></span><span style="display:flex;"><span>			      :engines (<span style="color:#a6e22e">list</span>
</span></span><span style="display:flex;"><span>					(gts-bing-engine)
</span></span><span style="display:flex;"><span>					(gts-google-engine :parser (gts-google-summary-parser))
</span></span><span style="display:flex;"><span>					<span style="color:#75715e">;; (gts-google-rpc-engine :parser (gts-google-rpc-parser) :url &#34;https://translate.google.com&#34;)</span>
</span></span><span style="display:flex;"><span>					)
</span></span><span style="display:flex;"><span>			      :render (gts-buffer-render)))
</span></span></code></pre></div><h3 id="program-language">Program language</h3>
<h4 id="markdown">Markdown</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;auto-mode-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;README\\.md\\&#39;&#34;</span> <span style="color:#f92672">.</span> gfm-mode))
</span></span></code></pre></div><h4 id="beancount">Beancount</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq beancount-electric-currency <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;auto-mode-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.bean\\&#39;&#34;</span> <span style="color:#f92672">.</span> beancount-mode))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;beancount-mode-hook</span> <span style="color:#a6e22e">#&#39;</span>outline-minor-mode)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;beancount-mode-hook</span> <span style="color:#a6e22e">#&#39;</span>(lambda <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>				   (setq-local electric-indent-chars <span style="color:#66d9ef">nil</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;beancount</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> beancount-mode-map (kbd <span style="color:#e6db74">&#34;C-c C-n&#34;</span>) <span style="color:#e6db74">&#39;outline-next-visible-heading</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> beancount-mode-map (kbd <span style="color:#e6db74">&#34;C-c C-p&#34;</span>) <span style="color:#e6db74">&#39;outline-previous-visible-heading</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;all-the-icons-icon-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.bean\\&#39;&#34;</span> all-the-icons-material <span style="color:#e6db74">&#34;attach_money&#34;</span> :face all-the-icons-lblue))
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;all-the-icons-mode-icon-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(beancount-mode all-the-icons-material <span style="color:#e6db74">&#34;attach_money&#34;</span> :face all-the-icons-lblue))
</span></span></code></pre></div><h4 id="csv">CSV</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;auto-mode-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.csv\\&#39;&#34;</span> <span style="color:#f92672">.</span> csv-mode))
</span></span></code></pre></div><h4 id="yaml">Yaml</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;auto-mode-alist</span>
</span></span><span style="display:flex;"><span>	     <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;\\.yaml\\&#39;&#34;</span> <span style="color:#f92672">.</span> yaml-mode))
</span></span></code></pre></div><h4 id="python">Python</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq python-shell-interpreter <span style="color:#e6db74">&#34;python3&#34;</span>
</span></span><span style="display:flex;"><span>      python-indent-guess-indent-offset <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><h3 id="organize-life-with-org-mode">Organize life with org-mode</h3>
<p>使用纯文本组织生活，是一种哲学，是一种生活方式。此 <a href="http://doc.norang.ca/org-mode.html">Blog</a> 是践行此哲学的开端。</p>
<h4 id="better-default">Better Default</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-modules  <span style="color:#f92672">&#39;</span>()
</span></span><span style="display:flex;"><span>      org-deadline-warning-days <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>      org-return-follows-link <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-agenda-dim-blocked-tasks <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-image-actual-width <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      org-display-remote-inline-images <span style="color:#e6db74">&#39;download</span>
</span></span><span style="display:flex;"><span>      org-log-into-drawer <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-fast-tag-selection-single-key <span style="color:#e6db74">&#39;expert</span>
</span></span><span style="display:flex;"><span>      org-adapt-indentation <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      org-fontify-quote-and-verse-blocks <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-support-shift-select <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; org--leading-stars t</span>
</span></span><span style="display:flex;"><span>      org-treat-S-cursor-todo-selection-as-state-change <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><!-- raw HTML omitted -->
<ul>
<li>
<p>Word wrap</p>
<p>我喜欢文本在窗口的边缘进行折行。不喜欢使用 visual-line-mode 式的折行，此方式当中英文夹杂时，在行尾参差不齐，实在是用不来。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;menu-bar--wrap-long-lines-window-edge</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (global-visual-line-mode 1)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq word-wrap-by-category t)</span>
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>todo keywords and faces</p>
<p>If you do not provide the separator bar, the last state is used as the DONE state.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-todo-keywords
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((sequence <span style="color:#e6db74">&#34;TODO(t)&#34;</span> <span style="color:#e6db74">&#34;NEXT(n)&#34;</span> <span style="color:#e6db74">&#34;STARTED&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;WAIT(w@)&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY(s@)&#34;</span> <span style="color:#e6db74">&#34;CNCL(c@/!)&#34;</span> <span style="color:#e6db74">&#34;DONE(d)&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-todo-keyword-faces
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;TODO&#34;</span> :foreground <span style="color:#e6db74">&#34;Red&#34;</span> :weight bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;NEXT&#34;</span> :foreground <span style="color:#e6db74">&#34;Forest green&#34;</span> :weight bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;SOMEDAY&#34;</span> :foreground <span style="color:#e6db74">&#34;blue&#34;</span> :weight bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;DONE&#34;</span> :foreground <span style="color:#e6db74">&#34;#705628&#34;</span> :weight bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;WAIT&#34;</span> :foreground <span style="color:#e6db74">&#34;Orange&#34;</span> :weight bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;CNCL&#34;</span> :foreground <span style="color:#e6db74">&#34;#b4534b&#34;</span> :weight bold)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>todo state triggers</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-todo-state-tags-triggers
</span></span><span style="display:flex;"><span>      (quote ((<span style="color:#e6db74">&#34;CNCL&#34;</span> (<span style="color:#e6db74">&#34;CNCL&#34;</span> <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>	      (<span style="color:#e6db74">&#34;WAIT&#34;</span> (<span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>	      (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span> (<span style="color:#e6db74">&#34;WAIT&#34;</span>) (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span> <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>	      (done (<span style="color:#e6db74">&#34;WAIT&#34;</span>) (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span>))
</span></span><span style="display:flex;"><span>	      (<span style="color:#e6db74">&#34;TODO&#34;</span> (<span style="color:#e6db74">&#34;WAIT&#34;</span>) (<span style="color:#e6db74">&#34;CNCL&#34;</span>) (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span>))
</span></span><span style="display:flex;"><span>	      (<span style="color:#e6db74">&#34;NEXT&#34;</span> (<span style="color:#e6db74">&#34;WAIT&#34;</span>) (<span style="color:#e6db74">&#34;CNCL&#34;</span>) (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span>))
</span></span><span style="display:flex;"><span>	      (<span style="color:#e6db74">&#34;DONE&#34;</span> (<span style="color:#e6db74">&#34;WAIT&#34;</span>) (<span style="color:#e6db74">&#34;CNCL&#34;</span>) (<span style="color:#e6db74">&#34;SOMEDAY&#34;</span>)))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org priority</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-priority-faces <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">?A</span> <span style="color:#f92672">.</span> <span style="color:#f92672">&#39;</span>(bold org-priority))
</span></span><span style="display:flex;"><span>			   (<span style="color:#e6db74">?B</span> <span style="color:#f92672">.</span> org-priority)
</span></span><span style="display:flex;"><span>			   (<span style="color:#e6db74">?C</span> <span style="color:#f92672">.</span> <span style="color:#f92672">&#39;</span>(shadow org-priority))))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org emphasis color</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defface my-org-emphasis-bold
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((default :inherit bold)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#a60000&#34;</span>)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background dark))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#ff8059&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My bold emphasis for Org.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;org-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface my-org-emphasis-italic
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((default :inherit italic)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#005e00&#34;</span>)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background dark))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#44bc44&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My italic emphasis for Org.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;org-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface my-org-emphasis-underline
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((default :inherit underline)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background light))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#813e00&#34;</span>)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background dark))
</span></span><span style="display:flex;"><span>     :foreground <span style="color:#e6db74">&#34;#d0bc00&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My underline emphasis for Org.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;org-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface my-org-emphasis-strike-through
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((class color) (min-colors <span style="color:#ae81ff">88</span>) (background light))
</span></span><span style="display:flex;"><span>     :strike-through <span style="color:#e6db74">&#34;#972500&#34;</span> :foreground <span style="color:#e6db74">&#34;#505050&#34;</span>)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background dark))
</span></span><span style="display:flex;"><span>     :strike-through <span style="color:#e6db74">&#34;#ef8b50&#34;</span> :foreground <span style="color:#e6db74">&#34;#a8a8a8&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My strike-through emphasis for Org.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;org-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defface my-org-emphasis-verbatim
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#39;</span>((((class color) (min-colors <span style="color:#ae81ff">88</span>) (background light))
</span></span><span style="display:flex;"><span>     :background <span style="color:#e6db74">&#34;#F7B80A&#34;</span>)
</span></span><span style="display:flex;"><span>    (((class color) (min-colors <span style="color:#ae81ff">88</span>) (background dark))
</span></span><span style="display:flex;"><span>     :background <span style="color:#e6db74">&#34;#6DA906&#34;</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;My strike-through emphasis for Org.&#34;</span>
</span></span><span style="display:flex;"><span>  :group <span style="color:#e6db74">&#39;org-faces</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-emphasis-alist
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;*&#34;</span> my-org-emphasis-bold)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;/&#34;</span> my-org-emphasis-italic)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;_&#34;</span> my-org-emphasis-underline)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;~&#34;</span> org-code verbatim)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;+&#34;</span> my-org-emphasis-strike-through)
</span></span><span style="display:flex;"><span>	(<span style="color:#e6db74">&#34;=&#34;</span> my-org-emphasis-verbatim)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-babel-load-languages</p>
<p>根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，<a href="https://emacs-china.org/t/org-babel/18699">相关讨论见 Emacs-china 论坛</a>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(org-babel-do-load-languages
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#39;org-babel-load-languages</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>((emacs-lisp <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-babel-execute-src-block (<span style="color:#66d9ef">&amp;optional</span> _arg info _params)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Load language if needed&#34;</span>
</span></span><span style="display:flex;"><span>  (let* ((lang (<span style="color:#a6e22e">nth</span> <span style="color:#ae81ff">0</span> info))
</span></span><span style="display:flex;"><span>	 (sym (if (<span style="color:#a6e22e">member</span> (<span style="color:#a6e22e">downcase</span> lang) <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#e6db74">&#34;cpp&#34;</span> <span style="color:#e6db74">&#34;c++&#34;</span>)) <span style="color:#e6db74">&#39;C</span> (<span style="color:#a6e22e">intern</span> lang)))
</span></span><span style="display:flex;"><span>	 (backup-languages org-babel-load-languages))
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">;; - (LANG . nil) 明确禁止的语言，不加载。</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">;; - (LANG . t) 已加载过的语言，不重复载。</span>
</span></span><span style="display:flex;"><span>    (unless (<span style="color:#a6e22e">assoc</span> sym backup-languages)
</span></span><span style="display:flex;"><span>      (condition-case err
</span></span><span style="display:flex;"><span>	  (progn
</span></span><span style="display:flex;"><span>	    (org-babel-do-load-languages <span style="color:#e6db74">&#39;org-babel-load-languages</span> (<span style="color:#a6e22e">list</span> (<span style="color:#a6e22e">cons</span> sym <span style="color:#66d9ef">t</span>)))
</span></span><span style="display:flex;"><span>	    (setq-default org-babel-load-languages (<span style="color:#a6e22e">append</span> (<span style="color:#a6e22e">list</span> (<span style="color:#a6e22e">cons</span> sym <span style="color:#66d9ef">t</span>)) backup-languages)))
</span></span><span style="display:flex;"><span>	(file-missing
</span></span><span style="display:flex;"><span>	 (setq-default org-babel-load-languages backup-languages)
</span></span><span style="display:flex;"><span>	 err)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(advice-add <span style="color:#e6db74">&#39;org-babel-execute-src-block</span> :before <span style="color:#e6db74">&#39;my/org-babel-execute-src-block</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-capture</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-capture-templates
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#e6db74">&#34;Inbox - todo item&#34;</span> entry (file (lambda () (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;todos/inbox.org&#34;</span> dn-galaxy)))
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;* TODO %?\n%U\n\n&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-capture-inbox ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (org-capture <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#34;i&#34;</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-attach</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-attach-id-to-path-function-list
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>(org-attach-id-ts-folder-format
</span></span><span style="display:flex;"><span>	org-attach-id-uuid-folder-format))
</span></span><span style="display:flex;"><span>(setq org-attach-dir-relative <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-refile</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-refile-targets <span style="color:#f92672">&#39;</span>((<span style="color:#66d9ef">nil</span> :maxlevel <span style="color:#f92672">.</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>			   (org-agenda-files :maxlevel <span style="color:#f92672">.</span> <span style="color:#ae81ff">9</span>)))
</span></span><span style="display:flex;"><span>(setq org-refile-use-outline-path <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-outline-path-complete-in-steps <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>(setq org-refile-allow-creating-parent-nodes <span style="color:#e6db74">&#39;confirm</span>)
</span></span><span style="display:flex;"><span>(setq org-refile-use-outline-path <span style="color:#e6db74">&#39;file</span>)
</span></span><span style="display:flex;"><span>(setq org-refile-active-region-within-subtree <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-archive</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-archive-location</span> <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/todos/gtd.org_archive::datetree/* From %s&#34;</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-habit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;org-modules</span> <span style="color:#e6db74">&#39;org-habit</span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-id</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-id-method <span style="color:#e6db74">&#39;ts</span>)
</span></span><span style="display:flex;"><span>(setq org-id-link-to-org-use-id <span style="color:#e6db74">&#39;create-if-interactive</span>)
</span></span><span style="display:flex;"><span>(setq org-id-locations-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;.org-id-locations&#34;</span> dn-cache-directory))
</span></span></code></pre></div><!-- raw HTML omitted -->
<ul>
<li>
<p>Copy id to clipboard</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun dn/copy-idlink-to-clipboard ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Copy idlink to clipboard.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (when (<span style="color:#a6e22e">eq</span> major-mode <span style="color:#e6db74">&#39;org-agenda-mode</span>) <span style="color:#75715e">;switch to orgmode</span>
</span></span><span style="display:flex;"><span>    (org-agenda-show)
</span></span><span style="display:flex;"><span>    (org-agenda-goto))
</span></span><span style="display:flex;"><span>  (when (<span style="color:#a6e22e">eq</span> major-mode <span style="color:#e6db74">&#39;org-mode</span>) <span style="color:#75715e">; do this only in org-mode buffers</span>
</span></span><span style="display:flex;"><span>    (let* ((mytmphead (<span style="color:#a6e22e">nth</span> <span style="color:#ae81ff">4</span> (org-heading-components)))
</span></span><span style="display:flex;"><span>	   (mytmpid (<span style="color:#a6e22e">funcall</span> <span style="color:#e6db74">&#39;org-id-get-create</span>))
</span></span><span style="display:flex;"><span>	   (mytmplink (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;[[id:%s][%s]]&#34;</span> mytmpid mytmphead)))
</span></span><span style="display:flex;"><span>      (kill-new mytmplink)
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;Copied %s to killring (clipboard)&#34;</span> mytmplink)))
</span></span><span style="display:flex;"><span>  (switch-to-buffer (<span style="color:#a6e22e">concat</span> (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y-%m-%d&#34;</span>) <span style="color:#e6db74">&#34;.org&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;&lt;f8&gt;&#34;</span>) <span style="color:#e6db74">&#39;dn/copy-idlink-to-clipboard</span>)
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-clock</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(org-clock-persistence-insinuate)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-clock-into-drawer <span style="color:#e6db74">&#34;LOGCLOCK&#34;</span>)
</span></span><span style="display:flex;"><span>(setq org-clock-out-remove-zero-time-clocks <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-clock-out-when-done <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-clock-persist <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-clock-report-include-clocking-task <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-clock-persist-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;org-clock-save.el&#34;</span> dn-cache-directory))
</span></span></code></pre></div><!-- raw HTML omitted -->
<ul>
<li>
<p>switch task from TODO to STARTED</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun bh/is-task-p ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Any task with a todo keyword and no subtask&#34;</span>
</span></span><span style="display:flex;"><span>  (save-restriction
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">widen</span>)
</span></span><span style="display:flex;"><span>    (let ((has-subtask)
</span></span><span style="display:flex;"><span>	  (subtree-end (save-excursion (org-end-of-subtree <span style="color:#66d9ef">t</span>)))
</span></span><span style="display:flex;"><span>	  (is-a-task (<span style="color:#a6e22e">member</span> (<span style="color:#a6e22e">nth</span> <span style="color:#ae81ff">2</span> (org-heading-components)) org-todo-keywords-1)))
</span></span><span style="display:flex;"><span>      (save-excursion
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">forward-line</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	(while (and (not has-subtask)
</span></span><span style="display:flex;"><span>		    (<span style="color:#a6e22e">&lt;</span> (<span style="color:#a6e22e">point</span>) subtree-end)
</span></span><span style="display:flex;"><span>		    (<span style="color:#a6e22e">re-search-forward</span> <span style="color:#e6db74">&#34;^\*+ &#34;</span> subtree-end <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>	  (when (<span style="color:#a6e22e">member</span> (org-get-todo-state) org-todo-keywords-1)
</span></span><span style="display:flex;"><span>	    (setq has-subtask <span style="color:#66d9ef">t</span>))))
</span></span><span style="display:flex;"><span>      (and is-a-task (not has-subtask)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun bh/clock-in-to-next (kw)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Switch a task from TODO to NEXT when clocking in.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Skips capture tasks, projects, and subprojects.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Switch projects and subprojects from NEXT back to TODO&#34;</span>
</span></span><span style="display:flex;"><span>  (when (not (and (<span style="color:#a6e22e">boundp</span> <span style="color:#e6db74">&#39;org-capture-mode</span>) org-capture-mode))
</span></span><span style="display:flex;"><span>    (cond
</span></span><span style="display:flex;"><span>     ((and (<span style="color:#a6e22e">member</span> (org-get-todo-state) (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;TODO&#34;</span>))
</span></span><span style="display:flex;"><span>	   (bh/is-task-p))
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;NEXT&#34;</span>)
</span></span><span style="display:flex;"><span>     ((and (<span style="color:#a6e22e">member</span> (org-get-todo-state) (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;NEXT&#34;</span>))
</span></span><span style="display:flex;"><span>	   (bh/is-project-p))
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;TODO&#34;</span>))))
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-num</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-num-mode</span>)
</span></span></code></pre></div></li>
</ul>
<h4 id="packages-enhance-org">Packages enhance org</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>auto-tangle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;org-auto-tangle-mode</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>org-auto-tangle-mode <span style="color:#e6db74">&#34;org-auto-tangle&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-auto-tangle-mode</span>)
</span></span></code></pre></div><!-- raw HTML omitted -->
<ul>
<li>
<p>toc-org</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;toc-org-mode</span>)
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-superstar</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-superstar-mode</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-download</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-image-dir</span> <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/pic&#34;</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-screenshot-method</span> <span style="color:#e6db74">&#39;screencapture</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-abbreviate-filename-function</span> <span style="color:#e6db74">&#39;expand-file-name</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-timestamp</span> <span style="color:#e6db74">&#34;%Y%m%d%H%M%S&#34;</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-display-inline-images</span> <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-heading-lvl</span> <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-annotate-function</span> (lambda (_link) <span style="color:#e6db74">&#34;&#34;</span>))
</span></span><span style="display:flex;"><span>(customize-set-variable <span style="color:#e6db74">&#39;org-download-image-attr-list</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;#+NAME: &#34;</span> <span style="color:#e6db74">&#34;#+CAPTION: &#34;</span> <span style="color:#e6db74">&#34;#+ATTR_LATEX: :width 10cm :placement [!htpb]&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-download-enable</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(advice-add <span style="color:#e6db74">&#39;org-download-clipboard</span> :after <span style="color:#e6db74">&#39;org-download-rename-last-file</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/replace-org-download-file-path ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (previous-line)
</span></span><span style="display:flex;"><span>  (replace-string <span style="color:#e6db74">&#34;/Users/duanning&#34;</span> <span style="color:#e6db74">&#34;~&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(advice-add <span style="color:#e6db74">&#39;org-download-clipboard</span> :after <span style="color:#e6db74">&#39;my/replace-org-download-file-path</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-auto-tangle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-auto-tangle-mode</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>olivetti</p>
<p>设置 olivetti 的主体宽度，<a href="https://zh-yue.wikipedia.org/wiki/%E9%BB%83%E9%87%91%E6%AF%94%E4%BE%8B">黄金分割率</a>，此分割具有美感。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq olivetti-body-width <span style="color:#ae81ff">0.618</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;olivetti-mode</span>)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;mu4e-main-mode-hook</span> <span style="color:#e6db74">&#39;olivetti-mode</span>)
</span></span></code></pre></div><p>感谢 <a href="https://emacs-china.org/t/emacs/19797/3">patrolli</a> . 一个更强大的是 writeroom 这个包，但是其中有些功能我用不到，有些我自己己配置。</p>
<p>此代码实现的功能是当窗口只有一个 buffer ，或者窗口布局是上下形式的时候，开启该模式，如果存在左右布局，就关闭该模式。有个问题是自己不能手动关闭 Olivetti 模式，暂时就不起用这个了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/olivetti-mode ()
</span></span><span style="display:flex;"><span>  (if (and (<span style="color:#a6e22e">eq</span> (<span style="color:#a6e22e">buffer-local-value</span> <span style="color:#e6db74">&#39;major-mode</span> (<span style="color:#a6e22e">current-buffer</span>)) <span style="color:#e6db74">&#39;org-mode</span>)
</span></span><span style="display:flex;"><span>	   (<span style="color:#a6e22e">&gt;</span> (window-width) (<span style="color:#a6e22e">/</span> (frame-width) <span style="color:#ae81ff">2</span>)))
</span></span><span style="display:flex;"><span>      (olivetti-mode <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    (olivetti-mode <span style="color:#ae81ff">0</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;find-file-hook</span> <span style="color:#e6db74">&#39;my/olivetti-mode</span>)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;window-configuration-change-hook</span> <span style="color:#e6db74">&#39;my/olivetti-mode</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-appear</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;org-appear</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-appear-trigger <span style="color:#e6db74">&#39;manual</span>
</span></span><span style="display:flex;"><span>      org-appear-autolinks <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-appear-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> (lambda ()
</span></span><span style="display:flex;"><span>			   (add-hook <span style="color:#e6db74">&#39;meow-insert-enter-hook</span> <span style="color:#a6e22e">#&#39;</span>org-appear-manual-start <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>			   (add-hook <span style="color:#e6db74">&#39;meow-insert-exit-hook</span> <span style="color:#a6e22e">#&#39;</span>org-appear-manual-stop <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-cliplink</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;org-cliplink</span>)
</span></span></code></pre></div></li>
</ul>
<h4 id="note-taking">Note taking</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-roam</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;org-roam-db-autosync-enable</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>org-roam-db-autosync-enable <span style="color:#e6db74">&#34;org-roam&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(if sys-termuxp
</span></span><span style="display:flex;"><span>    (setq org-roam-database-connector <span style="color:#e6db74">&#39;sqlite3</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;org-roam-db-autosync-enable</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (add-hook &#39;org-roam-mode-hook &#39;turn-on-visual-line-mode)</span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> (lambda ()
</span></span><span style="display:flex;"><span>			   (setq-local time-stamp-active <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>				       time-stamp-start <span style="color:#e6db74">&#34;#\\+MODIFIED:[ \t]*&#34;</span>
</span></span><span style="display:flex;"><span>				       time-stamp-end <span style="color:#e6db74">&#34;$&#34;</span>
</span></span><span style="display:flex;"><span>				       time-stamp-format <span style="color:#e6db74">&#34;\[%Y-%m-%d %3a %H:%M\]&#34;</span>)
</span></span><span style="display:flex;"><span>			   (add-hook <span style="color:#e6db74">&#39;before-save-hook</span> <span style="color:#e6db74">&#39;time-stamp</span> <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#39;local</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org-roam</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; https://jethrokuan.github.io/org-roam-guide/</span>
</span></span><span style="display:flex;"><span>(cl-defmethod org-roam-node-type ((node org-roam-node))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return the TYPE of NODE.&#34;</span>
</span></span><span style="display:flex;"><span>  (condition-case <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">file-name-nondirectory</span>
</span></span><span style="display:flex;"><span>       (<span style="color:#a6e22e">directory-file-name</span>
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">file-name-directory</span>
</span></span><span style="display:flex;"><span>	 (file-relative-name (org-roam-node-file node) org-roam-directory))))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">error</span> <span style="color:#e6db74">&#34;&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; Codes blow are used to general a hierachy for title nodes that under a file</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; https://github.com/nowislewis/nowisemacs/blob/master/init.org</span>
</span></span><span style="display:flex;"><span>(cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return the value of \&#34;#+title:\&#34; (if any) from file that NODE resides in.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If there&#39;s no file-level title in the file, return empty string.&#34;</span>
</span></span><span style="display:flex;"><span>  (or (if (<span style="color:#a6e22e">=</span> (org-roam-node-level node) <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	  (org-roam-node-title node)
</span></span><span style="display:flex;"><span>	(org-roam-get-keyword <span style="color:#e6db74">&#34;TITLE&#34;</span> (org-roam-node-file node)))
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return hierarchy for NODE, constructed of its file title, OLP and direct title.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  If some elements are missing, they will be stripped out.&#34;</span>
</span></span><span style="display:flex;"><span>  (let ((title     (org-roam-node-title node))
</span></span><span style="display:flex;"><span>	(olp       (org-roam-node-olp   node))
</span></span><span style="display:flex;"><span>	(level     (org-roam-node-level node))
</span></span><span style="display:flex;"><span>	(filetitle (org-roam-node-doom-filetitle node))
</span></span><span style="display:flex;"><span>	(separator (<span style="color:#a6e22e">propertize</span> <span style="color:#e6db74">&#34; &gt; &#34;</span> <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;shadow</span>)))
</span></span><span style="display:flex;"><span>    (cl-case level
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; node is a top-level file</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#ae81ff">0</span> filetitle)
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; node is a level 1 heading</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#ae81ff">1</span> (<span style="color:#a6e22e">concat</span> (<span style="color:#a6e22e">propertize</span> filetitle <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">&#39;</span>(shadow italic))
</span></span><span style="display:flex;"><span>		 separator title))
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; node is a heading with an arbitrary outline path</span>
</span></span><span style="display:flex;"><span>      (<span style="color:#66d9ef">t</span> (<span style="color:#a6e22e">concat</span> (<span style="color:#a6e22e">propertize</span> filetitle <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">&#39;</span>(shadow italic))
</span></span><span style="display:flex;"><span>		 separator (<span style="color:#a6e22e">propertize</span> (string-join olp <span style="color:#e6db74">&#34; &gt; &#34;</span>) <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">&#39;</span>(shadow italic))
</span></span><span style="display:flex;"><span>		 separator title)))))
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-roam-db-gc-threshold most-positive-fixnum
</span></span><span style="display:flex;"><span>      org-roam-completion-everywhere <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-roam-directory (file-truename dn-roam)
</span></span><span style="display:flex;"><span>      org-roam-db-location (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;org-roam.db&#34;</span> dn-cache-directory)
</span></span><span style="display:flex;"><span>      org-roam-node-display-template (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;${type:15} ${doom-hierarchy:*} &#34;</span> (<span style="color:#a6e22e">propertize</span> <span style="color:#e6db74">&#34;${tags:20}&#34;</span> <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;org-tag</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-roam-capture-templates <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#e6db74">&#34;articles&#34;</span> plain <span style="color:#e6db74">&#34;%?&#34;</span>
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;articles/${slug}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				   (<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#e6db74">&#34;Books&#34;</span> plain (file <span style="color:#e6db74">&#34;~/.emacs.d/template/readinglog&#34;</span>)
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;books/${slug}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				   (<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#e6db74">&#34;default&#34;</span> plain <span style="color:#e6db74">&#34;%?&#34;</span>
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;main/${slug}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				   (<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#e6db74">&#34;people&#34;</span> plain (file <span style="color:#e6db74">&#34;~/.emacs.d/template/crm&#34;</span>)
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;crm/${slug}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				   (<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#e6db74">&#34;reference&#34;</span> plain (file <span style="color:#e6db74">&#34;~/.emacs.d/template/reference&#34;</span>)
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;ref/${citekey}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				   (<span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#e6db74">&#34;work&#34;</span> plain <span style="color:#e6db74">&#34;%?&#34;</span>
</span></span><span style="display:flex;"><span>				    :target (file+head <span style="color:#e6db74">&#34;work/${slug}.org&#34;</span>
</span></span><span style="display:flex;"><span>						       <span style="color:#e6db74">&#34;#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n&#34;</span>)
</span></span><span style="display:flex;"><span>				    :unnarrowed <span style="color:#66d9ef">t</span>)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>diary</p>
<p>此处的实现来自晨间日记的奇迹的这本书。在当前的日期中显示过去的日记，这样就可以看到过去的今天自己干了什么，这个信息还是挺有用的。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/history-morning-diary-body ()
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">insert</span> (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;** %s-%s\n&#34;</span> (<span style="color:#a6e22e">+</span> i init-year) cur-date))
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">insert</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;#+transclude: [[file:&#34;</span> (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;%s-%s.org&#34;</span> (<span style="color:#a6e22e">+</span> i init-year) cur-date) <span style="color:#e6db74">&#34;::Morning Diary]] :only-contents\n&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/insert-history-morning-diary ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Insert my history diary to today diary, for convenient reflection my past time.&#34;</span>
</span></span><span style="display:flex;"><span>  (let* ((init-year <span style="color:#ae81ff">2022</span>)
</span></span><span style="display:flex;"><span>	 (cur-year (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y&#34;</span>))
</span></span><span style="display:flex;"><span>	 (year-span (<span style="color:#a6e22e">-</span> (<span style="color:#a6e22e">string-to-number</span> (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y&#34;</span>)) init-year))
</span></span><span style="display:flex;"><span>	 (cur-date (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%m-%d&#34;</span>)))
</span></span><span style="display:flex;"><span>    (cond
</span></span><span style="display:flex;"><span>     ((and (org-roam-dailies--daily-note-p) (<span style="color:#a6e22e">=</span> <span style="color:#ae81ff">0</span> year-span))
</span></span><span style="display:flex;"><span>      (progn
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;History Diary&#34;</span>))
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">insert</span> <span style="color:#e6db74">&#34;First Year Of Your Diary! KEEP NOTING EVERYTHING! Best Wishes!\n&#34;</span>)))
</span></span><span style="display:flex;"><span>     ((and (org-roam-dailies--daily-note-p) (<span style="color:#a6e22e">&lt;</span> <span style="color:#ae81ff">0</span> year-span))
</span></span><span style="display:flex;"><span>      (progn
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;History Diary&#34;</span>))
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>	(if (<span style="color:#a6e22e">&lt;</span> year-span <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>	    (dotimes (i year-span)
</span></span><span style="display:flex;"><span>	      (my/history-morning-diary-body))
</span></span><span style="display:flex;"><span>	  (dotimes (i <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>	    (my/history-morning-diary-body))))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-dailies-exclude ()
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>))
</span></span><span style="display:flex;"><span>  (org-set-property <span style="color:#e6db74">&#34;ROAM_EXCLUDE&#34;</span> <span style="color:#e6db74">&#34;t&#34;</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-max</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-morning-diary-body (tpl)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Insert diary content to org-roam-dailies-today according TPL&#34;</span>
</span></span><span style="display:flex;"><span>  (org-roam-dailies-goto-today)
</span></span><span style="display:flex;"><span>  (my/org-roam-dailies-exclude)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">insert</span> <span style="color:#e6db74">&#34;\n* Random Notes\n\n* GTD [/]\n\n* History Diary\n\n* Morning Diary\n\n* Clock Report\n\n&#34;</span>)
</span></span><span style="display:flex;"><span>  (my/insert-history-morning-diary)
</span></span><span style="display:flex;"><span>  (org-transclusion-add-all)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;Clock Report&#34;</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>  (tempel-insert tpl)
</span></span><span style="display:flex;"><span>  (org-clock-report)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;Morning Diary&#34;</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>  (tempel-insert <span style="color:#e6db74">&#39;diary</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/omd-clock-report ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Update omd(org morning diary) clock report&#34;</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;Clock Report&#34;</span>))
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>  (org-ctrl-c-ctrl-c))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-morning-diary ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;If org roam dailies today exist, then go to the file , update clock report and jump to Events
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If org roam dailies today do not exist, the create it.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Weekend and daytime use different templeate to create org-clock-report&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (let* ((date (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%Y-%m-%d&#34;</span>))
</span></span><span style="display:flex;"><span>	 (org-roam-dailies-today (<span style="color:#a6e22e">concat</span> dn-roam <span style="color:#e6db74">&#34;/daily/&#34;</span> date <span style="color:#e6db74">&#34;.org&#34;</span>))
</span></span><span style="display:flex;"><span>	 (weeknum (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%u&#34;</span>)))
</span></span><span style="display:flex;"><span>    (org-roam-dailies-goto-today)
</span></span><span style="display:flex;"><span>    (if (<span style="color:#a6e22e">file-exists-p</span> org-roam-dailies-today)
</span></span><span style="display:flex;"><span>	(progn
</span></span><span style="display:flex;"><span>	  (my/omd-clock-report)
</span></span><span style="display:flex;"><span>	  (<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;Random Notes&#34;</span>)))
</span></span><span style="display:flex;"><span>      (cond ((<span style="color:#a6e22e">equal</span> weeknum <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>	     (my/org-roam-morning-diary-body <span style="color:#e6db74">&#39;weekend</span>))
</span></span><span style="display:flex;"><span>	    ((not (<span style="color:#a6e22e">equal</span> weeknum <span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>	     (my/org-roam-morning-diary-body <span style="color:#e6db74">&#39;clockday</span>))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;&lt;f6&gt;&#34;</span>) <span style="color:#e6db74">&#39;my/org-roam-morning-diary</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-roam-ui</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-roam-ui-sync-theme <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-roam-ui-follow <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-roam-ui-update-on-save <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq org-roam-ui-open-on-start <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org-roam-ui</span>
</span></span><span style="display:flex;"><span>  (require <span style="color:#e6db74">&#39;websocket</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-roam buffer</p>
<p>当当前打开的文件是 org-roam 文件时，自动打开 org-roam-buffer 。总是打开 org-roam-buffer 不太实用，并不是总是需要看这个 buffer 。得思考何时才需要使用，或者手动切换更合适。
<a href="https://github.com/org-roam/org-roam/issues/507">https://github.com/org-roam/org-roam/issues/507</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun tim/org-roam-buffer-show (_)
</span></span><span style="display:flex;"><span>  (if (and
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">;; don&#39;t do anything if we&#39;re in the minibuffer</span>
</span></span><span style="display:flex;"><span>       (not (<span style="color:#a6e22e">minibufferp</span>))
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">;; show org-roam buffer if the current buffer has a org-roam file</span>
</span></span><span style="display:flex;"><span>       (xor (org-roam-file-p) (<span style="color:#a6e22e">eq</span> <span style="color:#e6db74">&#39;visible</span> (org-roam-buffer--visibility))))
</span></span><span style="display:flex;"><span>      (org-roam-buffer-toggle)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;window-buffer-change-functions</span> <span style="color:#e6db74">&#39;tim/org-roam-buffer-show</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>search org-roam-node with rg</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun bms/org-roam-rg-search ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Search org-roam directory using consult-ripgrep. With live-preview.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (let ((consult-ripgrep-command
</span></span><span style="display:flex;"><span>	 <span style="color:#e6db74">&#34;rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS&#34;</span>))
</span></span><span style="display:flex;"><span>    (consult-ripgrep org-roam-directory)))
</span></span></code></pre></div></li>
</ul>
<h4 id="bibtex-manage">Bibtex manage</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>bibtex</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq bibtex-autokey-year-length <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-name-year-separator <span style="color:#e6db74">&#34;-&#34;</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-year-title-separator <span style="color:#e6db74">&#34;-&#34;</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-titleword-separator <span style="color:#e6db74">&#34;-&#34;</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-titlewords <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-titlewords-stretch <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>(setq bibtex-autokey-titleword-length <span style="color:#ae81ff">5</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>bibtex-completion</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq bibtex-completion-library-path <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf&#34;</span>
</span></span><span style="display:flex;"><span>      bibtex-completion-bibliography <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib&#34;</span>
</span></span><span style="display:flex;"><span>				       <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/Book.bib&#34;</span>)
</span></span><span style="display:flex;"><span>      bibtex-completion-notes-path <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/ref&#34;</span>
</span></span><span style="display:flex;"><span>      bibtex-completion-additional-search-fields <span style="color:#f92672">&#39;</span>(keywords journal booktitle)
</span></span><span style="display:flex;"><span>      bibtex-completion-pdf-symbol <span style="color:#e6db74">&#34;P&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; bibtex-completion-pdf-symbol (all-the-icons-octicon &#34;file-pdf&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							  :height 1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							  :v-adjust -0.05</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							  :face &#39;font-lock-doc-face)</span>
</span></span><span style="display:flex;"><span>      bibtex-completion-notes-symbol <span style="color:#e6db74">&#34;N&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; bibtex-completion-notes-symbol (all-the-icons-octicon &#34;file-text&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							    :height 1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							    :v-adjust -0.05</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">;; 							    :face &#39;font-lock-doc-face)</span>
</span></span><span style="display:flex;"><span>      bibtex-completion-display-formats <span style="color:#f92672">&#39;</span>((article <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}&#34;</span>)
</span></span><span style="display:flex;"><span>					  (inbook <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}&#34;</span>)
</span></span><span style="display:flex;"><span>					  (incollection <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}&#34;</span>)
</span></span><span style="display:flex;"><span>					  (inproceedings <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}&#34;</span>)
</span></span><span style="display:flex;"><span>					  (<span style="color:#66d9ef">t</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}&#34;</span>)))
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq bibtex-completion-pdf-symbol (all-the-icons-octicon &#34;file-pdf&#34;))</span>
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>ebib</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;ebib</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>ebib <span style="color:#e6db74">&#34;ebib&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq ebib-preload-bib-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib&#34;</span>
</span></span><span style="display:flex;"><span>				 <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/Book.bib&#34;</span>))
</span></span><span style="display:flex;"><span>(setq ebib-file-search-dirs <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf&#34;</span>))
</span></span><span style="display:flex;"><span>(setq ebib-keywords (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;ref/keywords.txt&#34;</span> dn-roam))
</span></span><span style="display:flex;"><span>(setq ebib-notes-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;ref&#34;</span> dn-roam))
</span></span><span style="display:flex;"><span>(setq ebib-filters-default-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;ref/ebib-filters&#34;</span> dn-roam))
</span></span><span style="display:flex;"><span>(setq ebib-reading-list-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;ref/reading_list.org&#34;</span> dn-roam))
</span></span><span style="display:flex;"><span>(setq ebib-keywords-field-keep-sorted <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq ebib-keywords-file-save-on-exit <span style="color:#e6db74">&#39;always</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (setq ebib-index-columns &#39;((&#34;Entry Key&#34; 30 t) (&#34;Note&#34; 1 nil) (&#34;Year&#34; 6 t) (&#34;Author/Editor&#34; 30 nil) (&#34;Title&#34; 50 t)))</span>
</span></span><span style="display:flex;"><span>(setq ebib-index-columns <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;Entry Key&#34;</span> <span style="color:#ae81ff">30</span> <span style="color:#66d9ef">t</span>) (<span style="color:#e6db74">&#34;Note&#34;</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">nil</span>) (<span style="color:#e6db74">&#34;Title&#34;</span> <span style="color:#ae81ff">50</span> <span style="color:#66d9ef">t</span>)))
</span></span><span style="display:flex;"><span>(setq ebib-file-associations <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;ps&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;gv&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;&lt;f2&gt;&#34;</span>) <span style="color:#e6db74">&#39;ebib</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>import bib to ebib from zotero</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/ebib-import-from-zotero ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Import entry from zotero to ebib.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (ebib)
</span></span><span style="display:flex;"><span>  (find-file <span style="color:#e6db74">&#34;~/Documents/zotero.bib&#34;</span>)
</span></span><span style="display:flex;"><span>  (ebib-import-entries)
</span></span><span style="display:flex;"><span>  (quit-window-delete)
</span></span><span style="display:flex;"><span>  (ebib-quit-entry-buffer))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>oc-csl</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(if (version&lt; <span style="color:#e6db74">&#34;9.5&#34;</span> org-version)
</span></span><span style="display:flex;"><span>    (progn
</span></span><span style="display:flex;"><span>      (require <span style="color:#e6db74">&#39;oc-csl</span>)
</span></span><span style="display:flex;"><span>      (setq org-cite-global-bibliography <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/References.bib&#34;</span>
</span></span><span style="display:flex;"><span>					   <span style="color:#e6db74">&#34;/Users/duanning/Nextcloud/L.Personal.Galaxy/roam/Book.bib&#34;</span>))
</span></span><span style="display:flex;"><span>      (setq org-cite-insert-processor <span style="color:#e6db74">&#39;citar</span>
</span></span><span style="display:flex;"><span>	    org-cite-follow-processor <span style="color:#e6db74">&#39;citar</span>
</span></span><span style="display:flex;"><span>	    org-cite-activate-processor <span style="color:#e6db74">&#39;citar</span>)))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>citar</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq citar-bibliography <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/References.bib&#34;</span>
</span></span><span style="display:flex;"><span>      citar-templates <span style="color:#f92672">&#39;</span>((main <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${author editor:30} ${date year issued:4} ${title:48}&#34;</span>)
</span></span><span style="display:flex;"><span>			  (suffix <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${=key= id:15} ${=type=:12} ${tags keywords:*}&#34;</span>)
</span></span><span style="display:flex;"><span>			  (preview <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n&#34;</span>)
</span></span><span style="display:flex;"><span>			  (note <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;#+title: Notes on ${author editor}, ${title}&#34;</span>))
</span></span><span style="display:flex;"><span>      citar-at-point-function <span style="color:#e6db74">&#39;embark-act</span>
</span></span><span style="display:flex;"><span>      citar-open-note-function <span style="color:#e6db74">&#39;orb-citar-edit-note</span>
</span></span><span style="display:flex;"><span>      citar-notes-paths <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/ref&#34;</span>)
</span></span><span style="display:flex;"><span>      citar-library-paths <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/storage/pdf&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq citar-symbols
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">`</span>((file <span style="color:#f92672">,</span>(all-the-icons-faicon <span style="color:#e6db74">&#34;file-o&#34;</span> :face <span style="color:#e6db74">&#39;all-the-icons-green</span> :v-adjust <span style="color:#ae81ff">-0.1</span>) <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	(note <span style="color:#f92672">,</span>(all-the-icons-material <span style="color:#e6db74">&#34;speaker_notes&#34;</span> :face <span style="color:#e6db74">&#39;all-the-icons-blue</span> :v-adjust <span style="color:#ae81ff">-0.3</span>) <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	(link <span style="color:#f92672">,</span>(all-the-icons-octicon <span style="color:#e6db74">&#34;link&#34;</span> :face <span style="color:#e6db74">&#39;all-the-icons-orange</span> :v-adjust <span style="color:#ae81ff">0.01</span>) <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; &#34;</span>)))
</span></span><span style="display:flex;"><span>(setq citar-symbol-separator <span style="color:#e6db74">&#34;  &#34;</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>consult-bibtex</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;consult-bibtex</span>)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-roam-bibtex</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq orb-note-actions-interface <span style="color:#e6db74">&#39;default</span>
</span></span><span style="display:flex;"><span>      orb-roam-ref-format <span style="color:#e6db74">&#39;org-cite</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(org-roam-bibtex-mode)
</span></span></code></pre></div></li>
</ul>
<h4 id="tasks-manage">Tasks manage</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Enhance function</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-gtd</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;org-edna-mode</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>org-edna-mode <span style="color:#e6db74">&#34;org-gtd&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;org-gtd</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-edna-use-inheritance <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-gtd-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;todos&#34;</span> dn-galaxy))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#a6e22e">#&#39;</span>org-edna-mode)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org-gtd</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> org-gtd-process-map (kbd <span style="color:#e6db74">&#34;C-c C-c&#34;</span>) <span style="color:#e6db74">&#39;org-gtd-choose</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-agenda</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-agenda-finalize-hook</span> <span style="color:#a6e22e">#&#39;</span>org-agenda-find-same-or-today-or-agenda <span style="color:#ae81ff">90</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-agenda-hide-tags-regexp (regexp-opt <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;project&#34;</span>))) <span style="color:#75715e">;; hide project tag</span>
</span></span><span style="display:flex;"><span>(setq org-agenda-files <span style="color:#f92672">`</span>(<span style="color:#f92672">,</span>org-gtd-directory))
</span></span><span style="display:flex;"><span>(setq org-agenda-prefix-format <span style="color:#f92672">&#39;</span>((agenda <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; %i %?-12t% s&#34;</span>)
</span></span><span style="display:flex;"><span>				 (todo   <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; %i&#34;</span>)
</span></span><span style="display:flex;"><span>				 (tags   <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; %i %-12:c&#34;</span>)
</span></span><span style="display:flex;"><span>				 (search <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34; %i %-12:c&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-agenda-tags-todo-honor-ignore-options <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-agenda-start-on-weekday <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      org-agenda-dim-blocked-tasks <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      org-agenda-compact-blocks <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-agenda-to-appt <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-agenda ()
</span></span><span style="display:flex;"><span>    (interactive)
</span></span><span style="display:flex;"><span>    (org-agenda <span style="color:#66d9ef">nil</span> <span style="color:#e6db74">&#34; &#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> org-mode-map (kbd <span style="color:#e6db74">&#34;C-,&#34;</span>) <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> org-mode-map (kbd <span style="color:#e6db74">&#34;C-&#39;&#34;</span>) <span style="color:#66d9ef">nil</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Dynamic agenda</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span><span style="color:#75715e">;; https://magnus.therning.org/2021-07-23-keeping-todo-items-in-org-roam-v2.html</span>
</span></span><span style="display:flex;"><span>(defun vulpea-project-p ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return non-nil if current buffer has any todo entry.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">TODO entries marked as done are ignored, meaning the this
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">function returns nil if current buffer contains only completed
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">tasks.&#34;</span>
</span></span><span style="display:flex;"><span>  (seq-find                                 <span style="color:#75715e">; (3)</span>
</span></span><span style="display:flex;"><span>   (lambda (type)
</span></span><span style="display:flex;"><span>     (or (<span style="color:#a6e22e">eq</span> type <span style="color:#e6db74">&#39;todo</span>)
</span></span><span style="display:flex;"><span>	 (<span style="color:#a6e22e">eq</span> type <span style="color:#e6db74">&#39;done</span>)))
</span></span><span style="display:flex;"><span>   (org-element-map                         <span style="color:#75715e">; (2)</span>
</span></span><span style="display:flex;"><span>       (org-element-parse-buffer <span style="color:#e6db74">&#39;headline</span>) <span style="color:#75715e">; (1)</span>
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#39;headline</span>
</span></span><span style="display:flex;"><span>     (lambda (h)
</span></span><span style="display:flex;"><span>       (org-element-property :todo-type h)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-project-update-tag ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Update PROJECT tag in the current buffer.&#34;</span>
</span></span><span style="display:flex;"><span>  (when (and (not (<span style="color:#a6e22e">active-minibuffer-window</span>))
</span></span><span style="display:flex;"><span>	     (vulpea-buffer-p))
</span></span><span style="display:flex;"><span>    (save-excursion
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>))
</span></span><span style="display:flex;"><span>      (let* ((tags (vulpea-buffer-tags-get))
</span></span><span style="display:flex;"><span>	     (original-tags tags))
</span></span><span style="display:flex;"><span>	(if (vulpea-project-p)
</span></span><span style="display:flex;"><span>	    (setq tags (<span style="color:#a6e22e">cons</span> <span style="color:#e6db74">&#34;project&#34;</span> tags))
</span></span><span style="display:flex;"><span>	  (setq tags (remove <span style="color:#e6db74">&#34;project&#34;</span> tags)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">;; cleanup duplicates</span>
</span></span><span style="display:flex;"><span>	(setq tags (seq-uniq tags))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">;; update tags if changed</span>
</span></span><span style="display:flex;"><span>	(when (or (seq-difference tags original-tags)
</span></span><span style="display:flex;"><span>		  (seq-difference original-tags tags))
</span></span><span style="display:flex;"><span>	  (<span style="color:#a6e22e">apply</span> <span style="color:#a6e22e">#&#39;</span>vulpea-buffer-tags-set tags))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-p ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return non-nil if the currently visited buffer is a note.&#34;</span>
</span></span><span style="display:flex;"><span>  (and <span style="color:#a6e22e">buffer-file-name</span>
</span></span><span style="display:flex;"><span>       (string-prefix-p
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">expand-file-name</span> (<span style="color:#a6e22e">file-name-as-directory</span> org-roam-directory))
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">file-name-directory</span> <span style="color:#a6e22e">buffer-file-name</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (defun vulpea-project-files ()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;     &#34;Return a list of note files containing &#39;project&#39; tag.&#34; ;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;     (seq-uniq</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;      (seq-map</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;       #&#39;car</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;       (org-roam-db-query</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;        [:select [nodes:file]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;         :from tags</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;         :left-join nodes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;         :on (= tags:node-id nodes:id)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;         :where (like tag (quote &#34;%\&#34;project\&#34;%&#34;))]))))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (defun vulpea-agenda-files-update (&amp;rest _)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;   &#34;Update the value of `org-agenda-files&#39;.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;   (setq org-agenda-files (vulpea-project-files)))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; functions borrowed from `vulpea&#39; library</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; https://github.com/d12frosted/vulpea/blob/6a735c34f1f64e1f70da77989e9ce8da7864e5ff/vulpea-buffer.el</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-tags-get ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Return filetags value in current buffer.&#34;</span>
</span></span><span style="display:flex;"><span>  (vulpea-buffer-prop-get-list <span style="color:#e6db74">&#34;filetags&#34;</span> <span style="color:#e6db74">&#34;[ :]&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-tags-set (<span style="color:#66d9ef">&amp;rest</span> tags)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Set TAGS in current buffer.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If filetags value is already set, replace it.&#34;</span>
</span></span><span style="display:flex;"><span>  (if tags
</span></span><span style="display:flex;"><span>      (vulpea-buffer-prop-set
</span></span><span style="display:flex;"><span>       <span style="color:#e6db74">&#34;filetags&#34;</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;:&#34;</span> (string-join tags <span style="color:#e6db74">&#34;:&#34;</span>) <span style="color:#e6db74">&#34;:&#34;</span>))
</span></span><span style="display:flex;"><span>    (vulpea-buffer-prop-remove <span style="color:#e6db74">&#34;filetags&#34;</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-tags-add (tag)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Add a TAG to filetags in current buffer.&#34;</span>
</span></span><span style="display:flex;"><span>  (let* ((tags (vulpea-buffer-tags-get))
</span></span><span style="display:flex;"><span>	 (tags (<span style="color:#a6e22e">append</span> tags (<span style="color:#a6e22e">list</span> tag))))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">apply</span> <span style="color:#a6e22e">#&#39;</span>vulpea-buffer-tags-set tags)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-tags-remove (tag)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Remove a TAG from filetags in current buffer.&#34;</span>
</span></span><span style="display:flex;"><span>  (let* ((tags (vulpea-buffer-tags-get))
</span></span><span style="display:flex;"><span>	 (tags (<span style="color:#a6e22e">delete</span> tag tags)))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">apply</span> <span style="color:#a6e22e">#&#39;</span>vulpea-buffer-tags-set tags)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-prop-set (name value)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Set a file property called NAME to VALUE in buffer file.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If the property is already set, replace its value.&#34;</span>
</span></span><span style="display:flex;"><span>  (setq name (<span style="color:#a6e22e">downcase</span> name))
</span></span><span style="display:flex;"><span>  (org-with-point-at <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    (let ((case-fold-search <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>      (if (<span style="color:#a6e22e">re-search-forward</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;^#\\+&#34;</span> name <span style="color:#e6db74">&#34;:\\(.*\\)&#34;</span>)
</span></span><span style="display:flex;"><span>			     (<span style="color:#a6e22e">point-max</span>) <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>	  (<span style="color:#a6e22e">replace-match</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;#+&#34;</span> name <span style="color:#e6db74">&#34;: &#34;</span> value) <span style="color:#e6db74">&#39;fixedcase</span>)
</span></span><span style="display:flex;"><span>	(while (and (not (<span style="color:#a6e22e">eobp</span>))
</span></span><span style="display:flex;"><span>		    (<span style="color:#a6e22e">looking-at</span> <span style="color:#e6db74">&#34;^[#:]&#34;</span>))
</span></span><span style="display:flex;"><span>	  (if (save-excursion (<span style="color:#a6e22e">end-of-line</span>) (<span style="color:#a6e22e">eobp</span>))
</span></span><span style="display:flex;"><span>	      (progn
</span></span><span style="display:flex;"><span>		(<span style="color:#a6e22e">end-of-line</span>)
</span></span><span style="display:flex;"><span>		(<span style="color:#a6e22e">insert</span> <span style="color:#e6db74">&#34;\n&#34;</span>))
</span></span><span style="display:flex;"><span>	    (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>	    (<span style="color:#a6e22e">beginning-of-line</span>)))
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">insert</span> <span style="color:#e6db74">&#34;#+&#34;</span> name <span style="color:#e6db74">&#34;: &#34;</span> value <span style="color:#e6db74">&#34;\n&#34;</span>)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-prop-set-list (name values <span style="color:#66d9ef">&amp;optional</span> separators)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Set a file property called NAME to VALUES in current buffer.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">VALUES are quoted and combined into single string using
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"></span><span style="color:#e6db74">`combine-and-quote-strings&#39;</span><span style="color:#e6db74">.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If SEPARATORS is non-nil, it should be a regular expression
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">matching text that separates, but is not part of, the substrings.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If nil it defaults to </span><span style="color:#e6db74">`split-string-default-separators&#39;</span><span style="color:#e6db74">, normally
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">\&#34;[ \f\t\n\r\v]+\&#34;, and OMIT-NULLS is forced to t.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If the property is already set, replace its value.&#34;</span>
</span></span><span style="display:flex;"><span>  (vulpea-buffer-prop-set
</span></span><span style="display:flex;"><span>   name (combine-and-quote-strings values separators)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-prop-get (name)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Get a buffer property called NAME as a string.&#34;</span>
</span></span><span style="display:flex;"><span>  (org-with-point-at <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    (when (<span style="color:#a6e22e">re-search-forward</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;^#\\+&#34;</span> name <span style="color:#e6db74">&#34;: \\(.*\\)&#34;</span>)
</span></span><span style="display:flex;"><span>			     (<span style="color:#a6e22e">point-max</span>) <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">buffer-substring-no-properties</span>
</span></span><span style="display:flex;"><span>       (<span style="color:#a6e22e">match-beginning</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>       (<span style="color:#a6e22e">match-end</span> <span style="color:#ae81ff">1</span>)))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-prop-get-list (name <span style="color:#66d9ef">&amp;optional</span> separators)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Get a buffer property NAME as a list using SEPARATORS.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If SEPARATORS is non-nil, it should be a regular expression
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">matching text that separates, but is not part of, the substrings.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">If nil it defaults to </span><span style="color:#e6db74">`split-string-default-separators&#39;</span><span style="color:#e6db74">, normally
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">\&#34;[ \f\t\n\r\v]+\&#34;, and OMIT-NULLS is forced to t.&#34;</span>
</span></span><span style="display:flex;"><span>  (let ((value (vulpea-buffer-prop-get name)))
</span></span><span style="display:flex;"><span>    (when (and value (not (string-empty-p value)))
</span></span><span style="display:flex;"><span>      (split-string-and-unquote value separators))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun vulpea-buffer-prop-remove (name)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Remove a buffer property called NAME.&#34;</span>
</span></span><span style="display:flex;"><span>  (org-with-point-at <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    (when (<span style="color:#a6e22e">re-search-forward</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;\\(^#\\+&#34;</span> name <span style="color:#e6db74">&#34;:.*\n?\\)&#34;</span>)
</span></span><span style="display:flex;"><span>			     (<span style="color:#a6e22e">point-max</span>) <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>      (<span style="color:#a6e22e">replace-match</span> <span style="color:#e6db74">&#34;&#34;</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/</span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-filter-by-tag (tag-name)
</span></span><span style="display:flex;"><span>  (lambda (node)
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">member</span> tag-name (org-roam-node-tags node))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-list-notes-by-tag (tag-name)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">mapcar</span> <span style="color:#a6e22e">#&#39;</span>org-roam-node-file
</span></span><span style="display:flex;"><span>	  (seq-filter
</span></span><span style="display:flex;"><span>	   (my/org-roam-filter-by-tag tag-name)
</span></span><span style="display:flex;"><span>	   (org-roam-node-list))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/org-roam-refresh-agenda-list ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (dolist (project-file (my/org-roam-list-notes-by-tag <span style="color:#e6db74">&#34;project&#34;</span>))
</span></span><span style="display:flex;"><span>    (add-to-list <span style="color:#e6db74">&#39;org-agenda-files</span> project-file)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;find-file-hook</span> <span style="color:#a6e22e">#&#39;</span>vulpea-project-update-tag)
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;before-save-hook</span> <span style="color:#a6e22e">#&#39;</span>vulpea-project-update-tag)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (add-hook &#39;org-agenda-mode-hook #&#39;my/org-roam-refresh-agenda-list)</span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>my/org-roam-refresh-agenda-list)
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>Org agenda view</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-agenda-custom-commands
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34; &#34;</span> <span style="color:#e6db74">&#34;Agendas&#34;</span>
</span></span><span style="display:flex;"><span>	 ((agenda <span style="color:#e6db74">&#34;&#34;</span> ((org-agenda-span <span style="color:#e6db74">&#39;day</span>)
</span></span><span style="display:flex;"><span>		      (org-super-agenda-groups
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;Today with specific time&#34;</span>
</span></span><span style="display:flex;"><span>				:time-grid <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Habit and Daily Review: DO IT EVERYDAY&#34;</span>
</span></span><span style="display:flex;"><span>				:and (:scheduled <span style="color:#66d9ef">t</span> :tag (<span style="color:#e6db74">&#34;Habit&#34;</span> <span style="color:#e6db74">&#34;Review&#34;</span>) :todo <span style="color:#e6db74">&#34;NEXT&#34;</span>)
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Life and Family: WITH SCHEDULED TODAY&#34;</span>
</span></span><span style="display:flex;"><span>				:and (:tag (<span style="color:#e6db74">&#34;Family&#34;</span> <span style="color:#e6db74">&#34;Son&#34;</span> <span style="color:#e6db74">&#34;Daughter&#34;</span> <span style="color:#e6db74">&#34;Wife&#34;</span> <span style="color:#e6db74">&#34;Parents&#34;</span> <span style="color:#e6db74">&#34;Life&#34;</span> <span style="color:#e6db74">&#34;Memorial&#34;</span> <span style="color:#e6db74">&#34;Insurance&#34;</span>) :scheduled today)
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Finance&#34;</span>
</span></span><span style="display:flex;"><span>				:and (:tag (<span style="color:#e6db74">&#34;Finance&#34;</span>) :scheduled today))
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Due Today&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline today
</span></span><span style="display:flex;"><span>				:face (:foreground <span style="color:#e6db74">&#34;Red&#34;</span> :underline <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Due Soon&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline future
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Overdue&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline past
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>			 (:discard (:tag (<span style="color:#e6db74">&#34;Review&#34;</span>)))))))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>		    (org-super-agenda-groups
</span></span><span style="display:flex;"><span>		     <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;Projects lists&#34;</span>
</span></span><span style="display:flex;"><span>			      :children <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Next List: DO IT ASAP.&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:todo <span style="color:#e6db74">&#34;NEXT&#34;</span> :scheduled <span style="color:#66d9ef">nil</span> :deadline <span style="color:#66d9ef">nil</span> :not (:tag (<span style="color:#e6db74">&#34;Review&#34;</span> <span style="color:#e6db74">&#34;FunTime&#34;</span> <span style="color:#e6db74">&#34;Reading&#34;</span>))))
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Life and Family: WITHOUT SCHEDULED&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Family&#34;</span> <span style="color:#e6db74">&#34;Son&#34;</span> <span style="color:#e6db74">&#34;Daughter&#34;</span> <span style="color:#e6db74">&#34;Wife&#34;</span> <span style="color:#e6db74">&#34;Parents&#34;</span> <span style="color:#e6db74">&#34;Life&#34;</span> <span style="color:#e6db74">&#34;Memorial&#34;</span>) :scheduled <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Work&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Work&#34;</span>) :scheduled <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Reading lists&#34;</span>
</span></span><span style="display:flex;"><span>			      :tag <span style="color:#e6db74">&#34;Reading&#34;</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Fun time&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;FunTime&#34;</span>) :scheduled <span style="color:#66d9ef">nil</span>)) <span style="color:#75715e">;; 此为 funtime ，无 scheduled ，因为有 scheduled ，当时间到的时该应该显示在 schedule 中。</span>
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;COMPUTER SCIENCE&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Emacs&#34;</span> <span style="color:#e6db74">&#34;Arch&#34;</span> <span style="color:#e6db74">&#34;Linux&#34;</span> <span style="color:#e6db74">&#34;Ubuntu&#34;</span> <span style="color:#e6db74">&#34;Windows&#34;</span> <span style="color:#e6db74">&#34;Computer&#34;</span>))
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">80</span>)
</span></span><span style="display:flex;"><span>		       (:discard (:scheduled <span style="color:#66d9ef">t</span> :deadline <span style="color:#66d9ef">t</span>))))))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;SOMEDAY&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;==============MAYBE FUTURE==============&#34;</span>)))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;WAIT&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;CNCL&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;org-super-agenda-mode</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (org-super-agenda-mode)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-agenda-custom-commands
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34; &#34;</span> <span style="color:#e6db74">&#34;Agendas&#34;</span>
</span></span><span style="display:flex;"><span>	 ((agenda <span style="color:#e6db74">&#34;&#34;</span> ((org-agenda-span <span style="color:#e6db74">&#39;day</span>)
</span></span><span style="display:flex;"><span>		      (org-super-agenda-groups
</span></span><span style="display:flex;"><span>		       <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;Scheduled earlier&#34;</span>
</span></span><span style="display:flex;"><span>				:scheduled past)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Today&#34;</span>
</span></span><span style="display:flex;"><span>				:and (:scheduled today :not (:tag (<span style="color:#e6db74">&#34;Family&#34;</span> <span style="color:#e6db74">&#34;Reading&#34;</span>))))
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Due Today&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline today
</span></span><span style="display:flex;"><span>				:face (:foreground <span style="color:#e6db74">&#34;Red&#34;</span> :underline <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Due Soon&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline future
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>			 (:name <span style="color:#e6db74">&#34;Overdue&#34;</span>
</span></span><span style="display:flex;"><span>				:deadline past
</span></span><span style="display:flex;"><span>				:order <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>			 (:discard (:anything <span style="color:#66d9ef">t</span>))))))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>		    (org-super-agenda-groups
</span></span><span style="display:flex;"><span>		     <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;Next List: DO IT ASAP.&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:todo <span style="color:#e6db74">&#34;NEXT&#34;</span> :scheduled <span style="color:#66d9ef">nil</span> :deadline <span style="color:#66d9ef">nil</span> :not (:tag (<span style="color:#e6db74">&#34;Review&#34;</span> <span style="color:#e6db74">&#34;FunTime&#34;</span> <span style="color:#e6db74">&#34;Reading&#34;</span>))))
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Family&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Family&#34;</span> <span style="color:#e6db74">&#34;Life&#34;</span> <span style="color:#e6db74">&#34;Memorial&#34;</span> <span style="color:#e6db74">&#34;Insurance&#34;</span>) :scheduled today))
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Projects lists&#34;</span>
</span></span><span style="display:flex;"><span>			      :children <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>		       (:habit <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Work&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Work&#34;</span>) :scheduled <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Reading lists&#34;</span>
</span></span><span style="display:flex;"><span>			      :tag <span style="color:#e6db74">&#34;Reading&#34;</span>)
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;Fun time&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;FunTime&#34;</span>) :scheduled <span style="color:#66d9ef">nil</span>))
</span></span><span style="display:flex;"><span>		       (:name <span style="color:#e6db74">&#34;COMPUTER SCIENCE&#34;</span>
</span></span><span style="display:flex;"><span>			      :and (:tag (<span style="color:#e6db74">&#34;Emacs&#34;</span> <span style="color:#e6db74">&#34;Arch&#34;</span> <span style="color:#e6db74">&#34;Linux&#34;</span> <span style="color:#e6db74">&#34;Ubuntu&#34;</span> <span style="color:#e6db74">&#34;Windows&#34;</span> <span style="color:#e6db74">&#34;Computer&#34;</span>))
</span></span><span style="display:flex;"><span>			      :order <span style="color:#ae81ff">80</span>)
</span></span><span style="display:flex;"><span>		       (:discard (:scheduled <span style="color:#66d9ef">t</span> :deadline <span style="color:#66d9ef">t</span>))))))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;SOMEDAY&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;==============MAYBE FUTURE==============&#34;</span>)))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;WAIT&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)))
</span></span><span style="display:flex;"><span>	  (todo <span style="color:#e6db74">&#34;CNCL&#34;</span> ((org-agenda-overriding-header <span style="color:#e6db74">&#34;&#34;</span>)))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;org-super-agenda-mode</span>)
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;org-super-agenda</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> org-super-agenda-header-map (kbd <span style="color:#e6db74">&#34;j&#34;</span>) <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> org-super-agenda-header-map (kbd <span style="color:#e6db74">&#34;k&#34;</span>) <span style="color:#66d9ef">nil</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>org-caldav</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;org-caldav</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-caldav-calendar-id <span style="color:#e6db74">&#34;gtd&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-caldav-inbox <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/todos/inbox.org&#34;</span>
</span></span><span style="display:flex;"><span>      org-caldav-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/todos/org-gtd-tasks.org&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-caldav-select-tags <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;gtd&#34;</span>))
</span></span><span style="display:flex;"><span>(setq org-caldav-exclude-tags <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;nogtd&#34;</span>))
</span></span><span style="display:flex;"><span>(setq org-icalendar-timezone <span style="color:#e6db74">&#34;Asia/Shanghai&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-icalendar-include-todo <span style="color:#e6db74">&#39;all</span>)
</span></span><span style="display:flex;"><span>(setq org-caldav-todo-percent-states <span style="color:#f92672">&#39;</span>((<span style="color:#ae81ff">0</span> <span style="color:#e6db74">&#34;SOMEDAY&#34;</span>)
</span></span><span style="display:flex;"><span>				       (<span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;TODO&#34;</span>)
</span></span><span style="display:flex;"><span>				       (<span style="color:#ae81ff">2</span> <span style="color:#e6db74">&#34;NEXT&#34;</span>)
</span></span><span style="display:flex;"><span>				       (<span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;WAIT&#34;</span>)
</span></span><span style="display:flex;"><span>				       (<span style="color:#ae81ff">100</span> <span style="color:#e6db74">&#34;DONE&#34;</span>)))
</span></span><span style="display:flex;"><span>(setq org-caldav-sync-todo <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><p>动态的更新 <code>org-caldav-files</code> ，和  <code>org-agenda-files</code>  一样。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/org-caldav-refresh-list ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (dolist (project-file (my/org-roam-list-notes-by-tag <span style="color:#e6db74">&#34;project&#34;</span>))
</span></span><span style="display:flex;"><span>    (add-to-list <span style="color:#e6db74">&#39;org-caldav-files</span> project-file)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>my/org-caldav-refresh-list)
</span></span></code></pre></div><p>只当8点到23点之间，自动与服务器同步。当 Emacs 闲置 5 分钟时进行同步，以免卡 Emacs 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/org-caldav-sync ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (org-caldav-sync)
</span></span><span style="display:flex;"><span>  (quit-window-delete))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (defun my/org-caldav-sync-start ()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;   (interactive)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;   (let* ((current-time (string-to-number (format-time-string &#34;%H&#34;)))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; 	 (morning-time 8)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; 	 (evening-time 23))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;;     (if (and (&lt; morning-time current-time)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; 	     (&lt; current-time evening-time))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; 	(run-with-idle-timer 10 t #&#39;my/org-caldav-sync)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; 	(my/org-caldav-sync))))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(let* ((<span style="color:#a6e22e">current-time</span> (<span style="color:#a6e22e">string-to-number</span> (<span style="color:#a6e22e">format-time-string</span> <span style="color:#e6db74">&#34;%H&#34;</span>)))
</span></span><span style="display:flex;"><span>       (morning-time <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>       (evening-time <span style="color:#ae81ff">23</span>))
</span></span><span style="display:flex;"><span>  (if (and (<span style="color:#a6e22e">&lt;</span> morning-time <span style="color:#a6e22e">current-time</span>)
</span></span><span style="display:flex;"><span>	   (<span style="color:#a6e22e">&lt;</span> <span style="color:#a6e22e">current-time</span> evening-time))
</span></span><span style="display:flex;"><span>      (run-with-idle-timer <span style="color:#ae81ff">60</span> <span style="color:#66d9ef">t</span> <span style="color:#a6e22e">#&#39;</span>my/org-caldav-sync)))
</span></span></code></pre></div></li>
</ul>
<h4 id="org-export">Org Export</h4>
<!-- raw HTML omitted -->
<ul>
<li>
<p>ox-hugo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;ox</span>
</span></span><span style="display:flex;"><span>  (require <span style="color:#e6db74">&#39;ox-hugo</span>))
</span></span></code></pre></div></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>export org to docx with pandoc</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun org-export-docx ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Convert org to docx.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (let ((docx-file (<span style="color:#a6e22e">concat</span> (file-name-sans-extension (<span style="color:#a6e22e">buffer-file-name</span>)) <span style="color:#e6db74">&#34;.docx&#34;</span>))
</span></span><span style="display:flex;"><span>	(template-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;template.docx&#34;</span> dn-template-directory)))
</span></span><span style="display:flex;"><span>    (shell-command (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;pandoc %s -o %s --reference-doc=%s&#34;</span> (<span style="color:#a6e22e">buffer-file-name</span>) docx-file template-file))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;Convert finish: %s&#34;</span> docx-file)))
</span></span></code></pre></div></li>
</ul>
<h3 id="latex">Latex</h3>
<h4 id="defaults">Defaults</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-highlight-latex-and-related <span style="color:#f92672">&#39;</span>(latex script))
</span></span></code></pre></div><h4 id="ox-latex">ox-latex</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-highlight-latex-and-related <span style="color:#f92672">&#39;</span>(latex script))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;ox-latex</span>
</span></span><span style="display:flex;"><span>  (add-to-list <span style="color:#e6db74">&#39;org-latex-classes</span>
</span></span><span style="display:flex;"><span>	       <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;dissertation&#34;</span>
</span></span><span style="display:flex;"><span>		 <span style="color:#e6db74">&#34;\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		[NO-DEFAULT-PACKAGES]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		[NO-PACKAGES]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		[EXTRA]&#34;</span>
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\chapter{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\chapter*{%s}&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\section{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\section*{%s}&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\subsection{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\subsection*{%s}&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\subsubsection{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\subsubsection*{%s}&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\paragraph{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\paragraph*{%s}&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#e6db74">&#34;\\subparagraph{%s}&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;\\subparagraph*{%s}&#34;</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-latex-compiler <span style="color:#e6db74">&#34;xelatex&#34;</span>
</span></span><span style="display:flex;"><span>      org-latex-pdf-process <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;xelatex -interaction nonstopmode %f&#34;</span>
</span></span><span style="display:flex;"><span>			      <span style="color:#e6db74">&#34;bibtex %b&#34;</span>
</span></span><span style="display:flex;"><span>			      <span style="color:#e6db74">&#34;xelatex -interaction nonstopmode %f&#34;</span>
</span></span><span style="display:flex;"><span>			      <span style="color:#e6db74">&#34;xelatex -interaction nonstopmode %f&#34;</span>
</span></span><span style="display:flex;"><span>			      <span style="color:#e6db74">&#34;rm -fr %b.out %b.log %b.tex %b.brf %b.bbl&#34;</span>)
</span></span><span style="display:flex;"><span>      org-latex-logfiles-extensions <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;lof&#34;</span> <span style="color:#e6db74">&#34;lot&#34;</span> <span style="color:#e6db74">&#34;tex~&#34;</span> <span style="color:#e6db74">&#34;aux&#34;</span> <span style="color:#e6db74">&#34;idx&#34;</span> <span style="color:#e6db74">&#34;log&#34;</span> <span style="color:#e6db74">&#34;out&#34;</span> <span style="color:#e6db74">&#34;toc&#34;</span> <span style="color:#e6db74">&#34;nav&#34;</span> <span style="color:#e6db74">&#34;snm&#34;</span> <span style="color:#e6db74">&#34;vrb&#34;</span> <span style="color:#e6db74">&#34;dvi&#34;</span> <span style="color:#e6db74">&#34;fdb_latexmk&#34;</span> <span style="color:#e6db74">&#34;blg&#34;</span> <span style="color:#e6db74">&#34;brf&#34;</span> <span style="color:#e6db74">&#34;fls&#34;</span> <span style="color:#e6db74">&#34;entoc&#34;</span> <span style="color:#e6db74">&#34;ps&#34;</span> <span style="color:#e6db74">&#34;spl&#34;</span> <span style="color:#e6db74">&#34;bbl&#34;</span>)
</span></span><span style="display:flex;"><span>      org-latex-prefer-user-labels <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="org-latex-impatient">org-latex-impatient</h4>
<p>可以实时的预览公式。我原来使用的时 popweb 这个包，但是在 Macos 上目前有依赖无法解决。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;org-latex-impatient</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;org-mode-hook</span> <span style="color:#e6db74">&#39;org-latex-impatient-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-latex-impatient-tex2svg-bin <span style="color:#e6db74">&#34;~/node_modules/mathjax-node-cli/bin/tex2svg&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq org-latex-impatient-scale <span style="color:#ae81ff">3.0</span>)
</span></span></code></pre></div><h2 id="application">Application</h2>
<h3 id="calendar">Calendar</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;cal-china-x</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq calendar-mode-line-format <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq calendar-mark-holidays-flag <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      cal-china-x-important-holidays cal-china-x-chinese-holidays
</span></span><span style="display:flex;"><span>      cal-china-x-general-holidays <span style="color:#f92672">&#39;</span>((holiday-lunar <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">15</span> <span style="color:#e6db74">&#34;元宵节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-lunar <span style="color:#ae81ff">7</span> <span style="color:#ae81ff">7</span> <span style="color:#e6db74">&#34;七夕节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-fixed <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">8</span> <span style="color:#e6db74">&#34;妇女节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-fixed <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">12</span> <span style="color:#e6db74">&#34;植树节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-fixed <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">4</span> <span style="color:#e6db74">&#34;青年节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-fixed <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;儿童节&#34;</span>)
</span></span><span style="display:flex;"><span>				     (holiday-fixed <span style="color:#ae81ff">9</span> <span style="color:#ae81ff">10</span> <span style="color:#e6db74">&#34;教师节&#34;</span>))
</span></span><span style="display:flex;"><span>      holiday-other-holidays <span style="color:#f92672">&#39;</span>((holiday-fixed <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">14</span> <span style="color:#e6db74">&#34;情人节&#34;</span>)
</span></span><span style="display:flex;"><span>			       (holiday-fixed <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">1</span> <span style="color:#e6db74">&#34;愚人节&#34;</span>)
</span></span><span style="display:flex;"><span>			       (holiday-fixed <span style="color:#ae81ff">12</span> <span style="color:#ae81ff">25</span> <span style="color:#e6db74">&#34;圣诞节&#34;</span>)
</span></span><span style="display:flex;"><span>			       (holiday-float <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">2</span> <span style="color:#e6db74">&#34;母亲节&#34;</span>)
</span></span><span style="display:flex;"><span>			       (holiday-float <span style="color:#ae81ff">6</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">3</span> <span style="color:#e6db74">&#34;父亲节&#34;</span>)
</span></span><span style="display:flex;"><span>			       (holiday-float <span style="color:#ae81ff">11</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">4</span> <span style="color:#e6db74">&#34;感恩节&#34;</span>))
</span></span><span style="display:flex;"><span>      calendar-holidays (<span style="color:#a6e22e">append</span> cal-china-x-important-holidays
</span></span><span style="display:flex;"><span>				cal-china-x-general-holidays
</span></span><span style="display:flex;"><span>				holiday-other-holidays))
</span></span></code></pre></div><h3 id="pdf-reader">PDF Reader</h3>
<h4 id="pdf-tools">pdf tools</h4>
<p>如果不想高亮文件后打开标注，可以将 <code>pdf-annot-activate-created-annotations</code> 设置为 <code>nil</code> 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(pdf-tools-install <span style="color:#66d9ef">t</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span> <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq pdf-view-use-scaling <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      pdf-view-use-imagemagick <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      pdf-annot-activate-created-annotations <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      pdf-misc-print-program-executable <span style="color:#e6db74">&#34;/usr/bin/lp&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;revert-without-query</span> <span style="color:#e6db74">&#34;.+\\.pdf&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;pdf-tools-enabled-hook</span> <span style="color:#e6db74">&#39;pdf-view-themed-minor-mode</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;pdf-outline</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> pdf-outline-buffer-mode-map (kbd <span style="color:#e6db74">&#34;&lt;RET&gt;&#34;</span>) <span style="color:#e6db74">&#39;pdf-outline-follow-link-and-quit</span>))
</span></span></code></pre></div><h4 id="pdf-print">pdf print</h4>
<p>可以通过命令行使用打印机，不再需要用外部软件打开再去打印文件，而且可以选择打印的页数。来自 <a href="https://qua.name/mrb/an-org-babel-based-emacs-configuration#orgbf8348e">Marcel van der Boom</a> 的配置文件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun mrb/pdf-misc-print-pages(filename pages <span style="color:#66d9ef">&amp;optional</span> interactive-p)
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Wrapper for `pdf-misc-print-document` to add page selection support&#34;</span>
</span></span><span style="display:flex;"><span>    (interactive (<span style="color:#a6e22e">list</span> (pdf-view-buffer-file-name)
</span></span><span style="display:flex;"><span>		       (<span style="color:#a6e22e">read-string</span> <span style="color:#e6db74">&#34;Page range (empty for all pages): &#34;</span>
</span></span><span style="display:flex;"><span>				    (<span style="color:#a6e22e">number-to-string</span> (pdf-view-current-page)))
</span></span><span style="display:flex;"><span>		       <span style="color:#66d9ef">t</span>) pdf-view-mode)
</span></span><span style="display:flex;"><span>    (let ((pdf-misc-print-program-args
</span></span><span style="display:flex;"><span>	   (if (not (string-blank-p pages))
</span></span><span style="display:flex;"><span>	       (<span style="color:#a6e22e">cons</span> (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;-P &#34;</span> pages) pdf-misc-print-program-args)
</span></span><span style="display:flex;"><span>	     pdf-misc-print-program-args)))
</span></span><span style="display:flex;"><span>      (pdf-misc-print-document filename)))
</span></span></code></pre></div><h4 id="pdf-key-settings">pdf key settings</h4>
<p>绑定 w ，获得文件名，我不需要那一大串路径。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/get-file-name ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (kill-new (file-name-base (<span style="color:#a6e22e">buffer-file-name</span>)))
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">message</span> <span style="color:#e6db74">&#34;Copied %s&#34;</span> (file-name-base (<span style="color:#a6e22e">buffer-file-name</span>))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map (kbd <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#e6db74">&#39;my/get-file-name</span>)
</span></span></code></pre></div><p>重新定义按键，相比原来的 <code>C-x C-a h</code> 等按键设定要方便的多。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map (kbd <span style="color:#e6db74">&#34;h&#34;</span>) <span style="color:#e6db74">&#39;pdf-annot-add-highlight-markup-annotation</span>)
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map (kbd <span style="color:#e6db74">&#34;t&#34;</span>) <span style="color:#e6db74">&#39;pdf-annot-add-text-annotation</span>)
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map (kbd <span style="color:#e6db74">&#34;d&#34;</span>) <span style="color:#e6db74">&#39;pdf-annot-delete</span>)
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map (kbd <span style="color:#e6db74">&#34;q&#34;</span>) <span style="color:#e6db74">&#39;kill-this-buffer</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">define-key</span> pdf-view-mode-map [remap pdf-misc-print-document] <span style="color:#e6db74">&#39;mrb/pdf-misc-print-pages</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;pdf-annot</span>
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> pdf-annot-edit-contents-minor-mode-map (kbd <span style="color:#e6db74">&#34;&lt;return&gt;&#34;</span>) <span style="color:#e6db74">&#39;pdf-annot-edit-contents-commit</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> pdf-annot-edit-contents-minor-mode-map (kbd <span style="color:#e6db74">&#34;&lt;S-return&gt;&#34;</span>) <span style="color:#e6db74">&#39;newline</span>))
</span></span></code></pre></div><h4 id="save-place">save place</h4>
<p>saveplace-pdf-view 可以保存 pdf 视图的位置。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(save-place-mode <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;save-place</span>
</span></span><span style="display:flex;"><span>  (advice-add <span style="color:#e6db74">&#39;save-place-find-file-hook</span> :around <span style="color:#a6e22e">#&#39;</span>saveplace-pdf-view-find-file-advice)
</span></span><span style="display:flex;"><span>  (advice-add <span style="color:#e6db74">&#39;save-place-to-alist</span> :around <span style="color:#a6e22e">#&#39;</span>saveplace-pdf-view-to-alist-advice))
</span></span></code></pre></div><h4 id="pdf-annotations">pdf annotations</h4>
<p>Create pdf annotations file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/edit-notes ()
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Edit reference note base pdf name.&#34;</span>
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (if (<span style="color:#a6e22e">equal</span> (file-name-extension (<span style="color:#a6e22e">buffer-name</span>)) <span style="color:#e6db74">&#34;pdf&#34;</span>)
</span></span><span style="display:flex;"><span>      (consult-bibtex-edit-notes (file-name-sans-extension (<span style="color:#a6e22e">buffer-name</span>)))
</span></span><span style="display:flex;"><span>    (consult-bibtex-edit-notes (consult-bibtex--read-entry))))
</span></span></code></pre></div><p>Extract pdf annotations with <a href="https://github.com/0xabu/pdfannots">pdfannots</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun my/org-delete-heading-content (heading)
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Delete content of specific HEADING&#34;</span>
</span></span><span style="display:flex;"><span>  (org-map-entries
</span></span><span style="display:flex;"><span>   (lambda ()
</span></span><span style="display:flex;"><span>     (let ((name (<span style="color:#a6e22e">nth</span> <span style="color:#ae81ff">4</span> (org-heading-components))))
</span></span><span style="display:flex;"><span>       (if (string= name heading)
</span></span><span style="display:flex;"><span>	   (save-restriction
</span></span><span style="display:flex;"><span>	     (org-mark-subtree)
</span></span><span style="display:flex;"><span>	     (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>	     (<span style="color:#a6e22e">delete-region</span> (<span style="color:#a6e22e">region-beginning</span>) (<span style="color:#a6e22e">region-end</span>))))))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(defun my/extract-pdf-annots-to-ref-note ()
</span></span><span style="display:flex;"><span>  (interactive)
</span></span><span style="display:flex;"><span>  (let (annots)
</span></span><span style="display:flex;"><span>    (setf annots (shell-command-to-string (<span style="color:#a6e22e">format</span> <span style="color:#e6db74">&#34;pdfannots.py %s&#34;</span> (find-file (<span style="color:#a6e22e">buffer-name</span>)))))
</span></span><span style="display:flex;"><span>    (consult-bibtex-edit-notes (file-name-sans-extension (<span style="color:#a6e22e">buffer-name</span>)))
</span></span><span style="display:flex;"><span>    (my/org-delete-heading-content <span style="color:#e6db74">&#34;Research Contribution&#34;</span>)
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">goto-char</span> (org-find-exact-headline-in-buffer <span style="color:#e6db74">&#34;Research Contribution&#34;</span>))
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">forward-line</span>)
</span></span><span style="display:flex;"><span>    (dolist (item (split-string annots <span style="color:#e6db74">&#34;\n&#34;</span>))
</span></span><span style="display:flex;"><span>      (if (string-prefix-p <span style="color:#e6db74">&#34;   &gt;&#34;</span> item)
</span></span><span style="display:flex;"><span>	  (<span style="color:#a6e22e">princ</span> (<span style="color:#a6e22e">concat</span> (replace-regexp-in-string <span style="color:#e6db74">&#34;   &gt;&#34;</span> <span style="color:#e6db74">&#34;+&#34;</span> item) <span style="color:#e6db74">&#34;\n&#34;</span>)
</span></span><span style="display:flex;"><span>		 (<span style="color:#a6e22e">current-buffer</span>))))))
</span></span></code></pre></div><h3 id="git">GIT</h3>
<h4 id="magit">Magit</h4>
<p>Magit related configuration</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq transient-history-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;transient/history.el&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;magit</span>
</span></span><span style="display:flex;"><span>  (setq magit-display-buffer-function <span style="color:#e6db74">&#39;magit-display-buffer-fullframe-status-topleft-v1</span>)
</span></span><span style="display:flex;"><span>  (magit-add-section-hook <span style="color:#e6db74">&#39;magit-status-sections-hook</span>
</span></span><span style="display:flex;"><span>			  <span style="color:#e6db74">&#39;magit-insert-modules</span>
</span></span><span style="display:flex;"><span>			  <span style="color:#e6db74">&#39;magit-insert-stashes</span>
</span></span><span style="display:flex;"><span>			  <span style="color:#e6db74">&#39;append</span>))
</span></span></code></pre></div><h4 id="git-timemachine">git-timemachine</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;git-timemachine</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>git-timemachine <span style="color:#e6db74">&#34;git-timemachine&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span></code></pre></div><h4 id="browse-at-remote">Browse at remote</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;browse-at-remote</span>)
</span></span></code></pre></div><h3 id="terminal">Terminal</h3>
<h4 id="eshell">eshell</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;C-`&#34;</span>) <span style="color:#e6db74">&#39;eshell</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq eshell-directory-name (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;eshell&#34;</span> dn-cache-directory))
</span></span></code></pre></div><h4 id="eshell-info-banner">eshell-info-banner</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;eshell-banner-load-hook</span> <span style="color:#e6db74">&#39;eshell-info-banner-update-banner</span>)
</span></span></code></pre></div><h4 id="shell-path">shell path</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(exec-path-from-shell-initialize)
</span></span></code></pre></div><h3 id="rss-management">Rss management</h3>
<h4 id="elfeed">elfeed</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq elfeed-db-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;elfeed&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;elfeed-search-mode-hook</span> <span style="color:#e6db74">&#39;elfeed-update</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq elfeed-show-entry-switch <span style="color:#a6e22e">#&#39;</span>elfeed-display-buffer)
</span></span></code></pre></div><p>elfeed buffer display. 代码借鉴自 <a href="https://github.com/karthink/.emacs.d/blob/master/lisp/setup-elfeed.el">karthink</a> 的配置。这样可以去掉 elfeed-goodies 这个包了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun elfeed-display-buffer (buf <span style="color:#66d9ef">&amp;optional</span> act)
</span></span><span style="display:flex;"><span>  (pop-to-buffer buf <span style="color:#f92672">&#39;</span>((display-buffer-reuse-window display-buffer-in-side-window)
</span></span><span style="display:flex;"><span>		       (side <span style="color:#f92672">.</span> bottom)
</span></span><span style="display:flex;"><span>		       (window-height <span style="color:#f92672">.</span> <span style="color:#ae81ff">0.8</span>)
</span></span><span style="display:flex;"><span>		       (reusable-frames <span style="color:#f92672">.</span> visible)
</span></span><span style="display:flex;"><span>		       (<span style="color:#a6e22e">window-parameters</span>
</span></span><span style="display:flex;"><span>			(select <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>			(quit <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>			(popup <span style="color:#f92672">.</span> <span style="color:#66d9ef">t</span>)))))
</span></span></code></pre></div><h4 id="elfeed-org">elfeed-org</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;elfeed</span>
</span></span><span style="display:flex;"><span>  (setq rmh-elfeed-org-files (<span style="color:#a6e22e">list</span> <span style="color:#e6db74">&#34;~/Nextcloud/L.Personal.Galaxy/roam/main/elfeed.org&#34;</span>))
</span></span><span style="display:flex;"><span>  (elfeed-org))
</span></span></code></pre></div><h4 id="elfeed-score">elfeed-score</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;elfeed</span>
</span></span><span style="display:flex;"><span>  (setq elfeed-score-rule-stats-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;elfeed.stats&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>  (elfeed-score-enable)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">define-key</span> elfeed-search-mode-map <span style="color:#e6db74">&#34;=&#34;</span> elfeed-score-map))
</span></span></code></pre></div><h4 id="elfeed-summary">elfeed-summary</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;elfeed-summary</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;elfeed-summary-mode-hook</span> <span style="color:#e6db74">&#39;elfeed-update</span>)
</span></span></code></pre></div><h3 id="email">Email</h3>
<p>我使用 Mu4e 和 mbsync 管理邮件。Mu4e 的安装见官方手册（<a href="https://www.djcbsoftware.nl/code/mu/mu4e/Installation.html">Installation</a>）。
Macos 上安装的可见，<a href="https://macowners.club/posts/email-emacs-mu4e-macos/">Blog</a>，目前最详细的。</p>
<h4 id="mu4e">mu4e</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(unless
</span></span><span style="display:flex;"><span>    (<span style="color:#a6e22e">fboundp</span> <span style="color:#e6db74">&#39;mu4e</span>)
</span></span><span style="display:flex;"><span>  (<span style="color:#a6e22e">autoload</span> <span style="color:#a6e22e">#&#39;</span>mu4e <span style="color:#e6db74">&#34;mu4e&#34;</span> <span style="color:#66d9ef">nil</span> <span style="color:#66d9ef">t</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq mu4e-mu-binary (executable-find <span style="color:#e6db74">&#34;mu&#34;</span>)
</span></span><span style="display:flex;"><span>      mu4e-get-mail-command (<span style="color:#a6e22e">concat</span> (executable-find <span style="color:#e6db74">&#34;mbsync&#34;</span>) <span style="color:#e6db74">&#34; -a&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq mu4e-maildir <span style="color:#e6db74">&#34;~/.maildir&#34;</span>
</span></span><span style="display:flex;"><span>      mu4e-attachment-dir <span style="color:#e6db74">&#34;~/Downloads/&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq mu4e-use-fancy-chars <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq mu4e-headers-precise-alignment <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; https://github.com/emacsmirror/mu4e-marker-icons/blob/main/mu4e-marker-icons.el</span>
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe0e1</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe0e1</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe159</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe159</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe7f5</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe7f5</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe5ca</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe5ca</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe63f</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe63f</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe0e1</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe0e1</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe151</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe151</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe2bc</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe2bc</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe3b5</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe3b5</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe153</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe153</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe15f</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe15f</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>(<span style="color:#a6e22e">set-fontset-font</span> <span style="color:#66d9ef">t</span> <span style="color:#f92672">&#39;</span>(<span style="color:#ae81ff">#xe92b</span> <span style="color:#f92672">.</span> <span style="color:#ae81ff">#xe92b</span>) (<span style="color:#a6e22e">font-spec</span> :family <span style="color:#e6db74">&#34;Material Icons&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq mu4e-headers-seen-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;S&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>				       (all-the-icons-material <span style="color:#e6db74">&#34;mail_outline&#34;</span>)
</span></span><span style="display:flex;"><span>				       <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">`</span>(:family <span style="color:#f92672">,</span>(all-the-icons-material-family)
</span></span><span style="display:flex;"><span>						       :foreground <span style="color:#f92672">,</span>(face-background <span style="color:#e6db74">&#39;default</span>))))
</span></span><span style="display:flex;"><span>      mu4e-headers-new-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;N&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>				      (all-the-icons-material <span style="color:#e6db74">&#34;markunread&#34;</span>)
</span></span><span style="display:flex;"><span>				      <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">`</span>(:family <span style="color:#f92672">,</span>(all-the-icons-material-family)
</span></span><span style="display:flex;"><span>						      :foreground <span style="color:#f92672">,</span>(face-background <span style="color:#e6db74">&#39;default</span>))))
</span></span><span style="display:flex;"><span>      mu4e-headers-unread-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					 (all-the-icons-material <span style="color:#e6db74">&#34;notifications_none&#34;</span>)
</span></span><span style="display:flex;"><span>					 <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-unread-face</span>))
</span></span><span style="display:flex;"><span>      mu4e-headers-signed-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					 (all-the-icons-material <span style="color:#e6db74">&#34;check&#34;</span>)
</span></span><span style="display:flex;"><span>					 <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">`</span>(:family <span style="color:#f92672">,</span>(all-the-icons-material-family)
</span></span><span style="display:flex;"><span>							 :foreground <span style="color:#e6db74">&#34;DarkCyan&#34;</span>)))
</span></span><span style="display:flex;"><span>      mu4e-headers-encrypted-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;x&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					    (all-the-icons-material <span style="color:#e6db74">&#34;enhanced_encryption&#34;</span>)
</span></span><span style="display:flex;"><span>					    <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">`</span>(:family <span style="color:#f92672">,</span>(all-the-icons-material-family)
</span></span><span style="display:flex;"><span>							    :foreground <span style="color:#e6db74">&#34;CornflowerBlue&#34;</span>)))
</span></span><span style="display:flex;"><span>      mu4e-headers-draft-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					(all-the-icons-material <span style="color:#e6db74">&#34;drafts&#34;</span>)
</span></span><span style="display:flex;"><span>					<span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-draft-face</span>))
</span></span><span style="display:flex;"><span>      mu4e-headers-attach-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					 (all-the-icons-material <span style="color:#e6db74">&#34;attachment&#34;</span>)
</span></span><span style="display:flex;"><span>					 <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-attach-number-face</span>))
</span></span><span style="display:flex;"><span>      mu4e-headers-passed-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;P&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span> <span style="color:#75715e">; ❯ (I&#39;m participated in thread)</span>
</span></span><span style="display:flex;"><span>					 (all-the-icons-material <span style="color:#e6db74">&#34;center_focus_weak&#34;</span>)
</span></span><span style="display:flex;"><span>					 <span style="color:#e6db74">&#39;face</span> <span style="color:#f92672">`</span>(:family <span style="color:#f92672">,</span>(all-the-icons-material-family)
</span></span><span style="display:flex;"><span>							 :foreground <span style="color:#e6db74">&#34;yellow&#34;</span>)))
</span></span><span style="display:flex;"><span>      mu4e-headers-flagged-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;F&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					  (all-the-icons-material <span style="color:#e6db74">&#34;flag&#34;</span>)
</span></span><span style="display:flex;"><span>					  <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-flagged-face</span>))
</span></span><span style="display:flex;"><span>      mu4e-headers-replied-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;R&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					  (all-the-icons-material <span style="color:#e6db74">&#34;reply_all&#34;</span>)
</span></span><span style="display:flex;"><span>					  <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-replied-face</span>))
</span></span><span style="display:flex;"><span>      mu4e-headers-trashed-mark <span style="color:#f92672">`</span>(<span style="color:#e6db74">&#34;T&#34;</span> <span style="color:#f92672">.</span> <span style="color:#f92672">,</span>(<span style="color:#a6e22e">propertize</span>
</span></span><span style="display:flex;"><span>					  (all-the-icons-material <span style="color:#e6db74">&#34;delete_forever&#34;</span>)
</span></span><span style="display:flex;"><span>					  <span style="color:#e6db74">&#39;face</span> <span style="color:#e6db74">&#39;mu4e-trashed-face</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq mail-user-agent <span style="color:#e6db74">&#39;mu4e-user-agent</span>
</span></span><span style="display:flex;"><span>      mu4e-update-interval <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span>      mu4e-index-update-in-background <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-index-update-error-warning <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-view-show-images <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-view-image-max-width <span style="color:#ae81ff">800</span>
</span></span><span style="display:flex;"><span>      mu4e-confirm-quit <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      mu4e-view-show-addresses <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-headers-include-related <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-headers-auto-update <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-index-update-error-warning <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>      mu4e-index-cleanup <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      mu4e-context-policy <span style="color:#e6db74">&#39;pick-first</span>
</span></span><span style="display:flex;"><span>      mu4e-headers-date-format <span style="color:#e6db74">&#34;%d/%m/%y&#34;</span>
</span></span><span style="display:flex;"><span>      mu4e-headers-time-format <span style="color:#e6db74">&#34;%H:%M&#34;</span>
</span></span><span style="display:flex;"><span>      mu4e-headers-fields <span style="color:#f92672">&#39;</span>((:flags <span style="color:#f92672">.</span> <span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>			    (:human-date <span style="color:#f92672">.</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>			    (:subject <span style="color:#f92672">.</span> <span style="color:#ae81ff">90</span>)
</span></span><span style="display:flex;"><span>			    (:from-or-to <span style="color:#f92672">.</span> <span style="color:#ae81ff">40</span>)
</span></span><span style="display:flex;"><span>			    (:tags <span style="color:#f92672">.</span> <span style="color:#ae81ff">20</span>))
</span></span><span style="display:flex;"><span>      mu4e-compose-reply-ignore-address <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;no-?reply&#34;</span> <span style="color:#e6db74">&#34;duan_n@outlook.com&#34;</span>)
</span></span><span style="display:flex;"><span>      mu4e-bookmarks <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;flag:unread AND NOT flag:trashed&#34;</span> <span style="color:#e6db74">&#34;Unread messages&#34;</span> <span style="color:#e6db74">?u</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;date:today..now&#34;</span> <span style="color:#e6db74">&#34;Today&#39;s messages&#34;</span> <span style="color:#e6db74">?t</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;date:7d..now&#34;</span> <span style="color:#e6db74">&#34;Last 7 days&#34;</span> <span style="color:#e6db74">?w</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;date:1d..now AND NOT list:emacs-orgmode.gnu.org&#34;</span> <span style="color:#e6db74">&#34;Last 1 days&#34;</span> <span style="color:#e6db74">?o</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;date:1d..now AND list:emacs-orgmode.gnu.org&#34;</span> <span style="color:#e6db74">&#34;Last 1 days (org mode)&#34;</span> <span style="color:#e6db74">?m</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;maildir:/drafts&#34;</span> <span style="color:#e6db74">&#34;drafts&#34;</span> <span style="color:#e6db74">?d</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;flag:flagged AND NOT flag:trashed&#34;</span> <span style="color:#e6db74">&#34;flagged&#34;</span> <span style="color:#e6db74">?f</span>)
</span></span><span style="display:flex;"><span>		       (<span style="color:#e6db74">&#34;mime:image/*&#34;</span> <span style="color:#e6db74">&#34;Messages with images&#34;</span> <span style="color:#e6db74">?p</span>)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;mu4e</span>
</span></span><span style="display:flex;"><span>  (setq mu4e-sent-folder   <span style="color:#e6db74">&#34;/outlook/Sent&#34;</span>
</span></span><span style="display:flex;"><span>	mu4e-drafts-folder <span style="color:#e6db74">&#34;/outlook/Drafts&#34;</span>
</span></span><span style="display:flex;"><span>	mu4e-trash-folder  <span style="color:#e6db74">&#34;/outlook/Deleted&#34;</span>
</span></span><span style="display:flex;"><span>	mu4e-refile-folder  <span style="color:#e6db74">&#34;/outlook/Archive&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">;; (add-hook &#39;after-init-hook &#39;mu4e)</span>
</span></span><span style="display:flex;"><span>(mu4e <span style="color:#e6db74">&#39;background</span>)
</span></span></code></pre></div><h4 id="mu4e-alert">mu4e-alert</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;mu4e</span>
</span></span><span style="display:flex;"><span>  (mu4e-alert-set-default-style <span style="color:#e6db74">&#39;notifier</span>)
</span></span><span style="display:flex;"><span>  (add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#a6e22e">#&#39;</span>mu4e-alert-enable-notifications)
</span></span><span style="display:flex;"><span>  (with-eval-after-load <span style="color:#e6db74">&#39;doom-modeline</span>
</span></span><span style="display:flex;"><span>    (mu4e-alert-enable-mode-line-display)))
</span></span></code></pre></div><h4 id="sent-mail">sent mail</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq message-send-mail-function <span style="color:#e6db74">&#39;smtpmail-send-it</span>)
</span></span></code></pre></div><h4 id="mu4e-column-faces">mu4e-column-faces</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;mu4e</span>
</span></span><span style="display:flex;"><span>  (mu4e-column-faces-mode))
</span></span></code></pre></div><h4 id="org-msg">Org-msg</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq org-msg-options <span style="color:#e6db74">&#34;html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t&#34;</span>
</span></span><span style="display:flex;"><span>      org-msg-startup <span style="color:#e6db74">&#34;hidestars indent inlineimages&#34;</span>
</span></span><span style="display:flex;"><span>      org-msg-greeting-fmt <span style="color:#e6db74">&#34;\nHi%s,\n\n&#34;</span>
</span></span><span style="display:flex;"><span>      org-msg-recipient-names <span style="color:#f92672">&#39;</span>((<span style="color:#e6db74">&#34;jeremy.compostella@gmail.com&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Jérémy&#34;</span>))
</span></span><span style="display:flex;"><span>      org-msg-greeting-name-limit <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>      org-msg-default-alternatives <span style="color:#f92672">&#39;</span>((new		<span style="color:#f92672">.</span> (text html))
</span></span><span style="display:flex;"><span>				     (reply-to-html	<span style="color:#f92672">.</span> (text html))
</span></span><span style="display:flex;"><span>				     (reply-to-text	<span style="color:#f92672">.</span> (text)))
</span></span><span style="display:flex;"><span>      org-msg-convert-citation <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      org-msg-signature <span style="color:#e6db74">&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> Regards,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> #+begin_signature
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> --
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> *Duan Ning*
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> /One Emacs to rule them all/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> #+end_signature&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(org-msg-mode)
</span></span></code></pre></div><h3 id="telegaram">Telegaram</h3>
<p>非官方的 telegram 客户端。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq telega-server-libs-prefix <span style="color:#e6db74">&#34;~/td/tdlib&#34;</span>)
</span></span><span style="display:flex;"><span>(setq telega-proxies (<span style="color:#a6e22e">list</span>
</span></span><span style="display:flex;"><span>		      <span style="color:#f92672">&#39;</span>(:server <span style="color:#e6db74">&#34;127.0.0.1&#34;</span> :port <span style="color:#ae81ff">7891</span> :enable <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>				:type (:@type <span style="color:#e6db74">&#34;proxyTypeSocks5&#34;</span>))))
</span></span></code></pre></div><h3 id="calibre">Calibre</h3>
<p><a href="https://calibredb.hkvim.com">https://calibredb.hkvim.com</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(setq calibredb-root-dir <span style="color:#e6db74">&#34;~/Calibre Library&#34;</span>
</span></span><span style="display:flex;"><span>      calibredb-db-dir (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;metadata.db&#34;</span> calibredb-root-dir))
</span></span><span style="display:flex;"><span>(setq calibredb-format-all-the-icons <span style="color:#66d9ef">t</span>
</span></span><span style="display:flex;"><span>      calibredb-title-width <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>      calibredb-size-show <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>(setq calibredb-fetch-metadata-source-list <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;Google&#34;</span> <span style="color:#e6db74">&#34;Amazon.com&#34;</span>))
</span></span></code></pre></div><h3 id="music">Music</h3>
<p>2022-04-14 目前使用不己， API NULL。需要包作者进行更新。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(global-set-key (kbd <span style="color:#e6db74">&#34;&lt;f7&gt;&#34;</span>) <span style="color:#e6db74">&#39;netease-cloud-music</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq request-storage-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;request&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq netease-cloud-music-cache-directory (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;netease-cloud-music&#34;</span> dn-cache-directory))
</span></span></code></pre></div><h2 id="keybindings">Keybindings</h2>
<h3 id="keyfreq">Keyfreq</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(keyfreq-mode <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(keyfreq-autosave-mode <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq keyfreq-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;.emacs.keyfreq&#34;</span> dn-cache-directory))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq keyfreq-excluded-commands <span style="color:#f92672">&#39;</span>(<span style="color:#a6e22e">self-insert-command</span>
</span></span><span style="display:flex;"><span>				  <span style="color:#a6e22e">forward-char</span>
</span></span><span style="display:flex;"><span>				  <span style="color:#a6e22e">backward-char</span>
</span></span><span style="display:flex;"><span>				  previous-line
</span></span><span style="display:flex;"><span>				  next-line))
</span></span></code></pre></div><h3 id="meow">Meow</h3>
<blockquote>
<p><a href="https://github.com/meow-edit/meow">Meow</a> is yet another modal editing mode for Emacs.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(defun meow-setup ()
</span></span><span style="display:flex;"><span>  (meow-motion-overwrite-define-key
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#f92672">.</span> meow-next)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#f92672">.</span> meow-prev))
</span></span><span style="display:flex;"><span>  (meow-leader-define-key
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">;; SPC j/k will run the original command in MOTION state.</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;H-j&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;H-k&#34;</span>)
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">;; Use SPC (0-9) for digit arguments.</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;3&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;4&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;5&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;6&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;7&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;9&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">.</span> meow-digit-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">.</span> meow-keypad-describe-key)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;?&#34;</span> <span style="color:#f92672">.</span> meow-cheatsheet))
</span></span><span style="display:flex;"><span>  (meow-normal-define-key
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">.</span> meow-expand-0)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;9&#34;</span> <span style="color:#f92672">.</span> meow-expand-9)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#f92672">.</span> meow-expand-8)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;7&#34;</span> <span style="color:#f92672">.</span> meow-expand-7)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;6&#34;</span> <span style="color:#f92672">.</span> meow-expand-6)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;5&#34;</span> <span style="color:#f92672">.</span> meow-expand-5)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;4&#34;</span> <span style="color:#f92672">.</span> meow-expand-4)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;3&#34;</span> <span style="color:#f92672">.</span> meow-expand-3)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#f92672">.</span> meow-expand-2)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">.</span> meow-expand-1)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;-&#34;</span> <span style="color:#f92672">.</span> negative-argument)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;;&#34;</span> <span style="color:#f92672">.</span> meow-reverse)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;,&#34;</span> <span style="color:#f92672">.</span> meow-inner-of-thing)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;.&#34;</span> <span style="color:#f92672">.</span> meow-bounds-of-thing)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;[&#34;</span> <span style="color:#f92672">.</span> meow-beginning-of-thing)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;]&#34;</span> <span style="color:#f92672">.</span> meow-end-of-thing)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> meow-append)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">.</span> meow-open-below)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> meow-back-word)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;B&#34;</span> <span style="color:#f92672">.</span> meow-back-symbol)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> meow-change)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> meow-delete)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#f92672">.</span> meow-backward-delete)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> meow-next-word)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;E&#34;</span> <span style="color:#f92672">.</span> meow-next-symbol)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> meow-find)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> meow-cancel-selection)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;G&#34;</span> <span style="color:#f92672">.</span> meow-grab)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;h&#34;</span> <span style="color:#f92672">.</span> meow-left)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;H&#34;</span> <span style="color:#f92672">.</span> meow-left-expand)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> meow-insert)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;I&#34;</span> <span style="color:#f92672">.</span> meow-open-above)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#f92672">.</span> meow-next)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;J&#34;</span> <span style="color:#f92672">.</span> meow-next-expand)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#f92672">.</span> meow-prev)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;K&#34;</span> <span style="color:#f92672">.</span> meow-prev-expand)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> meow-right)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;L&#34;</span> <span style="color:#f92672">.</span> meow-right-expand)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#f92672">.</span> meow-join)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;n&#34;</span> <span style="color:#f92672">.</span> meow-search)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> meow-block)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;O&#34;</span> <span style="color:#f92672">.</span> meow-to-block)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> meow-yank)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;q&#34;</span> <span style="color:#f92672">.</span> meow-quit)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;Q&#34;</span> <span style="color:#f92672">.</span> meow-goto-line)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> meow-replace)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;R&#34;</span> <span style="color:#f92672">.</span> meow-swap-grab)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> meow-kill)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> meow-till)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#f92672">.</span> undo)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;U&#34;</span> <span style="color:#f92672">.</span> undo-redo)
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">;; &#39;(&#34;u&#34; . meow-undo)</span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">;; &#39;(&#34;U&#34; . meow-undo-in-selection)</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#f92672">.</span> meow-visit)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#f92672">.</span> meow-mark-word)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;W&#34;</span> <span style="color:#f92672">.</span> meow-mark-symbol)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;x&#34;</span> <span style="color:#f92672">.</span> meow-line)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;X&#34;</span> <span style="color:#f92672">.</span> meow-goto-line)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">.</span> meow-save)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;Y&#34;</span> <span style="color:#f92672">.</span> meow-sync-grab)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;z&#34;</span> <span style="color:#f92672">.</span> meow-pop-selection)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;&#39;&#34;</span> <span style="color:#f92672">.</span> repeat)
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;&lt;escape&gt;&#34;</span> <span style="color:#f92672">.</span> mode-line-other-buffer)))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-hook <span style="color:#e6db74">&#39;after-init-hook</span> <span style="color:#e6db74">&#39;meow-setup</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(meow-global-mode)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq meow-use-clipboard <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;meow-mode-state-list</span> <span style="color:#f92672">&#39;</span>(netease-cloud-music-mode <span style="color:#f92672">.</span> motion))
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;meow-mode-state-list</span> <span style="color:#f92672">&#39;</span>(osx-dictionary-mode <span style="color:#f92672">.</span> motion))
</span></span><span style="display:flex;"><span>(add-to-list <span style="color:#e6db74">&#39;meow-mode-state-list</span> <span style="color:#f92672">&#39;</span>(stock-tracker-mode <span style="color:#f92672">.</span> motion))
</span></span></code></pre></div><h3 id="one-key">One Key</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(require <span style="color:#e6db74">&#39;one-key</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(setq one-key-popup-window <span style="color:#66d9ef">nil</span>)
</span></span></code></pre></div><h4 id="one-key-for-bibtex">one key for bibtex</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;BIBTEX&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Actions&#34;</span>) <span style="color:#f92672">.</span> orb-note-actions)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;open&#34;</span>) <span style="color:#f92672">.</span> consult-bibtex-open-any)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;entry&#34;</span>) <span style="color:#f92672">.</span> consult-bibtex-show-entry)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;n&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;note&#34;</span>) <span style="color:#f92672">.</span> my/edit-notes)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;x&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;extract annots&#34;</span>) <span style="color:#f92672">.</span> my/extract-pdf-annots-to-ref-note))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-org-download">one key for org download</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;DOWNLOAD&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;clipboard&#34;</span>) <span style="color:#f92672">.</span> org-download-clipboard)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;image&#34;</span>) <span style="color:#f92672">.</span> org-download-image)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;screenshot&#34;</span>) <span style="color:#f92672">.</span> org-download-screenshot))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-language">one key for language</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;LANGUAGE&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Translate&#34;</span>) <span style="color:#f92672">.</span> gts-do-translate)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Fanyi Point&#34;</span>) <span style="color:#f92672">.</span> fanyi-dwim2)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;F&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Fanyi Input&#34;</span>) <span style="color:#f92672">.</span> fanyi-dwim)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Dictionary Point&#34;</span>) <span style="color:#f92672">.</span> osx-dictionary-search-pointer)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;D&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Dictionary Input&#34;</span>) <span style="color:#f92672">.</span> osx-dictionary-search-input)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Powerthesaurus&#34;</span>) <span style="color:#f92672">.</span> powerthesaurus-lookup-dwim)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Style region&#34;</span>) <span style="color:#f92672">.</span> smog-check)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;S&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Style buffer&#34;</span>) <span style="color:#f92672">.</span> smog-check-buffer))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-file">one key for file</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;FILE&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;FINANCE&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-beancount)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;recent&#34;</span>) <span style="color:#f92672">.</span> consult-recent-file)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;open&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-specific-file)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;External&#34;</span>) <span style="color:#f92672">.</span> xah-html-open-in-safari))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-directory">one key for directory</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;DIRECTORY&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Cloud&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (dired <span style="color:#e6db74">&#34;~/Nextcloud/&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Downloads&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (dired <span style="color:#e6db74">&#34;~/Downloads/&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Pictures&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (dired <span style="color:#e6db74">&#34;~/Pictures/&#34;</span>))))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-open-specific-file">one key for open specific file</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;SPECIFIC-FILE&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Blog file&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file <span style="color:#e6db74">&#34;~/hugo-source/content-org/all-posts.org&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;I&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;README.org&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;README.org&#34;</span> user-emacs-directory))))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Inbox&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;daily/inbox.org&#34;</span> dn-galaxy))))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;rss&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;main/elfeed.org&#34;</span> dn-roam))))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;gtd&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;todos/org-gtd-tasks.org&#34;</span> dn-galaxy))))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;alipay&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;alipay.bean&#34;</span> dn-finance-year))))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Beancount main&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (find-file (<span style="color:#a6e22e">expand-file-name</span> <span style="color:#e6db74">&#34;main.bean&#34;</span> dn-finance)))))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-org">one key for org</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ORG&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Clock&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-org-clock)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Download&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-download)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Process&#34;</span>) <span style="color:#f92672">.</span> org-gtd-process-inbox)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;cliplink&#34;</span>) <span style="color:#f92672">.</span> org-cliplink)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;ID&#34;</span>) <span style="color:#f92672">.</span> org-id-get-create))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><!-- raw HTML omitted -->
<ul>
<li>
<p>org-clock</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span>   <span style="color:#e6db74">&#34;ORG-CLOCK&#34;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;In&#34;</span>) <span style="color:#f92672">.</span> org-clock-in)
</span></span><span style="display:flex;"><span>     ((<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Out&#34;</span>) <span style="color:#f92672">.</span> org-clock-out)
</span></span><span style="display:flex;"><span>     ((<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;goto&#34;</span>) <span style="color:#f92672">.</span> org-clock-goto)
</span></span><span style="display:flex;"><span>     ((<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;last&#34;</span>) <span style="color:#f92672">.</span> org-clock-in-last))
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div></li>
</ul>
<h4 id="one-key-for-org-transclusion">one key for org transclusion</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;TRANSCLUSION&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Add&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-add)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Add all&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-add-all)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Remove&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-remove)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;R&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Remove all&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-remove-all)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Refresh&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-refresh)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;make&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-make-from-link)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Open&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-open-source)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Edit&#34;</span>) <span style="color:#f92672">.</span> org-transclusion-live-sync-start))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-org-roam">one key for org roam</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ROAM&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Alias&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-roam-alias)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Roam Buffer&#34;</span>) <span style="color:#f92672">.</span> org-roam-buffer-toggle)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Roam capture&#34;</span>) <span style="color:#f92672">.</span> org-roam-capture)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Dailies&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-roam-dailies)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Node find&#34;</span>) <span style="color:#f92672">.</span> org-roam-node-find)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Node insert&#34;</span>) <span style="color:#f92672">.</span> org-roam-node-insert)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Search content&#34;</span>) <span style="color:#f92672">.</span> bms/org-roam-rg-search)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Tags&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-roam-tags)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Ref&#34;</span>) <span style="color:#f92672">.</span> one-key-menu-roam-ref))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ROAM-ALIAS&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Add&#34;</span>) <span style="color:#f92672">.</span> org-roam-alias-add)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Remove&#34;</span>) <span style="color:#f92672">.</span> org-roam-alias-remove))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ROAM-DAILIES&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Today&#34;</span>) <span style="color:#f92672">.</span> org-roam-dailies-find-today)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Yesterday&#34;</span>) <span style="color:#f92672">.</span> org-roam-dailies-find-yesterday)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Directory&#34;</span>) <span style="color:#f92672">.</span> org-roam-dailies-find-directory)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Date&#34;</span>) <span style="color:#f92672">.</span> org-roam-dailies-find-date)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;p&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Past Diary&#34;</span>) <span style="color:#f92672">.</span> my/history-morning-diary))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ROAM-REF&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Add&#34;</span>) <span style="color:#f92672">.</span> org-roam-ref-add)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Find&#34;</span>) <span style="color:#f92672">.</span> org-roam-ref-find)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Remove&#34;</span>) <span style="color:#f92672">.</span> org-roam-ref-remove))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;ROAM-TAGS&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Add&#34;</span>) <span style="color:#f92672">.</span> org-roam-tag-add)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Completion&#34;</span>) <span style="color:#f92672">.</span> org-roam-tag-completions)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Remove&#34;</span>) <span style="color:#f92672">.</span> org-roam-tag-remove))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h4 id="one-key-for-window-frame">one key for window frame</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(one-key-create-menu
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;WINDOWS&#34;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(((<span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Tabs:common&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (centaur-tabs-switch-group <span style="color:#e6db74">&#34;Common&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Destroy&#34;</span>) <span style="color:#f92672">.</span> kill-this-buffer)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;g&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Tabs:Groups&#34;</span>) <span style="color:#f92672">.</span> awesome-tab-switch-group)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Tabs:org&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (centaur-tabs-switch-group <span style="color:#e6db74">&#34;OrgMode&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;h&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Left&#34;</span>) <span style="color:#f92672">.</span> windmove-left)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;j&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Down&#34;</span>) <span style="color:#f92672">.</span> windmove-down)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;k&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Up&#34;</span>) <span style="color:#f92672">.</span> windmove-up)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Right&#34;</span>) <span style="color:#f92672">.</span> windmove-right)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;e&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Email&#34;</span>) <span style="color:#f92672">.</span> mu4e)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;rss&#34;</span>) <span style="color:#f92672">.</span> elfeed-summary)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Telega&#34;</span>) <span style="color:#f92672">.</span> telega)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;m&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Message&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (switch-to-buffer <span style="color:#e6db74">&#34;*Messages*&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;scratch&#34;</span>) <span style="color:#f92672">.</span> (lambda () (interactive) (switch-to-buffer <span style="color:#e6db74">&#34;*scratch*&#34;</span>)))
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;u&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;Winner Undo&#34;</span>) <span style="color:#f92672">.</span> winner-undo)
</span></span><span style="display:flex;"><span>   ((<span style="color:#e6db74">&#34;v&#34;</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;vundo&#34;</span>) <span style="color:#f92672">.</span> vundo))
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">t</span>)
</span></span></code></pre></div><h3 id="bind-meow-leader-with-one-key-menu">Bind meow leader with one-key-menu</h3>
<p>不要绑定在 <code>c</code> <code>m</code> <code>g</code> 上，这几个键在 <code>Meow</code> 中被使用。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(meow-leader-define-key
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">.</span> my/org-agenda)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;SPC&#34;</span> <span style="color:#f92672">.</span> meow-M-x)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;b&#34;</span> <span style="color:#f92672">.</span> one-key-menu-bibtex)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#f92672">.</span> one-key-menu-directory)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;f&#34;</span> <span style="color:#f92672">.</span> one-key-menu-file)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;i&#34;</span> <span style="color:#f92672">.</span> my/org-capture-inbox)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;l&#34;</span> <span style="color:#f92672">.</span> one-key-menu-language)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;r&#34;</span> <span style="color:#f92672">.</span> one-key-menu-roam)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;o&#34;</span> <span style="color:#f92672">.</span> one-key-menu-org)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;s&#34;</span> <span style="color:#f92672">.</span> eshell)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;t&#34;</span> <span style="color:#f92672">.</span> one-key-menu-transclusion)
</span></span><span style="display:flex;"><span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;w&#34;</span> <span style="color:#f92672">.</span> one-key-menu-windows))
</span></span></code></pre></div>]]></content:encoded></item><item><title>Emacs 配置参考集</title><link>https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/emacs-%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83%E9%9B%86/</guid><description> If I have seen further, it is by standing on the shoulders of giants. &amp;mdash;- Sir Isaac Newton
https://github.com/bbatsov/prelude https://github.com/syl20bnr/spacemacs https://github.com/seagle0128/.emacs.d https://github.com/hlissner/doom-emacs https://github.com/remacs/remacs https://github.com/redguardtoo/emacs.d https://github.com/manateelazycat/lazycat-emacs https://github.com/purcell/emacs.d https://github.com/MatthewZMD/.emacs.d https://sachachua.com/dotemacs/ https://github.com/raxod502/radian https://tecosaur.github.io/emacs-config/config.html https://github.com/mrvdb/emacs-config https://qua.name/mrb/an-org-babel-based-emacs-configuration https://github.com/willbchang/ward-emacs</description><content:encoded><![CDATA[<blockquote>
<p>If I have seen further, it is by standing on the shoulders of giants. &mdash;- Sir Isaac Newton</p>
</blockquote>
<ul>
<li><a href="https://github.com/bbatsov/prelude">https://github.com/bbatsov/prelude</a></li>
<li><a href="https://github.com/syl20bnr/spacemacs">https://github.com/syl20bnr/spacemacs</a></li>
<li><a href="https://github.com/seagle0128/.emacs.d">https://github.com/seagle0128/.emacs.d</a></li>
<li><a href="https://github.com/hlissner/doom-emacs">https://github.com/hlissner/doom-emacs</a></li>
<li><a href="https://github.com/remacs/remacs">https://github.com/remacs/remacs</a></li>
<li><a href="https://github.com/redguardtoo/emacs.d">https://github.com/redguardtoo/emacs.d</a></li>
<li><a href="https://github.com/manateelazycat/lazycat-emacs">https://github.com/manateelazycat/lazycat-emacs</a></li>
<li><a href="https://github.com/purcell/emacs.d">https://github.com/purcell/emacs.d</a></li>
<li><a href="https://github.com/MatthewZMD/.emacs.d">https://github.com/MatthewZMD/.emacs.d</a></li>
<li><a href="https://sachachua.com/dotemacs/">https://sachachua.com/dotemacs/</a></li>
<li><a href="https://github.com/raxod502/radian">https://github.com/raxod502/radian</a></li>
<li><a href="https://tecosaur.github.io/emacs-config/config.html">https://tecosaur.github.io/emacs-config/config.html</a></li>
<li><a href="https://github.com/mrvdb/emacs-config">https://github.com/mrvdb/emacs-config</a>
<a href="https://qua.name/mrb/an-org-babel-based-emacs-configuration">https://qua.name/mrb/an-org-babel-based-emacs-configuration</a></li>
<li><a href="https://github.com/willbchang/ward-emacs">https://github.com/willbchang/ward-emacs</a></li>
</ul>
]]></content:encoded></item><item><title>使用 Emacs(ox-hugo) + Hugo + Github-pages + Github-actions 管理 blog</title><link>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-hugo-+-github-pages-+-github-action-%E7%AE%A1%E7%90%86-blog/</guid><description>今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。
Github 基础 创建仓库 这部分先创建下面两个 github 仓库。具体的过程看官方的手册 （如果这部分你不清楚，建议先补下相关知识）。
https://github.com/Jousimies/Jousimies.github.io
对于 hugo 而言，这个仓库 需要是 public 的 ，不能是 private 的。这个仓库名必需要 XXXX.github.io 的形式。
https://github.com/Jousimies/hugo-source
这个仓库可以是 public 的，也可以是 private 的。 建议选 private 。
以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。
管理仓库 - SSH 方式 虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。
关于 ssh 管理仓库的知识，这部分可以看 官方手册 。 这部分必需要做 。</description><content:encoded><![CDATA[<p>今天第一次尝试使用 hugo 进行写 blog ，因为之前虽然断断续续的尝试过 wordpress ， mediawiki 等方式，但是一直没有一个好的体验。查了很多关于 hugo 写 bolg 的资料，网上关于这方面的的文章特别的多，但是不是很小白，有些文章己经过时，参考这些文章走了很多的弯路。今天决定一定要把这个跑通。下面是我的折腾记录。</p>
<h2 id="github-基础">Github 基础</h2>
<h3 id="创建仓库">创建仓库</h3>
<p>这部分先创建下面两个 github 仓库。具体的过程看<a href="https://docs.github.com/en/get-started/quickstart/create-a-repo">官方的手册</a> （如果这部分你不清楚，建议先补下相关知识）。</p>
<ul>
<li>
<p><a href="https://github.com/Jousimies/Jousimies.github.io">https://github.com/Jousimies/Jousimies.github.io</a></p>
<p>对于 hugo 而言，这个仓库 <strong>需要是 public 的</strong> ，不能是 private 的。这个仓库名必需要 <code>XXXX.github.io</code> 的形式。</p>
</li>
<li>
<p><a href="https://github.com/Jousimies/hugo-source">https://github.com/Jousimies/hugo-source</a></p>
<p>这个仓库可以是 public 的，也可以是 private 的。 <strong>建议选 private</strong>  。</p>
</li>
</ul>
<p><strong>以下教程中用到以上两个仓库的地方，请换成自己创建的仓库的地址。</strong></p>
<h3 id="管理仓库-ssh-方式">管理仓库 - SSH 方式</h3>
<p>虽然可以使用 https 的方式 clone ，但是目前 github 己经不充许使用密码进行仓库的 push ，需要使用 token 或者是 ssh 。我使用 ssh 。</p>
<p>关于 ssh 管理仓库的知识，这部分可以看 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">官方手册</a> 。 <strong>这部分必需要做</strong> 。</p>
<h3 id="clone-仓库">clone 仓库</h3>
<p>将上面创建的 hugo-source 项目仓库 clone 到本地，主页仓库不需要 clone 地本地。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~
</span></span><span style="display:flex;"><span>git clone git@github.com:Jousimies/hugo-source.git <span style="color:#75715e">#替换成自己的地址</span>
</span></span></code></pre></div><h2 id="hugo">HUGO</h2>
<h3 id="hugo-安装">hugo 安装</h3>
<p>Macos 上通过以下命令安装。其他的操作系统参考：<a href="https://gohugo.io/getting-started/installing">Install Hugo | Hugo</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>brew install hugo
</span></span></code></pre></div><p>通过 <code>hugo version</code> 查看版本，后面会用到。</p>
<h3 id="hugo-quick-start">Hugo quick start</h3>
<p>这部分可以参考 <a href="https://ox-hugo.scripter.co/doc/quick-start/">Quick Start — ox-hugo - Org to Hugo exporter</a> 中的说明。</p>
<p>设及到的操作有以下三个：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>hugo new site hugo-source --force <span style="color:#75715e"># 这里必需要使用 --force</span>
</span></span><span style="display:flex;"><span>git submodule add https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;theme = &#34;PaperMod&#34;&#39;</span> &gt;&gt; config.toml
</span></span></code></pre></div><p>以上的命令中必需要 <code>force</code> ，因为我是先创建的仓库 hugo-source 。
至于先创建 site 的方式，自己查资料吧，这边不说。</p>
<p>需要注意的是 <a href="https://ox-hugo.scripter.co/doc/quick-start/">Quick Start — ox-hugo - Org to Hugo exporter</a> 中第4步关于主题的设置，它推荐的是使用 hugo modules ，但是我这边会出现 hugo moduel download 然后就没有反应，所以 <strong>我推荐使用 git submodele 的方式管理主题</strong> 。</p>
<p>有些教程中是使用 git clone 的方式管理主题，但是强烈建议不要直接使用 git clone 的方式管理主题，否则后面 git 配置的时候会报仓库嵌套的问题。虽然可以解决，但是我觉得麻烦，不如这里直接使用 submodule 的方式管理。</p>
<p>上面的使用的是 <a href="https://github.com/adityatelange/hugo-PaperMod">GitHub - adityatelange/hugo-PaperMod: A fast, clean, responsive Hugo theme.</a> 这个主题。</p>
<h3 id="写文章">写文章</h3>
<p>我使用 emacs 中的 org-mode 写，如果你要使用 markdown 写的请参考其他的教程。</p>
<p>我选择把所有的文章放到一个 org 文档中，如果要分开放，自己查资料。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~/hugo-source <span style="color:#75715e">#这里的地址取决你的仓库名</span>
</span></span><span style="display:flex;"><span>mkdir content-org
</span></span><span style="display:flex;"><span>cd content-org
</span></span><span style="display:flex;"><span>touch all-posts.org
</span></span></code></pre></div><p>我把 org 原始文件 <code>all-posts.org</code> 放到了 content-org 文件夹中，这两个你都可以用其他的名称。</p>
<p>在 emacs 中打开 <code>all-posts.org</code> 这个文件，编辑这个文件。</p>
<p>格式可以参考以下这张图： <img loading="lazy" src="https://www.xianmin.org/image/other/ox-hugo-01.png" alt=""  />
</p>
<p>其中 <code>export_file_name</code> 你可以自己定。如果一个 title 加了 <code>TODO</code> ，导出时在 hugo 中会显示 draft ，改成 <code>DONE</code> 就会去掉。</p>
<h4 id="导出-org-文档为-markdown">导出 org 文档为 markdown</h4>
<p>Hugo 使用 markdown 渲染，所以要将 org 文档转换成 markdown 格式。这个在 emacs 中是使用 ox-hugo 这个包实现。</p>
<p>ox-hugo 的配置很简单：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>(with-eval-after-load <span style="color:#e6db74">&#39;ox</span>
</span></span><span style="display:flex;"><span>  (require <span style="color:#e6db74">&#39;ox-hugo</span>))
</span></span></code></pre></div><p>使用 <code>C-c C-e H H</code> 将 org 文档转换成 markdown 文档。这个命令会将 org 中的 subtree 转换成多个 markdown 文件。如果使用 <code>C-c C-e H h</code> 的话，会将 <code>all-posts.org</code> 转换成 <code>all-posts.md</code> 这一个文档。</p>
<p>我使用的是 <code>C-c C-e H H</code> 这个命令。</p>
<h3 id="hugo-预览">hugo 预览</h3>
<p>本地使用 hugo server 预览自己的文件。执行下面两个命令后，就可以用浏览器打开 localhost:1313 预览自己的 blog 了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>hugo server
</span></span></code></pre></div><h3 id="生成静态文件">生成静态文件</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-sourch
</span></span><span style="display:flex;"><span>hugo
</span></span></code></pre></div><p><strong>这部分必需要做</strong> 。</p>
<h2 id="github-actions-配置文件">Github Actions 配置文件</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>mkdir -p .github/workflows
</span></span><span style="display:flex;"><span>touch hugo.yml <span style="color:#75715e">#这个文件名没有影响，只要是 XXX.yml 文件就行</span>
</span></span></code></pre></div><p>编辑 <code>hugo.yml</code> 这个文件，其中的内容可以参考：<a href="https://github.com/marketplace/actions/github-pages-action">GitHub Pages action · Actions · GitHub Marketplace · GitHub</a></p>
<p>需要注意的地方我给出了说明，其中特别要注意 <code>deploy_key</code> 这一项。 我这里使用 deploy_key 进行身份验证。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">GitHub Pages</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">main </span> <span style="color:#75715e">#默认使用 main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pull_request</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-20.04</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">concurrency</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">group</span>: <span style="color:#ae81ff">${{ github.workflow }}-${{ github.ref }}</span> <span style="color:#75715e">#不用改</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>  <span style="color:#75715e"># Fetch Hugo themes (true OR recursive)</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">fetch-depth</span>: <span style="color:#ae81ff">0</span>    <span style="color:#75715e"># Fetch all history for .GitInfo and .Lastmod</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Hugo</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-hugo@v2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">hugo-version</span>: <span style="color:#e6db74">&#39;0.97.3&#39;</span> <span style="color:#75715e">#改成自己所用的 hugo 版本</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">extended</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">run</span>: <span style="color:#ae81ff">hugo --minify</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">deploy_key</span>: <span style="color:#ae81ff">${{ secrets.DEPLOY_TOKEN }}</span> <span style="color:#75715e">#注意这个 DEPLOY_TOKEN</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">external_repository</span>: <span style="color:#ae81ff">Jousimies/Jousimies.github.io</span> <span style="color:#75715e"># 改成自己的仓库地址</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">publish_branch</span>: <span style="color:#ae81ff">main</span> <span style="color:#75715e">#默认使用 main</span>
</span></span><span style="display:flex;"><span>	  <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span> <span style="color:#75715e">#不用改</span>
</span></span></code></pre></div><h3 id="github-actions-deploy-key">github actions deploy key</h3>
<p>上面编辑好了 hugo.yml 这个文件，下面要设置 github-actions 这一项。</p>
<p>首先要生成 ssh key 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ~
</span></span><span style="display:flex;"><span>ssh-keygen -t rsa -b <span style="color:#ae81ff">4096</span> -C <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>git config user.email<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> -f gh-pages -N <span style="color:#e6db74">&#34;&#34;</span>
</span></span></code></pre></div><p>以上命令会在 <code>~</code> 目录下生成 <code>gh-pages</code> （私钥）和 <code>gh-pages.pub</code> （公钥）两个文件。这两个文件要分别用到上面建的两个 github 仓库中。</p>
<ul>
<li>
<p>打开 <a href="https://github.com/Jousimies/hugo-source/settings/secrets/actions/new">https://github.com/Jousimies/hugo-source/settings/secrets/actions/new</a> （改成自己的项目仓库地址）贴入 <code>gh-pages</code> 中的内容。</p>
<p>注意 <code>Name</code> 那一项里必需填 <code>DEPOLY_TOKEN</code> 。其实是上面 hugo.yml 中 <code>${{ secrets.DEPLOY_TOKEN }}</code> 设置和这里要对应上，否则 github 运行 action 时会报没有 depoly token 的错误。</p>
</li>
<li>
<p>打开 <a href="https://github.com/Jousimies/Jousimies.github.io/settings/keys/new">https://github.com/Jousimies/Jousimies.github.io/settings/keys/new</a> （改成自己的主页仓库地址）贴入 <code>gh-pages.pub</code> 中的内容。</p>
<p>这里的 title 随便填。</p>
</li>
</ul>
<h3 id="push-仓库">PUSH 仓库</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd hugo-source
</span></span><span style="display:flex;"><span>git add -A
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;Init push&#34;</span>
</span></span></code></pre></div><p>当成功 push 仓库后， github 会自动运行 actions ，在 <a href="https://github.com/Jousimies/hugo-source/actions">https://github.com/Jousimies/hugo-source/actions</a> （切换成自己的项目仓库地址）中可以查看 workflow 的状况。</p>
<p>如果显示是个绿色的勾，那么恭喜你成功了。稍后打开 <a href="https://jousimies.github.io">https://jousimies.github.io</a> 就能看到自己的博客内容了。</p>
]]></content:encoded></item><item><title>哲学和逻辑</title><link>https://jousimies.github.io/posts/%E5%93%B2%E5%AD%A6%E5%92%8C%E9%80%BB%E8%BE%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/%E5%93%B2%E5%AD%A6%E5%92%8C%E9%80%BB%E8%BE%91/</guid><description> 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。 &amp;mdash;- 苏珊哈克</description><content:encoded><![CDATA[<blockquote>
<p>逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。 &mdash;- 苏珊哈克</p>
</blockquote>
]]></content:encoded></item><item><title>知识管理</title><link>https://jousimies.github.io/posts/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/</guid><description>这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。
知识的管理涉及到知识的获取、组织、分享和应用四个方面。
文献管理与阅读流程 通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。
通过阅读文献的参考文献进行文献的挖掘。
现在文献一般都有网页版，可以方便的进行相关的探索。
通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。
zotero需要安装插件，better bibtex for zotero。
export libray，需要勾选自动更新题录选项。
文献的最终管理通过jabref软件进行。
将第2步中导出的题录，import到jabref中的当前库中。
alt + f8 整理下entry。
这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。
打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。
决定是否深入进行阅读。
文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：
分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么 这部分是阅读一篇文献需要解决的问题。
架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。</description><content:encoded><![CDATA[<p>这是我 2020-10-30 日写的。目前 2022-04-21 我的知识管理 workflow 有了很大进，后面会重新写下自己的工作流程。</p>
<p>知识的管理涉及到知识的获取、组织、分享和应用四个方面。</p>
<h2 id="文献管理与阅读流程">文献管理与阅读流程</h2>
<ol>
<li>
<p>通过谷歌快讯订阅相关关键字或研究者到指定邮箱，通过邮箱定期关注最新的研究前沿。</p>
</li>
<li>
<p>通过阅读文献的参考文献进行文献的挖掘。</p>
</li>
<li>
<p>现在文献一般都有网页版，可以方便的进行相关的探索。</p>
</li>
<li>
<p>通过zotero保存文献。zotero的优势在于会自动更新题录相关信息，极少部分需要自己手动调整。</p>
</li>
<li>
<p>zotero需要安装插件，better bibtex for zotero。</p>
</li>
<li>
<p>export libray，需要勾选自动更新题录选项。</p>
</li>
<li>
<p>文献的最终管理通过jabref软件进行。</p>
</li>
<li>
<p>将第2步中导出的题录，import到jabref中的当前库中。</p>
</li>
<li>
<p>alt + f8 整理下entry。</p>
</li>
</ol>
<p>这部分涉及到题录的bibtexkey，pdf的文件位置、pdf文件的命名等。</p>
<ol>
<li>
<p>打开文献的网页版，进去网页全文翻译，快速预览一边，获得主要的信息。</p>
</li>
<li>
<p>决定是否深入进行阅读。</p>
</li>
<li>
<p>文献深入阅读通过acrobat进行，通过微软输入法设置快捷键，在pdf中插入以下内容：</p>
</li>
<li>
<ol>
<li>分类2. 主题3. 架构4. 待解决问题5. 重要的句子和主旨6. 未解决问题7.研究相关性8.可以利用什么</li>
</ol>
</li>
</ol>
<p>这部分是阅读一篇文献需要解决的问题。</p>
<ol>
<li>
<p>架构通过设置pdf的书签进行。重要的句子和主旨的话也添加到书签当中，更改标签的颜色进行区分。</p>
</li>
<li>
<p>以上的内容会被jabref自动识别。</p>
</li>
<li>
<p>文献的记录通过vscode进行，通过编辑latex进行记录，并生成pdf文件。</p>
</li>
</ol>
<h2 id="笔记和个人事务的管理">笔记和个人事务的管理</h2>
<ol>
<li>
<p>obsidian软件可以方便的进行md文件的写作和管理，取代tiddlywiki进行笔记的管理。</p>
</li>
<li>
<p>tiddlywiki编辑界面不友好。</p>
</li>
<li>
<p>md文件可以通过pandoc方便的导出为pdf文件或docx类型的文档，并且可以指定样式。</p>
</li>
<li>
<p>个人事务通过微软的To Do软件进行。</p>
</li>
<li>
<p>emacs中的org很好很强大，但是对于手机端的使用不够友善。</p>
</li>
<li>
<p>大多数情况下，很难像柳比歇夫一样全部面面俱到的记录。</p>
</li>
<li>
<p>可以通过手机端的tasker进行日程的简单记录，替代emacs中的强大记录功能。</p>
</li>
</ol>
]]></content:encoded></item></channel></rss>