<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Explore the world, fulfill your being.</title><link>https://jousimies.github.io/</link><description>Recent content on Explore the world, fulfill your being.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Feb 2023 16:18:00 +0800</lastBuildDate><atom:link href="https://jousimies.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 display-buffer-alist 管理 Emacs 的窗口</title><link>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-display-buffer-alist-%E7%AE%A1%E7%90%86-emacs-%E7%9A%84%E7%AA%97%E5%8F%A3/</link><pubDate>Mon, 27 Feb 2023 16:18:00 +0800</pubDate><guid>https://jousimies.github.io/posts/%E4%BD%BF%E7%94%A8-display-buffer-alist-%E7%AE%A1%E7%90%86-emacs-%E7%9A%84%E7%AA%97%E5%8F%A3/</guid><description>display-buffer-alist 是 Emacs 中用户自定义的用于操作 buffer 如何显示的列表。
一个简单的示例：
(add-to-list &amp;#39;display-buffer-alist &amp;#39;(&amp;#34;\\*toc\\*&amp;#34; (display-buffer-reuse-window) (side . left) (window-parameters (mode-line-format . none) (delete-other-windows . t)))) 其基本的格式是 (CONDITION . ACTION) ，当满足对应的 CONDITION 时，则使用对应的 ACTION。CONDITION 是使用正则去匹配对应的 buffer 名称。
例如上面的示例中中 \\*toc\\* 是配匹的条件：当一个 buffer 的名字是 *toc* 时就使用相应的设定。
^ 表示配匹字符的开始。 .* 表示配匹任意的字符，不包括换行。 \\ 是转义符号。 \\* 表示匹配字符 *。 \\| 表示匹配或操作。 $ 表示匹配字符的结尾。 更多关于 Emacs 中正则的表达可以参见：Regexps (GNU Emacs Manual)。
采用上面的正则符号，对于要配匹 .org .md .tex 文件，就可以使用 ^.*\\.\\(org\\|md\\|tex\\)$.
display-buffer-reuse-window 指定了对应的 buffer 如何展示，更多的、详细的内容可以参见 Emacs 文档 Action Functions for Buffer Display 一节。</description></item><item><title>Personal emacs configuration</title><link>https://jousimies.github.io/posts/emacs/</link><pubDate>Sun, 26 Feb 2023 22:02:00 +0800</pubDate><guid>https://jousimies.github.io/posts/emacs/</guid><description>Early Init ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*- ;; Profiling since here when in debug-mode (when init-file-debug (profiler-start &amp;#39;cpu) (add-hook &amp;#39;window-setup-hook #&amp;#39;profiler-stop 0)) ;; Defer garbage collection further back in the startup process (setq gc-cons-threshold most-positive-fixnum gc-cons-percentage 1.0) ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early. (push &amp;#39;(menu-bar-lines . 0) default-frame-alist) (push &amp;#39;(tool-bar-lines .</description></item><item><title>Simple resume</title><link>https://jousimies.github.io/about/</link><pubDate>Sun, 26 Feb 2023 10:00:00 +0000</pubDate><guid>https://jousimies.github.io/about/</guid><description>Hi there!
You can call me Jousimies. This blog is a place for me to share my thoughts and life in general.
&amp;ldquo;Explore, Evolve, Fulfill Being&amp;rdquo; suggests a philosophy of personal growth and development:
Explore: Encourages one to be curious and open-minded, to seek new experiences, and to learn about the world around us.
Evolve: Suggests that growth and change are natural parts of life, and encourages us to embrace personal development and evolve into our best selves.</description></item><item><title>Mac 上使用 naiveproxy 及代理配置</title><link>https://jousimies.github.io/posts/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-naiveproxy-%E5%8F%8A%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 15 Feb 2023 11:02:00 +0800</pubDate><guid>https://jousimies.github.io/posts/mac-%E4%B8%8A%E4%BD%BF%E7%94%A8-naiveproxy-%E5%8F%8A%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</guid><description>Naiveproxy 是一种科学上网方式，但是其没有合适的客户端可用。虽然可以使用 qv2ray 然后使用 naive 的插件方式进行，但是我个人觉得其有点过于笨重，导致我不怎么想使用 qv2ray。
如果不使用 qv2ray，那只能使用 Terminal 开启以下的命令来进行科学上网。
cd ~/naive ./naive config.json 以上命令执行完并不能使你的 Safari 科学浏览网页。
如果你不使用 Safari 浏览器而是 Chrome 或者 Firefox，那么可以使用 Switchyomega 这个插件，关于它的具体使用方法可以参见 Switchyomega 主页，这里不详述。
那么要怎么才能使 Safari 也可以正常的科学上网呢？答案是使用 MacOS 自带的 Proxies 设置。
Figure 1: Proxies 设置界面
我设置的 naiveproxy 工作在 1080 端口，在上面的 Proxies 界面中，我尝试使用了 http 和 https 两种设置，但是都不能使 Safari 正常的工作。后来看到有 Automatic proxy configuration 这个选项，其要求是使用 pac 文件来进行科学上网。
Pac 文件怎么获取呢？我目前的方式是使用 Switchyomega 这个插件导出了一份 proxy.pac 文件来使用。暂时不知道如何不使用它来获取一份 proxy.pac 文件，或者我给你一份我使用的？</description></item><item><title>Emacs: org-mode 文档转 latex 简明教程</title><link>https://jousimies.github.io/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link><pubDate>Tue, 31 Jan 2023 16:01:00 +0800</pubDate><guid>https://jousimies.github.io/posts/emacs-org-mode-%E6%96%87%E6%A1%A3%E8%BD%AC-latex-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid><description>Latex 模板 虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件，毕竟使用自己的配置，会很容易改，而且模板文件使用的 sty 文件，改起来比较头大。
如果想要使用模板的可以看看 ElegantNote ，看起来还不错。MacOS 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。
此配置，是基于 ctex 这个包，利用 xelatex 编译。
我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。
Emacs 配置 Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。
小说啥的，我会使用 book 这个配置，将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。
(with-eval-after-load &amp;#39;ox-latex (setq org-latex-classes nil) (add-to-list &amp;#39;org-latex-classes &amp;#39;(&amp;#34;book&amp;#34; &amp;#34;\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]&amp;#34; (&amp;#34;\\chapter{%s}&amp;#34; .</description></item><item><title>Org-roam 在 windows 上的安装</title><link>https://jousimies.github.io/posts/org-roam-%E5%9C%A8-windows-%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 31 Jan 2023 16:01:00 +0800</pubDate><guid>https://jousimies.github.io/posts/org-roam-%E5%9C%A8-windows-%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>2023-01-31 Emacs 29 上己内置了 sqlite，Org-roam 的安装己较容易进行。我己较长时间没有在 win 上使用 Emacs，以下步骤仅供参考。
Emacs 和 org-roam 在 Linux 和 Mac 系统上没有什么问题，但是在 Windows 上略有点麻烦。
Win 上可以使用 Scoop 安装相关软件。具体流程如下：
安装 emacs
scoop install emacs 安装 gcc
scoop install gcc 理想是很好，但是在这一步，会出错，提示 404错误（2022-07-25）。https://github.com/ScoopInstaller/Scoop/issues/4250
一个临时的解决方式是替换 gcc.json 中的网址到mirrors.huaweicloud.com. 相关讨论见https://github.com/ScoopInstaller/Main/issues/1752#issuecomment-778569708
open the &amp;lt;scoopdir&amp;gt;/buckets/main/gcc.json replace http://repo.msys2.org/ to http://mirrors.huaweicloud.com/msys2/ 安装 make
scoop install make</description></item><item><title>All-in-one 笔记系统</title><link>https://jousimies.github.io/posts/2023-01-19t1354/</link><pubDate>Thu, 19 Jan 2023 16:01:00 +0800</pubDate><guid>https://jousimies.github.io/posts/2023-01-19t1354/</guid><description>之前在知乎上看到一个问题是：有没有一个All in One的笔记系统?。我在下面的回答中提供了一个方案就是使用 Emacs。
那么现在说说怎么使用 Emacs 进行笔记的管理，如何做到 all-in-one。
在上面的提问中，提问者列出了自己关于all-in-one笔记的系统的几点要求。笔记记的是什么内容呢，初步列举如下：
笔记内容 文本+格式 笔记肯定第一位的就是需要记录大量的文本内容。那么文本只能是汉字、英文、字母吗？当然不是，文本也有格式，如对文本进行加粗、斜体、引用、列表等等。文本+格式只要是个笔记软件应该都能提供（window 上的 txt 记事本不行，过于简陋）。
但是文本与格式分离，这不是哪个软件都能做好的。如 word 就很难做到样式和内容的分离，以我的经验，它可以做到但是很难，你需要对word 有充分的了解。Latex 就很容易做到文本与样式的分离，但是它难在非所见即所得。（有什么软件你需要深度使用，但是可以对其不需要了解的吗？没有什么是纯傻瓜式的。）
图表 我认为表格只是文本内容呈现的另一种方式，笔记系统中不需要使用过于复杂的表格。
这里要提到 onenote 笔记软件，这个软件我很多次都想利用起来，但是最终都没能。现在想来，它就像一个画板，做笔记像画画，内容超出屏幕范围时，很难对内容有个全局的了解。相对应的是幕布类的大纲式的软件（有了解没用过，不评价）。Onenote软件作的笔记如果想要内容很规整，一个方法就是嵌套使用表格（可以很漂亮，但是不推荐）。
图是笔记系统中一个很重要的组成部分。笔记系统中插入图我想有两种方式，一种是如word ，印象笔记的方式。一种是类似org-mode, markdown这种方式，以链接的方式插入到笔记当中。我选择第二种。
图直接插入到笔记当中的方式，往往是专有格式的软件。这类笔记系统对于软件本体依赖过高，不利于笔记在不同系统中的转移。图直接插入到笔记当中，会导致单个笔记的体积很大，而且很难在不同的笔记中进行复用。相应的使用图片链接的方式就没有上述的问题。
公式 公式我只推荐使用 latex ，以文本的方式进行管理。如 Word 上使用 mathtype 进行公式的输入非常差，难以编排，交叉引用。
如果你认为latex 输入公式很慢，不直观，是大概率你没有使用合适的方法。你需要的是快速输入的方法以及公式预览。Latex公式的效果看看这个demo。
文献管理 文献管理软件有很多，如zotero，endnote，mendeley，jabref等等。笔记系统中我推荐使用zotero，其他都不做推荐。我更喜欢的方式是直接管理bibtex文件，zotero只是我用来收集bib的工具。
此外，还应关注的是文献文件的格式，大部份应该都是pdf 文件。
如果是caj等格式，那么推荐你使用tampermonkey在知网上下载pdf 格式的，而不是caj格式的（我讨厌caj）。
如果你看的是出版物，网上有很多提供的epub格式。
音频和视频 这里不过多写，我没这个需求。对此没什么实践。
笔记的原则 笔记本身 不分来源，不分重要性，只要是自己关心、想记录下来的内容，都可以一点一滴地写在笔记本上。《如何有效整理信息》
记笔记很难的一点在于归类，以什么主题进行记录。如何有效整理信息一书的作者提出的不分来源，不分重要性，只要是自己关心的都可以记录下来。
这样也可以解决一个问题，记笔记有什么用？笔记记录的作用不一定在当下，有可能在以后，当你需要的时候有一个系统可以供你查询。关于笔记的主题或者分类我的关点就是不分类，或者只是给一个大类而不具体的进行区分，当相关的笔记积累了足够多的内容再进行整理与归类。不依赖分类，取而代之的是建立以搜索为基础的笔记管理方法。
笔记的原则关于笔记本身：记什么？记你关心的内容！怎么分类？不分类！
笔记工具 传统的笔记工具以纸笔为载体，各种手账、剪纸等，以纸笔为载体是纸媒时代的最有效的进行笔记管理的方式，如何有效整理信息这本书的作者就提出了一元化的笔记方法，作者本人也积累了大量的笔记本。个人很配服他的这种毅力，平常人很难一以贯之的坚持进行笔记的记录。
但是我个人不怎么喜欢这种基于纸笔的笔记管理方式，当前是网络时代，我们有太多的信息是基于网站等获取的，我们身处于电子时代，我认为笔记的最终去处是电子化。出门不一定会携带纸笔，但是一定会带上手机，部份情况下不适合使用电子设备进行笔记的记录也可以暂时的使用纸笔进行记录，事后再进行电子化。
现在电子笔记软件有太多的可选项，Onenote 、印象笔记、Roam Research 、Notion 等等。可选择的太多有很多人就有了困难选择症，在多种尝试之后我的选择是以基于 org-mode, 以 Emacs 文本编辑器为载体的笔记管理。
笔记原则之笔记工具：以电子笔记为主，辅之纸笔。
笔记的流程 在 How to take smart notes 中作者提出了如下的笔记流程。这个流程是关于记笔记的终极答案，但是个人觉得这样的笔记方式对于笔记的记录是一件很耗费精神的事情，由其是在把临时笔记和文学笔记转化为永久笔记的过程中，所以个人认为这一步可以简化。</description></item><item><title>基于 Emacs 的文献阅读方法</title><link>https://jousimies.github.io/posts/2023-01-19t1606/</link><pubDate>Thu, 19 Jan 2023 16:01:00 +0800</pubDate><guid>https://jousimies.github.io/posts/2023-01-19t1606/</guid><description>之前写过一篇关于使用 Emacs 进行文献管理的文章，有人询问能否写一篇详细的教程。
这篇文章就更新下我目前的关于文献管理及笔记记录的相关流程，更多的是关于术的使用，道的部份还得每个人深思。
Zotero 首先是文献管理的基本软件。
我曾经使用过的有 Endnote、Mendeley、Zotero、Jabref、Ebib 等等，其中Endnote 是最早使用的，但是一直都没觉得它有多么的好用，可能最早就它和 Word 结合使用的体验较好而己。Mendeley 己经很久没有使用过了，使用它的时间比 Endnote 长一些，它需要在线使用更新文献等，没有黑科技使用起来并不是很好。Jabref 的优点在于开源，以及使用 plain entry 的功能自动生成文献题录。
Zotero 的优势在于收集文献，我的基本使用流程是使用 Google scholar 跟踪最新的文献，通过邮箱订阅一周会定时收到几篇文献，打开文献阅读的时候，然后使用 zotero 保存到数据库当中。Zotero 有个插件 Better bibtex for zotero，使用该插件可以自动的更新数据库中的文献到 Reference.bib 文件，这个文件记录了所有的文献引文，该文件可以在Emacs 中调用。
Emacs 中文献的管理 在 Emacs 中有多个包可以进行文献的管理与阅读工作，具体的可以通过 melpa.org 这个网战查询。我目前使用的是 Ebib、Bibtex-completion、Citar、org-cite 以及 org-roam-bibtex 这几个。
Ebib 是类似 zotero 的文献管理包，可以进行文献的收索、查询、笔记的记录等工作，但是我仅用它来进行文献的过滤查找，简单的查找用使用 citar 进行。
我的配置文件见.emacs.d/init-bibtex.el at master · Jousimies/.emacs.d。
这个过程的难点在于 Emacs 的配置，配置好之后在 Emacs 中可以通过 citar 打开文献文件、引文或者文献引用等都比较简单。
PDF 阅读软件 我通常只保存 PDF 文件，知网上的 CAJ 文件我会通过 Tempermonkey 这个软件来下载 PDF 文件，我不喜欢 CAJ 格式文件，在 Mac 上打开非常的慢，体验很差。</description></item><item><title>Roam research</title><link>https://jousimies.github.io/posts/2022-12-10/</link><pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/2022-12-10/</guid><description>今天在知乎上看到一篇文章是在本地使用 roam research，不连网使用就不需要交费，所以就尝试了下。想要尝试使用看这。
Roam research 这类大纲类软件的 daily note 功能相比 org-roam 要好用，但是创建页面笔记的时候还是有很多的不适应感，有可能是因为我用习惯了基于 Emacs 的 org-roam 笔记。
首先不能根据上下文的环境自动的切换输入法，这个给我带来了很大的不确定感，需要不停的使用 Shift 在中英文之间进行切换。虽然我使用 Evil 需要在 insert 和 normal 模式之间进行切换，但是这种形为是明确的，而在 RR 中输入法的切换是不明确的，需要自己明确当前的输入法状态。比如在一个词条上我要创建页面引用，我会选中词条然后通过输入[[进行，但是如果当前输入法是中文的状态就会出现【覆盖当前的词条，很不爽。
创建 alias 不是很方便，没有 org-roam 好用。有 pomodoro 的功能，但是很简陋，不能创建多个。不能进行计时。
RR 比较强的一方面在于文章的组织，当建立了较好的笔记库后，新建一篇文章复制可拖动 block 即可。在 org-roam 当中需要使用 org-transclusion，相较于直接拖动的操作这个会麻烦一些。
不能方便的进行文献的引用，结合 zotero 进行文献的管理很差，但是也不是不能使用，我无感。想要使用 zotero 的可以看看这篇文章，Zotero and Roam Research，该文中需要的 zotero translator 的内容去原网下载（尊重版权）。
下载了 RR 之后，我又下载了 logseq ，两者好像啊！
综上，这两个软件都不错，颜值高，但是不是我的菜，还是使用 org-roam 比较带劲，Emacs 的生态更好，颜值差些。</description></item><item><title>哲学、逻辑和思维</title><link>https://jousimies.github.io/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/</link><pubDate>Tue, 25 Oct 2022 11:01:00 +0800</pubDate><guid>https://jousimies.github.io/posts/%E5%93%B2%E5%AD%A6_%E9%80%BB%E8%BE%91%E5%92%8C%E6%80%9D%E7%BB%B4/</guid><description>哲学的定义 哲学是研究自然、社会和思维的最一般规律的科学。
“哲学”一词的本义，西方人通常指“爱智慧”或“智慧之学”，中国人解释为通晓事理、使人聪明的学问。
哲学是关于世界观的学问，是理论化和系统化的世界观，任何哲学都是世界观和方法论的统一。
根据对思维与存在、精神与物质的关系的认识，哲学可分为唯物主义和唯心主义两大派别。
认识论是哲学的一个组成部分。
冯友兰说：“哲学的作用有两方面，一是锻炼、发展人的理论思维的能力，一是丰富、提高人的精神境界。”
人生处处不无哲学的影响。
王国维在《静庵文集·自序二》中写道:“哲学上之说，大都可爱者不可信，可信者不可爱。余知真理，余又爱其谬误。”
方法论 Youtube The Active Learning Method 方法论，就是关于人们认识世界、改造世界的方法的理论。它是人们用什么样的方式、方法来观察事物和处理问题。
方法论主要说明 怎么办 的问题。
方法论是一种以解决问题为目标的理论体系或系统，通常涉及对问题阶段、任务、工具、方法技巧的论述。方法论会对一系列具体的方法进行分析研究、系统总结并最终提出较为一般性的原则。
方法论也是一个哲学概念。人们关于“世界是什么、怎么样”的根本观点是世界观。用这种观点作指导去认识世界和改造世界，就成了方法论。
方法论是普遍适用于各门具体社会科学并起指导作用的范畴、原则、理论、方法和手段的总和。
方法论=逻辑+环境变量 &amp;mdash;- 底层逻辑(刘润, 2021)
哲学和逻辑 逻辑哲学是逻辑学中提出的哲学问题，就像科学哲学是科学中提出的哲学问题。而哲学逻辑，不存在什么哲学逻辑，只不过是逻辑和哲学问题关联起来了而已。&amp;mdash;- 苏珊哈克
思维更清晰，表达更顺畅：书单 逻辑学入门:清晰思考，理性生活的88个逻辑学常识 帮助读者轻松地了解逻辑学常识和概念，辨别语言陷阱，认识逻辑谬误，学会用清晰理性的方式思考问题。 沟通力就是思维力 格局 这本书不是讲思维能力的，但是提供了提高思维能力的一种很有效的方式，那就是格局。 作者说人生的格局就在你怎么看自己，你所认识的人，你说过的话，你给人的感觉，你做事的态度，你所经历的遭遇，你的每个念头，以及你的所作所为。当你把这些都想清楚了，你的格局提高了，思维能力自然而然会上升一个层次。 一本小小的红色写作书 麦肯锡教我的写作武器 金字塔原理 非暴力沟通 态度改变与社会影响 远见 系统之美 我们如何思维</description></item><item><title>算法</title><link>https://jousimies.github.io/posts/%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/%E7%AE%97%E6%B3%95/</guid><description>今天看到一篇好的介绍算法的文章。此文总结了六种算法思想。此处做些记录，留待以后慢慢补充。
递归算法
递归算法是一种直接或者间接调用自身函数或者方法的算法。 递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。
分治算法
分治，顾名思义就是将一个复杂的问题分成两个或多个相似的子问题，再把子问题分成更小的子问题，直到更小的子问题可以简单求解，原问题的解则为子问题解的合集。
贪心算法
贪心算法总是做出当前的最优选择，即期望通过局部的最优选择获得整体的最优选择。它做出的选择仅是某种意义上的局部最优，但是贪心算法在很多问题上还是可以获得最优解或较优解。
回溯算法
回溯算法是一种搜索法，试探法，它会在每一步做出选择，一旦发现这个选择无法得到期望结果，就回溯回去，重新做出选择。
深度优先搜索利用的就是回溯算法思想。
动态规划
动态规划也是将复杂问题分解成小问题求解的策略，与分治算法不同，动态规划各子问题是相互关联的。动态规划适用于子问题重叠的情况，即不同的子问题具有公共的子子问题。
枚举算法
将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适。</description></item><item><title>Emacs 中 org-mode 文档编译 PDF 的基本设置</title><link>https://jousimies.github.io/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/emacs-%E4%B8%AD-org-mode-%E6%96%87%E6%A1%A3%E7%BC%96%E8%AF%91-pdf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</guid><description>Latex 模板 虽然使用模板可以大大简化自己需要配置的内容，但是最后还是决定自己制作一个自用的最小化的配置文件。毕竟使用自己的配置，会很容易改。而且模板文件使用的 sty 文件，改起来比较头大。
如果想要使用模板的可以看看 ElegantNote ，看起来还不错。Macos 中使用 ElegantNote 这个模板，需要把 ElegantNote 文件夹中的 .cls 文件放置到 ~/Library/texmf 这个文件夹中。如果这个文件夹不存在，自己创建一个就可以。 Finder 中可能看不到 Library 这个文件夹，使用 Terminal 操作即可。
此配置，是基于 ctex 这个包，利用 xelatex 编译。
我通常只编辑 org 文档，不会直接写 latex 文件，在需要的时候将 org 文件直接转为 pdf 文档，只在需要找查错误时才会转 tex 文档。如果有其他的需要，如写 blog ，则转成 md 文件，也可以直接转 html 文件。当需要转 docx 文件时，利用 pandoc 实现。
Emacs 配置 Emacs 中关于 latex 的配置如下，主要配置了 book 和 article 这两个文档格式。
小说啥的，我会使用 book 这个配置将下载到的小说 txt 文档编译成 pdf 保存。日常使用就使用 article 这个配置。
(with-eval-after-load &amp;#39;ox-latex (setq org-latex-classes nil) (add-to-list &amp;#39;org-latex-classes &amp;#39;(&amp;#34;book&amp;#34; &amp;#34;\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep} [NO-DEFAULT-PACKAGES] [NO-PACKAGES] [EXTRA]&amp;#34; (&amp;#34;\\chapter{%s}&amp;#34; .</description></item><item><title>hugo 结合 org-roam 写 blog</title><link>https://jousimies.github.io/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://jousimies.github.io/posts/org_roam_%E7%BB%93%E5%90%88_hugo_%E5%86%99_blog/</guid><description>最近配置了自己的 blog(我的 hugo 配置记录)， 目前写 blog 的流程有三种方式：
写在一个统一的文件中 这个的好处是对于 blog 而言有一个统一的入口，所有的 posts 都在这一个文件中。这也是 hugo 推荐的管理方式。
如 all-post.org 这个文件。写完后，在对应的 subtree 下， 使用 C-c C-e H H 生成相应的 md 文件（在 Emacs 中需要配置 ox-hugo ）。
虽然这是推荐的使用方式，但是我个人觉的当内容积累过多的时候，使得这一个文档变的很大，管理起来有点烦人。或许是因为我使用 org-roam 作为我的笔记系统，所以我倾向于使用小文件替代大文件。
使用 easy-hugo easy-hugo 的详细使用方法可以看官方的教程。关于其的配置如下：
(defface easy-hugo-help-face `((((class color) (background light)) ,@(and (&amp;gt;= emacs-major-version 27) &amp;#39;(:extend t)) :bold t :foreground &amp;#34;#000000&amp;#34; :background &amp;#34;#F2F0EF&amp;#34;) (((class color) (background dark)) ,@(and (&amp;gt;= emacs-major-version 27) &amp;#39;(:extend t)) :bold t :foreground &amp;#34;#FFFFFF&amp;#34; :background &amp;#34;#252321&amp;#34;)) &amp;#34;Definition of help color.</description></item></channel></rss>